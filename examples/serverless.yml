service: project-name

plugins:
  - serverless-offline
  - serverless-plugin-cloudfront-lambda-edge

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, "us-east-1"}
  client:
    bucketId: ${opt:bucket, ""}
  api:
    source: ${opt:source, "dist"}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ${self:custom.region}
  role: ${opt:role, ""}

functions:
  router:
    name: '${self:service}-${self:custom.stage}-router'
    handler: api/${self:custom.api.source}/edge/index.handler
    memorySize: 128
    timeout: 5
    lambdaAtEdge:
      distribution: WebsiteDistribution
      eventType: origin-request
  api:
    name: '${self:service}-${self:custom.stage}-api'
    handler: api/${self:custom.api.source}/lambda/index.handler
    events: [ { http: 'ANY /' }, { http: 'ANY {proxy+}' } ]

resources:
  Resources:
    WebsiteDistribution:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          DefaultCacheBehavior:
            AllowedMethods: [HEAD, GET, OPTIONS]
            TargetOriginId: ${self:custom.client.bucketId}
            ViewerProtocolPolicy: allow-all
            DefaultTTL: 60
            MaxTTL: 60
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
          CacheBehaviors:
            -
              AllowedMethods: [HEAD, DELETE, POST, GET, OPTIONS, PUT, PATCH]
              TargetOriginId: { Ref: "ApiGatewayRestApi" }
              PathPattern: /graphql*
              ViewerProtocolPolicy: allow-all
              DefaultTTL: 60
              MaxTTL: 60
              Compress: true
              ForwardedValues:
                QueryString: true
                Cookies:
                  Forward: none
            -
              AllowedMethods: [HEAD, GET, OPTIONS]
              TargetOriginId: ${self:custom.client.bucketId}
              PathPattern: /assets/*
              ViewerProtocolPolicy: allow-all
              DefaultTTL: 60
              MaxTTL: 60
              Compress: true
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
          DefaultRootObject: index.html
          Enabled: true
          PriceClass: PriceClass_100
          HttpVersion: http2
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          Origins:
            -
              Id: ${self:custom.client.bucketId}
              DomainName: "${self:custom.client.bucketId}.s3.amazonaws.com"
              S3OriginConfig: {}
            -
              Id: { Ref: "ApiGatewayRestApi" }
              DomainName:
                Fn::Join: ["", [ { Ref: "ApiGatewayRestApi" }, ".execute-api.${self:custom.region}.amazonaws.com" ] ]
              OriginPath: /dev
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: "match-viewer"
  Outputs:
    WebsiteDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebsiteDistribution, DomainName ]
