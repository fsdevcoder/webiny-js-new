{"version":3,"sources":["../../src/render/renderers.js"],"names":["defaultWidgetRender","widget","cms","services","get","widgetDefinition","getWidget","type","cloneElement","render","value","defaultWidgetRenderMiddleware","params","next","output","createRenderer","config","widgetRender","widgetRenderMiddleware","data","content","i","length","widgetParams","page","push","key","id"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA;;;AAGA,IAAMA,sBAAsB,SAAtBA,mBAAsB,OAAgB;AAAA,QAAbC,MAAa,QAAbA,MAAa;;AACxC,QAAMC,MAAM,eAAIC,QAAJ,CAAaC,GAAb,CAAiB,KAAjB,CAAZ;;AAEA,QAAMC,mBAAmBH,IAAII,SAAJ,CAAcL,OAAOM,IAArB,CAAzB;AACA,6BAAUF,gBAAV,4CAAmEJ,OAAOM,IAA1E;;AAEA,WAAO,gBAAMC,YAAN,CAAmBH,iBAAiBI,MAAjB,CAAwBR,MAAxB,CAAnB,EAAoD,EAAES,OAAOT,MAAT,EAApD,CAAP;AACH,CAPD;;AASA;;;;AAIA,IAAMU,gCAAgC,SAAhCA,6BAAgC,CAACC,MAAD,EAAiBC,IAAjB,EAAoC;AACtE,QAAID,OAAOE,MAAX,EAAmB;AACf,eAAOD,MAAP;AACH;AACDD,WAAOE,MAAP,GAAgBd,oBAAoBY,MAApB,CAAhB;AACAC;AACH,CAND;;AAQA;;;;;AAKO,IAAME,0CAAiB,SAAjBA,cAAiB,CAACC,MAAD,EAAY;AACtC,QAAMC,eAAeD,OAAOf,MAAP,IAAiB,EAAtC;AACA,QAAMiB,yBAAyB,wEAAYD,YAAZ,IAA0BN,6BAA1B,GAA/B;;AAEA;AAAA,6FAAO,iBAAMQ,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,mCADH,GACa,EADb;AAEMC,6BAFN,GAEU,CAFV;;AAAA;AAAA,kCAEaA,IAAIF,KAAKC,OAAL,CAAaE,MAF9B;AAAA;AAAA;AAAA;;AAGOC,wCAHP,GAGsB;AACjBC,sCAAML,IADW;AAEjBlB,wCAAQkB,KAAKC,OAAL,CAAaC,CAAb,CAFS;AAGjBP,wCAAQ,IAHS;AAIjBd;AAJiB,6BAHtB;AAAA;AAAA,mCASOkB,uBAAuBK,YAAvB,CATP;;AAAA;AAUST,kCAVT,GAUoBS,YAVpB,CAUST,MAVT;AAWC;;AACAM,oCAAQK,IAAR,CAAa,gBAAMjB,YAAN,CAAmBM,MAAnB,EAA2B,EAAEY,KAAKP,KAAKC,OAAL,CAAaC,CAAb,EAAgBM,EAAvB,EAA3B,CAAb;;AAZD;AAEsCN,+BAFtC;AAAA;AAAA;;AAAA;AAAA,6DAcI;AAAA;AAAA,kCAAM,MAAMF,IAAZ;AAAmBC;AAAnB,6BAdJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA;AAgBH,CApBM","file":"renderers.js","sourcesContent":["import React from \"react\";\nimport invariant from \"invariant\";\nimport compose from \"webiny-compose\";\nimport { app } from \"webiny-app\";\nimport Page from \"./Page\";\n\n/**\n * Default logic for single widget rendering.\n */\nconst defaultWidgetRender = ({ widget }) => {\n    const cms = app.services.get(\"cms\");\n\n    const widgetDefinition = cms.getWidget(widget.type);\n    invariant(widgetDefinition, `Missing widget definition for type \"${widget.type}\"`);\n\n    return React.cloneElement(widgetDefinition.render(widget), { value: widget });\n};\n\n/**\n * Default middleware for rendering of page widgets.\n * It will not render anything if there already is an output assigned by previous middleware.\n */\nconst defaultWidgetRenderMiddleware = (params: Object, next: Function) => {\n    if (params.output) {\n        return next();\n    }\n    params.output = defaultWidgetRender(params);\n    next();\n};\n\n/**\n * Page renderer factory\n * @param config\n * @returns {Function}\n */\nexport const createRenderer = (config) => {\n    const widgetRender = config.widget || [];\n    const widgetRenderMiddleware = compose([...widgetRender, defaultWidgetRenderMiddleware]);\n\n    return async data => {\n        const content = [];\n        for (let i = 0; i < data.content.length; i++) {\n            const widgetParams = {\n                page: data,\n                widget: data.content[i],\n                output: null,\n                defaultWidgetRender\n            };\n            await widgetRenderMiddleware(widgetParams);\n            const { output } = widgetParams;\n            // $FlowIgnore\n            content.push(React.cloneElement(output, { key: data.content[i].id }));\n        }\n        return <Page page={data}>{content}</Page>;\n    };\n};"]}