{"version":3,"sources":["../../src/render/routerMiddleware.js"],"names":["config","handle","route","path","renderPage","params","next","finish","match","api","loadPage","url","then","data","output","catch","revision","loadPageRevision"],"mappings":";;;;;;;;;;;;;;AACA;;;;AACA;;;;kBAOe,YAAsC;AAAA,QAArCA,MAAqC,uEAAP,EAAO;;AACjD;AACA,QAAMC,SAASD,OAAOC,MAAP,IAAkB;AAAA,YAAGC,KAAH,QAAGA,KAAH;AAAA,eAAeA,MAAMC,IAAN,KAAe,GAA9B;AAAA,KAAjC;;AAEA;AACA,QAAMC,aAAa,kCAAeJ,MAAf,CAAnB;;AAEA;AACA;AAAA,6FAAO,kBAAOK,MAAP,EAAuBC,IAAvB,EAAuCC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACKC,iCADL,GACeH,MADf,CACKG,KADL;;AAAA,iCAGCP,OAAOI,MAAP,CAHD;AAAA;AAAA;AAAA;;AAAA,8DAIQI,cACFC,QADE,CACOF,MAAMG,GADb,EAEFC,IAFE;AAAA,qHAEG,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DACoBT,WAAWS,IAAX,CADpB;;AAAA;AACFR,2DAAOS,MADL;;AAEFP,2DAAOF,MAAP;;AAFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAFH;;AAAA;AAAA;AAAA;AAAA,iCAMFU,KANE,CAMI,YAAM;AACTT;AACH,6BARE,CAJR;;AAAA;AAAA,iCAeCE,MAAMH,MAAN,CAAaW,QAfd;AAAA;AAAA;AAAA;;AAAA,8DAgBQP,cAAIQ,gBAAJ,CAAqBT,MAAMH,MAAN,CAAaW,QAAlC,EAA4CJ,IAA5C;AAAA,qHAAiD,kBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAC9BT,WAAWS,IAAX,CAD8B;;AAAA;AACpDR,2DAAOS,MAD6C;;AAEpDP,2DAAOF,MAAP;;AAFoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAjD;;AAAA;AAAA;AAAA;AAAA,gCAhBR;;AAAA;;AAsBHC;;AAtBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA;AAwBH,C","file":"routerMiddleware.js","sourcesContent":["// @flow\nimport api from \"./api\";\nimport { createRenderer } from \"./pageRenderer\";\n\ndeclare type CmsMiddlewareConfig = {\n    widget?: Array<(params: Object, next: Function, finish: Function) => void>,\n    handle?: (params: Object) => boolean\n};\n\nexport default (config: CmsMiddlewareConfig = {}) => {\n    // Define handle function to check if this middleware needs to process the matched route\n    const handle = config.handle || (({ route }) => route.path === \"*\");\n\n    // Create page renderer\n    const renderPage = createRenderer(config);\n\n    // CMS middleware\n    return async (params: Object, next: Function, finish: Function) => {\n        const { match } = params;\n\n        if (handle(params)) {\n            return api\n                .loadPage(match.url)\n                .then(async data => {\n                    params.output = await renderPage(data);\n                    finish(params);\n                })\n                .catch(() => {\n                    next();\n                });\n        }\n\n        if (match.params.revision) {\n            return api.loadPageRevision(match.params.revision).then(async data => {\n                params.output = await renderPage(data);\n                finish(params);\n            });\n        }\n\n        next();\n    };\n};\n"]}