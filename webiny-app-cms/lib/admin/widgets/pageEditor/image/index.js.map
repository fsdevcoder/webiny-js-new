{"version":3,"sources":["../../../../../src/admin/widgets/pageEditor/image/index.js"],"names":["ImageWidget","widget","data","image","deleteImage","id","WidgetContainer","handleImage","bind","WidgetSettingsContainer","app","graphql","generateDelete","variables","props","value","onChange","fields","flow","next","finish","oldValue","then","update","generateUpdate","create","generateCreate","EditorWidget"],"mappings":"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","file":"index.js","sourcesContent":["import React from \"react\";\nimport compose from \"webiny-compose\";\nimport _ from \"lodash\";\nimport { app } from \"webiny-app\";\nimport { EditorWidget } from \"webiny-app-cms\";\n\nimport ImageWidgetCmp from \"./Widget\";\nimport ImageWidgetSettingsCmp from \"./Settings\";\n\nclass ImageWidget extends EditorWidget {\n    removeWidget({ widget }) {\n        if (widget.data.image) {\n            return this.deleteImage(widget.data.image.id);\n        }\n    }\n\n    renderWidget({ WidgetContainer }) {\n        return (\n            <WidgetContainer>\n                <ImageWidgetCmp handleImage={this.handleImage.bind(this)} />\n            </WidgetContainer>\n        );\n    }\n\n    renderSettings({ WidgetSettingsContainer }) {\n        return (\n            <WidgetSettingContainers>\n                <ImageWidgetSettingsCmp />\n            </WidgetSettingContainers>\n        );\n    }\n\n    /**\n     * @private\n     * @param id\n     * @returns {*}\n     */\n    deleteImage(id) {\n        const deleteImage = app.graphql.generateDelete(\"Image\");\n        return deleteImage({ variables: { id } });\n    }\n\n    /**\n     * @private\n     * @param props\n     * @param value\n     * @param onChange\n     */\n    handleImage(props, value, onChange) {\n        const fields = \"id src width height\";\n\n        const flow = [\n            // Delete if image is removed\n            ({ value, oldValue }, next, finish) => {\n                if (!value) {\n                    if (oldValue.id) {\n                        return this.deleteImage(oldValue.id).then(() => finish({ value: null }));\n                    }\n                }\n                next();\n            },\n            // Update if new image is selected\n            ({ value, oldValue }, next, finish) => {\n                if (value && oldValue) {\n                    const update = app.graphql.generateUpdate(\"Image\", fields);\n                    return update({ variables: { id: oldValue.id, data: value } }).then(\n                        ({ data }) => finish({ value: data })\n                    );\n                }\n                next();\n            },\n            // Insert new image\n            ({ value }, next, finish) => {\n                const create = app.graphql.generateCreate(\"Image\", fields);\n                create({ variables: { data: value } }).then(({ data }) => finish({ value: data }));\n            }\n        ];\n\n        compose(flow)({ value, oldValue: _.get(props.widget, \"data.image\") }).then(({ value }) =>\n            onChange(value)\n        );\n    }\n}\n\nexport default ImageWidget;\n"]}