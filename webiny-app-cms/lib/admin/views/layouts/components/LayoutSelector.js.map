{"version":3,"sources":["../../../../../src/admin/views/layouts/components/LayoutSelector.jsx"],"names":["LayoutSelector","services","state","showWidgets","selectWidget","bind","layoutWidgets","cms","getLayoutEditorWidgets","widget","setState","props","onSelect","position","modules","Button","Link","Icon","styles","layoutSelector","widgets","close","layoutRowList","map","w","i","layoutRowSelector","renderSelector","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AACA;;;;;;IAEMA,c;;;AACF,kCAA0B;AAAA,YAAZC,QAAY,QAAZA,QAAY;AAAA;;AAAA;;AAEtB,cAAKC,KAAL,GAAa;AACTC,yBAAa;AADJ,SAAb;;AAIA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,cAAKC,aAAL,GAAqBL,SAASM,GAAT,CAAaC,sBAAb,EAArB;AAPsB;AAQzB;;;;qCAEYC,M,EAAQ;AAAA;;AACjB,iBAAKC,QAAL,CAAc,EAAEP,aAAa,KAAf,EAAd,EAAsC,YAAM;AACxC,uBAAKQ,KAAL,CAAWC,QAAX,CACI,oBAAOH,MAAP,EAAe,CAAC,MAAD,EAAS,MAAT,EAAiB,UAAjB,CAAf,CADJ,EAEI,OAAKE,KAAL,CAAWE,QAFf;AAIH,aALD;AAMH;;;iCAEQ;AAAA;;AAAA,iCAGD,KAAKF,KAHJ,CAEDG,OAFC;AAAA,gBAEUC,MAFV,kBAEUA,MAFV;AAAA,gBAEkBC,IAFlB,kBAEkBA,IAFlB;AAAA,gBAEwBC,IAFxB,kBAEwBA,IAFxB;;;AAKL,mBACI;AAAA;AAAA,kBAAK,WAAWC,yBAAOC,cAAvB;AACK,iBAAC,KAAKjB,KAAL,CAAWC,WAAZ,IACG;AAAC,0BAAD;AAAA;AACI,8BAAM,aADV;AAEI,iCAAS;AAAA,mCAAM,OAAKO,QAAL,CAAc,EAAEP,aAAa,IAAf,EAAd,CAAN;AAAA;AAFb;AAAA;AAAA,iBAFR;AASK,qBAAKD,KAAL,CAAWC,WAAX,IACG;AAAA;AAAA,sBAAK,WAAWe,yBAAOE,OAAvB;AACI;AAAA;AAAA;AAAA;AAAA,qBADJ;AAEI;AAAA;AAAA;AAAA;AAAA,qBAFJ;AAGI,2DAAK,WAAU,OAAf,GAHJ;AAII;AAAC,4BAAD;AAAA;AACI,uCAAWF,yBAAOG,KADtB;AAEI,qCAAS;AAAA,uCAAM,OAAKX,QAAL,CAAc,EAAEP,aAAa,KAAf,EAAd,CAAN;AAAA;AAFb;AAAA;AAIW,sDAAC,IAAD,IAAM,MAAM,OAAZ;AAJX,qBAJJ;AAUI;AAAA;AAAA,0BAAI,WAAWe,yBAAOI,aAAtB;AACK,6BAAKhB,aAAL,CAAmBiB,GAAnB,CAAuB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC9B,mCACI;AAAA;AAAA;AACI,yCAAKA,CADT;AAEI,6CAAS;AAAA,+CAAM,OAAKrB,YAAL,CAAkBoB,CAAlB,CAAN;AAAA,qCAFb;AAGI,+CAAWN,yBAAOQ;AAHtB;AAKKF,kCAAEf,MAAF,CAASkB,cAAT;AALL,6BADJ;AASH,yBAVA;AADL;AAVJ;AAVR,aADJ;AAsCH;;;EA/DwBC,gBAAMC,S;;kBAkEpB,gCAAgB7B,cAAhB,EAAgC;AAC3CC,cAAU,CAAC,KAAD,CADiC;AAE3Ca,aAAS,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB;AAFkC,CAAhC,C","file":"LayoutSelector.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { createComponent } from \"webiny-app\";\nimport styles from \"./styles/LayoutSelector.scss?prefix=Webiny_CMS_Row_Selector\";\n\nclass LayoutSelector extends React.Component {\n    constructor({ services }) {\n        super();\n        this.state = {\n            showWidgets: false\n        };\n\n        this.selectWidget = this.selectWidget.bind(this);\n        this.layoutWidgets = services.cms.getLayoutEditorWidgets();\n    }\n\n    selectWidget(widget) {\n        this.setState({ showWidgets: false }, () => {\n            this.props.onSelect(\n                _.pick(widget, [\"type\", \"data\", \"settings\"]),\n                this.props.position\n            );\n        });\n    }\n\n    render() {\n        const {\n            modules: { Button, Link, Icon }\n        } = this.props;\n\n        return (\n            <div className={styles.layoutSelector}>\n                {!this.state.showWidgets && (\n                    <Button\n                        icon={\"plus-circle\"}\n                        onClick={() => this.setState({ showWidgets: true })}\n                    >\n                        Insert row\n                    </Button>\n                )}\n                {this.state.showWidgets && (\n                    <div className={styles.widgets}>\n                        <h2>CHOOSE ROW LAYOUT.</h2>\n                        <h3>Don't worry, you can edit layout type anytime you want.</h3>\n                        <div className=\"clear\" />\n                        <Link\n                            className={styles.close}\n                            onClick={() => this.setState({ showWidgets: false })}\n                        >\n                            Cancel <Icon icon={\"times\"} />\n                        </Link>\n                        <ul className={styles.layoutRowList}>\n                            {this.layoutWidgets.map((w, i) => {\n                                return (\n                                    <li\n                                        key={i}\n                                        onClick={() => this.selectWidget(w)}\n                                        className={styles.layoutRowSelector}\n                                    >\n                                        {w.widget.renderSelector()}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default createComponent(LayoutSelector, {\n    services: [\"cms\"],\n    modules: [\"Button\", \"Link\", \"Icon\"]\n});\n"]}