{"version":3,"sources":["../../../../src/admin/views/pages/PageManager.jsx"],"names":["t","i18n","namespace","PageManager","state","page","category","props","modules","Modal","ViewSwitcher","View","Link","Icon","Grid","Scrollbar","list","hasMore","setSearchQuery","setFilter","filter","search","loadMore","moveToTrash","updatePage","removePageFromList","id","createModal","show","ref","viewSwitcher","actions","styles","noPadding","query","listLayout","sidebar","sidebarHeader","cat","height","setState","status","then","pinned","showView","data","title","React","Component"],"mappings":"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","file":"PageManager.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport _ from \"lodash\";\nimport { createComponent, i18n } from \"webiny-app\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nimport { PageDetailsProvider } from \"./context/PageDetailsContext\";\nimport PageFilter from \"./components/PageFilter\";\nimport PageListControls from \"./components/PageListControls\";\nimport PageList from \"./components/PageList\";\nimport PageDetails from \"./components/PageDetails\";\nimport CreatePageDialog from \"./components/CreatePageDialog\";\n\nimport styles from \"./PageManager.scss?prefix=Webiny_CMS_PageManager\";\n\nconst t = i18n.namespace(\"Cms.Admin.Views.PageManager\");\n\nclass PageManager extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            page: null,\n            category: null\n        };\n    }\n\n    render() {\n        const { Modal, ViewSwitcher, View, Link, Icon, Grid, Scrollbar } = this.props.modules;\n        const {\n            list,\n            hasMore,\n            setSearchQuery,\n            setFilter,\n            filter,\n            search,\n            loadMore,\n            moveToTrash,\n            updatePage,\n            removePageFromList\n        } = this.props;\n\n        const page = _.find(list, { id: this.state.page });\n\n        return (\n            <View.List>\n                <View.Header\n                    title={t`CMS / Pages`}\n                    description={t`Your list of pages. Click the button on the right to create a new page.`}\n                >\n                    <Link type=\"primary\" align=\"right\" onClick={() => this.createModal.show()}>\n                        <Icon icon={[\"fa\", \"plus-circle\"]} /> {t`Create new page`}\n                    </Link>\n                    <CreatePageDialog onReady={ref => (this.createModal = ref)} />\n                </View.Header>\n                <View.Body noPadding noColor>\n                    <ViewSwitcher onReady={actions => (this.viewSwitcher = actions)}>\n                        <ViewSwitcher.View name={\"manager\"} defaultView>\n                            {() => (\n                                <Fragment>\n                                    <Grid.Row>\n                                        <Grid.Col all={12} className={styles.noPadding}>\n                                            <PageFilter\n                                                filter={filter}\n                                                query={search.query}\n                                                setSearchQuery={setSearchQuery}\n                                                setFilter={setFilter}\n                                            />\n                                        </Grid.Col>\n                                    </Grid.Row>\n                                    <Grid.Row className={styles.listLayout}>\n                                        <Grid.Col all={4} className={styles.sidebar}>\n                                            <div className={styles.sidebarHeader}>\n                                                <PageListControls\n                                                    category={filter.category}\n                                                    onCategory={cat => setFilter({ category: cat })}\n                                                />\n                                            </div>\n\n                                            <Scrollbar style={{ height: 800 }}>\n                                                <InfiniteScroll\n                                                    initialLoad={false}\n                                                    loadMore={loadMore}\n                                                    hasMore={hasMore}\n                                                    useWindow={false}\n                                                    threshold={100}\n                                                >\n                                                    <PageList\n                                                        pages={list}\n                                                        onPageClick={({ id }) =>\n                                                            this.setState({ page: id })\n                                                        }\n                                                    />\n                                                </InfiniteScroll>\n                                            </Scrollbar>\n                                        </Grid.Col>\n                                        <Grid.Col all={8} className={styles.noPadding}>\n                                            <PageDetailsProvider value={{ page }}>\n                                                <PageDetails\n                                                    togglePublished={() =>\n                                                        updatePage(page.id, {\n                                                            status:\n                                                                page.status === \"draft\"\n                                                                    ? \"published\"\n                                                                    : \"draft\"\n                                                        }).then(() => {\n                                                            removePageFromList(page.id);\n                                                            this.setState({ page: null });\n                                                        })\n                                                    }\n                                                    togglePinned={() =>\n                                                        updatePage(page.id, {\n                                                            pinned: !page.pinned\n                                                        }).then(() => {\n                                                            removePageFromList(page.id);\n                                                            this.setState({ page: null });\n                                                        })\n                                                    }\n                                                    moveToDrafts={() =>\n                                                        updatePage(page.id, {\n                                                            status: \"draft\"\n                                                        }).then(() => {\n                                                            removePageFromList(page.id);\n                                                            this.setState({ page: null });\n                                                        })\n                                                    }\n                                                    moveToTrash={() =>\n                                                        this.viewSwitcher.showView(\"moveToTrash\")(\n                                                            page\n                                                        )\n                                                    }\n                                                    page={page}\n                                                />\n                                            </PageDetailsProvider>\n                                        </Grid.Col>\n                                    </Grid.Row>\n                                </Fragment>\n                            )}\n                        </ViewSwitcher.View>\n                        {/*<ViewSwitcher.View name={\"unpublishPage\"} modal>\n                            {({ data }) => (\n                                <Modal.Confirmation\n                                    name={\"unpublishConfirmation\"}\n                                    confirm={\"Yes, unpublish this page!\"}\n                                    cancel={\"I changed my mind\"}\n                                    message={\n                                        <span>\n                                            Are you sure you want to unpublish the page <br />\n                                            <strong>{data.title}</strong>?\n                                        </span>\n                                    }\n                                    onConfirm={() => toggleStatus(data.id)}\n                                    onComplete={() => reloadPage(data.id)}\n                                />\n                            )}\n                        </ViewSwitcher.View>*/}\n                        <ViewSwitcher.View name={\"moveToTrash\"} modal>\n                            {({ data }) => {\n                                return (\n                                    <Modal.Confirmation\n                                        name={\"moveToTrashConfirmation\"}\n                                        confirm={\"Yes, move this page to trash!\"}\n                                        cancel={\"Not now\"}\n                                        message={\n                                            <span>\n                                                Are you sure you want to move the page<br />\n                                                <strong>{data.title}</strong>\n                                                <br /> and all of its revisions to trash?\n                                            </span>\n                                        }\n                                        onConfirm={() => moveToTrash(data.id)}\n                                        onComplete={() => {\n                                            removePageFromList(data.id);\n                                            this.setState({ page: null });\n                                        }}\n                                    />\n                                );\n                            }}\n                        </ViewSwitcher.View>\n                    </ViewSwitcher>\n                </View.Body>\n            </View.List>\n        );\n    }\n}\n\nexport default createComponent(PageManager, {\n    modules: [\n        \"View\",\n        \"ViewSwitcher\",\n        \"Link\",\n        \"Icon\",\n        \"Input\",\n        \"Grid\",\n        \"Modal\",\n        \"Button\",\n        \"Scrollbar\"\n    ]\n});\n"]}