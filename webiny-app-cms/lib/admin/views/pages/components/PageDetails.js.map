{"version":3,"sources":["../../../../../src/admin/views/pages/components/PageDetails.jsx"],"names":["t","i18n","namespace","PageDetails","state","revisions","revision","prepare","bind","props","page","setState","active","map","value","data","id","label","name","moveToTrash","moveToDrafts","togglePinned","togglePublished","modules","Tabs","Select","Icon","Link","Dropdown","styles","emptyPlaceholder","emptyContent","blankState","actions","status","pinned","preview","previewDetails","created","createdOn","category","title","createdBy","firstName","lastName","previewRevision","content","React","Component"],"mappings":"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","file":"PageDetails.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport _ from \"lodash\";\nimport { i18n, createComponent } from \"webiny-app\";\nimport PageContentPreview from \"./PageContentPreview\";\nimport PageRevisions from \"./PageRevisions\";\nimport styles from \"./PageDetails.scss\";\nimport blankState from \"./assets/blank-state-preview.svg\";\n\nconst t = i18n.namespace(\"Cms.Admin.Views.PageDetails\");\n\nclass PageDetails extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            revisions: [],\n            revision: null\n        };\n\n        this.prepare = this.prepare.bind(this);\n    }\n\n    componentWillMount() {\n        this.prepare(this.props);\n    }\n\n    componentWillReceiveProps(props) {\n        if (_.get(props.page, \"id\") !== _.get(this.props, \"page.id\")) {\n            this.prepare(props);\n        }\n    }\n\n    prepare(props) {\n        props.page &&\n            this.setState(() => {\n                const revision = _.find(props.page.revisions, { active: true });\n\n                return {\n                    revision: { ...revision },\n                    revisions: props.page.revisions.map(data => ({\n                        value: data.id,\n                        label: data.name,\n                        data\n                    }))\n                };\n            });\n    }\n\n    render() {\n        const {\n            page,\n            moveToTrash,\n            moveToDrafts,\n            togglePinned,\n            togglePublished,\n            modules: { Tabs, Select, Icon, Link, Dropdown }\n        } = this.props;\n\n        if (!page) {\n            return (\n                <div className={styles.emptyPlaceholder}>\n                    <div className={styles.emptyContent}>\n                        <img src={blankState} alt=\"\" />\n                        <h3>So, this is a preview pane.</h3>\n                        <p>\n                            Lets make it do itâ€™s job.<br />Just click on the article on the left and\n                            see your article and revisions.\n                        </p>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <Fragment>\n                <div className={styles.actions}>\n                    <Link route={\"Cms.Page.Editor\"} params={{ id: this.state.revision.id }}>\n                        <Icon icon={\"edit\"} />\n                    </Link>\n                    <Link onClick={page.status !== \"trash\" ? moveToTrash : moveToDrafts}>\n                        <Icon icon={page.status !== \"trash\" ? \"trash-alt\" : \"undo\"} />\n                    </Link>\n                    {page.status !== \"trash\" && (\n                        <Link onClick={togglePublished}>\n                            <Icon icon={page.status === \"published\" ? \"eye-slash\" : \"eye\"} />\n                        </Link>\n                    )}\n                    {page.status !== \"trash\" && (\n                        <Link onClick={togglePinned} className={page.pinned ? styles.pinned : null}>\n                            <Icon icon={\"thumbtack\"} />\n                        </Link>\n                    )}\n                </div>\n                <Tabs size=\"large\">\n                    <Tabs.Tab label=\"Preview page\">\n                        <div className={styles.preview}>\n                            <div className={styles.previewDetails}>\n                                <div>\n                                    Date created:{\" \"}\n                                    {t`{created|dateTime}`({\n                                        created: page.createdOn\n                                    })}\n                                </div>\n                                <div>Category: {page.category.title}</div>\n                                <div>\n                                    By: {page.createdBy.firstName} {page.createdBy.lastName}\n                                </div>\n                                <div>Status: {page.status}</div>\n                            </div>\n                            <div className={styles.previewRevision}>\n                                {this.state.revision && (\n                                    <Select\n                                        useDataAsValue\n                                        value={this.state.revision.id}\n                                        onChange={revision => {\n                                            revision && this.setState({ revision });\n                                        }}\n                                        options={_.cloneDeep(this.state.revisions)}\n                                    />\n                                )}\n                            </div>\n                            {this.state.revision && (\n                                <PageContentPreview\n                                    content={this.state.revision.content}\n                                    styles={styles}\n                                />\n                            )}\n                        </div>\n                    </Tabs.Tab>\n                    <Tabs.Tab label=\"Revisions\">\n                        <PageRevisions revisions={page.revisions} modules={{ Icon, Dropdown }} />\n                    </Tabs.Tab>\n                </Tabs>\n            </Fragment>\n        );\n    }\n}\n\nexport default createComponent(PageDetails, {\n    modules: [\"Tabs\", \"Select\", \"Icon\", \"Link\", \"Dropdown\"]\n});\n"]}