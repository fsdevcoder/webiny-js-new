{"version":3,"sources":["../../../../../src/admin/views/pages/components/CreatePageDialog.jsx"],"names":["CreatePageDialog","form","model","title","setState","slug","remove","lower","props","modules","Modal","Button","Form","FormData","FormError","OptionsData","Select","Input","Loader","Icon","Link","hide","app","router","goToRoute","id","activeRevision","onSubmit","loading","error","category","url","Bind","options","option","data","generateSlug","submit","React","Component","ModalComponent"],"mappings":"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","file":"CreatePageDialog.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { app, createComponent } from \"webiny-app\";\nimport { ModalComponent } from \"webiny-app-ui\";\nimport slugify from \"slugify\";\n\nclass CreatePageDialog extends React.Component {\n    generateSlug({ form, model }) {\n        if (!model.title) {\n            return;\n        }\n\n        form.setState(({ model }) => {\n            return {\n                model: {\n                    ...model,\n                    slug: slugify(model.title, {\n                        remove: /[$#*_+~.()'\"!\\-:@]/g,\n                        lower: true\n                    })\n                }\n            };\n        });\n    }\n\n    render() {\n        const {\n            modules: {\n                Modal,\n                Button,\n                Form,\n                FormData,\n                FormError,\n                OptionsData,\n                Select,\n                Input,\n                Loader,\n                Icon,\n                Link\n            },\n            hide\n        } = this.props;\n        return (\n            <Modal.Dialog>\n                <FormData\n                    entity={\"CmsPage\"}\n                    fields={\"activeRevision { id }\"}\n                    onSubmitSuccess={({ model }) =>\n                        app.router.goToRoute(\"Cms.Page.Editor\", { id: model.activeRevision.id })\n                    }\n                >\n                    {({ onSubmit, loading, error }) => (\n                        <Form\n                            onSubmit={model => {\n                                model.slug = model.category.url + model.slug;\n                                onSubmit(model);\n                            }}\n                        >\n                            {({ model, form, Bind }) => (\n                                <Modal.Content>\n                                    {loading && <Loader />}\n                                    <Modal.Header title=\"Create page\" onClose={hide} />\n                                    <Modal.Body>\n                                        {error && <FormError error={error} />}\n                                        <OptionsData\n                                            entity={\"CmsCategory\"}\n                                            fields={\"id title slug url\"}\n                                            labelField={\"title\"}\n                                            perPage={100}\n                                        >\n                                            {({ options }) => (\n                                                <Bind>\n                                                    <Select\n                                                        useDataAsValue\n                                                        name={\"category\"}\n                                                        options={options}\n                                                        placeholder={\"Select a page category\"}\n                                                        label={\"Page category\"}\n                                                        renderOption={({ option }) => (\n                                                            <div>\n                                                                <strong>{option.data.title}</strong>\n                                                                <br />\n                                                                <span>\n                                                                    URL:{\" \"}\n                                                                    <strong>\n                                                                        {option.data.url}\n                                                                    </strong>\n                                                                </span>\n                                                            </div>\n                                                        )}\n                                                    />\n                                                </Bind>\n                                            )}\n                                        </OptionsData>\n                                        {model.category && (\n                                            <Bind>\n                                                <Input\n                                                    label={\"Page title\"}\n                                                    validators={\"required\"}\n                                                    placeholder={\"Enter a page title\"}\n                                                    name={\"title\"}\n                                                    onBlur={() => {\n                                                        if (_.isEmpty(model.slug)) {\n                                                            this.generateSlug({ form, model });\n                                                        }\n                                                    }}\n                                                />\n                                            </Bind>\n                                        )}\n\n                                        {model.category && (\n                                            <Bind>\n                                                <Input\n                                                    label={\"Page slug\"}\n                                                    placeholder={\"Enter a page slug\"}\n                                                    name={\"slug\"}\n                                                    addonLeft={model.category && model.category.url}\n                                                    addonRight={\n                                                        <Link\n                                                            onClick={() =>\n                                                                this.generateSlug({ form, model })\n                                                            }\n                                                        >\n                                                            <Icon icon={\"sync-alt\"} />\n                                                        </Link>\n                                                    }\n                                                />\n                                            </Bind>\n                                        )}\n                                    </Modal.Body>\n                                    <Modal.Footer align=\"right\">\n                                        <Button\n                                            type=\"default\"\n                                            label=\"Cancel\"\n                                            onClick={this.props.hide}\n                                        />\n                                        <Button\n                                            type=\"primary\"\n                                            disabled={!model.category}\n                                            label=\"Create page\"\n                                            onClick={form.submit}\n                                        />\n                                    </Modal.Footer>\n                                </Modal.Content>\n                            )}\n                        </Form>\n                    )}\n                </FormData>\n            </Modal.Dialog>\n        );\n    }\n}\n\nexport default createComponent([CreatePageDialog, ModalComponent], {\n    modules: [\n        \"Modal\",\n        \"Button\",\n        \"Form\",\n        \"FormData\",\n        \"FormError\",\n        \"OptionsData\",\n        \"Select\",\n        \"Input\",\n        \"Loader\",\n        \"Icon\",\n        \"Link\"\n    ]\n});\n"]}