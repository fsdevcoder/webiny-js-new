{"version":3,"sources":["../../../../../../src/admin/views/pages/components/editor/ApplyWidgetChanges.jsx"],"names":["ApplyWidgetChanges","services","state","showApplyChanges","cms","onChange","bind","applyChanges","widget","origin","props","__dirty","setState","data","settings","updateGlobalWidget","then","children","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;IAEMA,kB;;;AACF,sCAA0B;AAAA,YAAZC,QAAY,QAAZA,QAAY;AAAA;;AAAA;;AAEtB,cAAKC,KAAL,GAAa;AACTC,8BAAkB;AADT,SAAb;;AAIA,cAAKC,GAAL,GAAWH,SAASG,GAApB;;AAEA,cAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AATsB;AAUzB;;;;yDAEqC;AAAA,gBAAVE,MAAU,SAAVA,MAAU;;AAClC,gBAAIA,OAAOC,MAAP,KAAkB,KAAKC,KAAL,CAAWF,MAAX,CAAkBC,MAApC,IAA8C,CAACD,OAAOG,OAA1D,EAAmE;AAC/D,qBAAKC,QAAL,CAAc,EAAET,kBAAkB,KAApB,EAAd;AACH;AACJ;;;uCAEc;AAAA;;AAAA,gCACgB,KAAKO,KAAL,CAAWF,MAD3B;AAAA,gBACHK,IADG,iBACHA,IADG;AAAA,gBACGC,QADH,iBACGA,QADH;;AAEX,iBAAKV,GAAL,CAASW,kBAAT,CAA4B,KAAKL,KAAL,CAAWF,MAAX,CAAkBC,MAA9C,EAAsD,EAAEI,UAAF,EAAQC,kBAAR,EAAtD,EAA0EE,IAA1E,CAA+E,YAAM;AACjF,uBAAKN,KAAL,CAAWL,QAAX,CAAoB,EAAEQ,MAAM,IAAR,EAAcC,UAAU,IAAxB,EAA8BH,SAAS,KAAvC,EAApB;AACH,aAFD;AAGH;;;iCAEQ;AACL,mBAAO,KAAKD,KAAL,CAAWO,QAAX,CAAoB;AACvBT,wBAAQ,KAAKE,KAAL,CAAWF,MADI;AAEvBH,0BAAU,KAAKA,QAFQ;AAGvBE,8BAAc,KAAKL,KAAL,CAAWC,gBAAX,GAA8B,KAAKI,YAAnC,GAAkD;AAHzC,aAApB,CAAP;AAKH;;;EAhC4B,gBAAMW,S;;kBAmCxB,gCAAgBlB,kBAAhB,EAAoC,EAAEC,UAAU,CAAC,KAAD,CAAZ,EAApC,C","file":"ApplyWidgetChanges.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { createComponent } from \"webiny-app\";\n\nclass ApplyWidgetChanges extends React.Component {\n    constructor({ services }) {\n        super();\n        this.state = {\n            showApplyChanges: false\n        };\n\n        this.cms = services.cms;\n\n        this.onChange = this.onChange.bind(this);\n        this.applyChanges = this.applyChanges.bind(this);\n    }\n\n    componentWillReceiveProps({ widget }) {\n        if (widget.origin !== this.props.widget.origin || !widget.__dirty) {\n            this.setState({ showApplyChanges: false });\n        }\n    }\n\n    applyChanges() {\n        const { data, settings } = this.props.widget;\n        this.cms.updateGlobalWidget(this.props.widget.origin, { data, settings }).then(() => {\n            this.props.onChange({ data: null, settings: null, __dirty: false });\n        });\n    }\n\n    render() {\n        return this.props.children({\n            widget: this.props.widget,\n            onChange: this.onChange,\n            applyChanges: this.state.showApplyChanges ? this.applyChanges : null\n        });\n    }\n}\n\nexport default createComponent(ApplyWidgetChanges, { services: [\"cms\"] });\n"]}