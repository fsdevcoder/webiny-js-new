{"version":3,"sources":["../../../../../../src/admin/views/pages/components/editor/PageContent.jsx"],"names":["PageContent","props","state","cms","services","addWidget","bind","removeWidget","beforeRemoveWidget","swapWidgets","toggleScope","makeWidgetLocal","makeWidgetGlobal","widget","value","onChange","push","data","id","shortid","generate","editorWidget","getEditorWidget","type","origin","Promise","resolve","widgets","splice","a","b","count","length","setState","makeLocalDialog","show","makeGlobalDialog","global","localWidget","local","deleteGlobalWidget","update","settings","__dirty","newWidget","undefined","index","Alert","modules","functions","moveUp","viewSwitcher","showView","beforeRemove","onRemoved","moveDown","wd","onWidgetChange","Button","Grid","Tabs","ViewSwitcher","Modal","addContent","textAlign","pluginsModal","dialog","actions","marginTop","styles","editorContent","map","renderWidget","padding","border","JSON","stringify","form","model","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEMA,W;;;AACF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAEf,cAAKC,KAAL,GAAa,EAAb;AACA,cAAKC,GAAL,GAAWF,MAAMG,QAAN,CAAeD,GAA1B;AACA,cAAKE,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,OAAjB;AACA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,cAAKE,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBF,IAAxB,OAA1B;AACA,cAAKG,WAAL,GAAmB,MAAKA,WAAL,CAAiBH,IAAjB,OAAnB;AACA,cAAKI,WAAL,GAAmB,MAAKA,WAAL,CAAiBJ,IAAjB,OAAnB;AACA,cAAKK,eAAL,GAAuB,MAAKA,eAAL,CAAqBL,IAArB,OAAvB;AACA,cAAKM,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBN,IAAtB,OAAxB;AAVe;AAWlB;;;;kCAESO,M,EAAQ;AAAA,yBACY,KAAKZ,KADjB;AAAA,gBACRa,KADQ,UACRA,KADQ;AAAA,gBACDC,QADC,UACDA,QADC;;AAEd,gBAAI,CAACD,KAAL,EAAY;AACRA,wBAAQ,EAAR;AACH;;AAEDA,kBAAME,IAAN,CAAW,qBAAQ,EAAEC,MAAM,EAAR,EAAR,EAAsBJ,MAAtB,EAA8B,EAAEK,IAAIC,kBAAQC,QAAR,EAAN,EAA9B,CAAX;;AAEAL,qBAASD,KAAT;AACH;;;iDAE8B;AAAA,gBAAVD,MAAU,QAAVA,MAAU;;AAC3B,gBAAMQ,eAAe,KAAKlB,GAAL,CAASmB,eAAT,CAAyBT,OAAOU,IAAhC,CAArB;AACA,gBAAI,OAAOF,aAAad,YAApB,KAAqC,UAArC,IAAmD,CAACM,OAAOW,MAA/D,EAAuE;AACnE,uBAAOH,aAAad,YAAb,CAA0BM,MAA1B,CAAP;AACH;AACD,mBAAOY,QAAQC,OAAR,EAAP;AACH;;;4CAEoB;AAAA,gBAANR,EAAM,SAANA,EAAM;;AACjB,gBAAMS,UAAU,yBAAY,KAAK1B,KAAL,CAAWa,KAAvB,CAAhB;AACAa,oBAAQC,MAAR,CAAe,yBAAYD,OAAZ,EAAqB,EAAET,MAAF,EAArB,CAAf,EAA6C,CAA7C;AACA,iBAAKjB,KAAL,CAAWc,QAAX,CAAoBY,OAApB;AACH;;;oCAEWE,C,EAAGC,C,EAAG;AACd,gBAAMC,QAAQ,KAAK9B,KAAL,CAAWa,KAAX,CAAiBkB,MAA/B;AACA,gBAAID,UAAU,CAAV,IAAeD,MAAMC,KAArB,IAA8BD,MAAM,CAAC,CAAzC,EAA4C;AACxC;AACH;;AAED,gBAAMH,UAAU,yBAAY,KAAK1B,KAAL,CAAWa,KAAvB,CAAhB;AACAa,oBAAQC,MAAR,CAAeE,CAAf,EAAkB,CAAlB,EAAqBH,QAAQC,MAAR,CAAeC,CAAf,EAAkB,CAAlB,EAAqBF,QAAQG,CAAR,CAArB,EAAiC,CAAjC,CAArB;AACA,iBAAK7B,KAAL,CAAWc,QAAX,CAAoBY,OAApB;AACH;;;oCAEWV,I,EAAM;AAAA;;AACd,iBAAKgB,QAAL,CAAc,EAAEvB,aAAaO,IAAf,EAAd,EAAqC,YAAM;AACvCA,qBAAKO,MAAL,GAAc,OAAKU,eAAL,CAAqBC,IAArB,EAAd,GAA4C,OAAKC,gBAAL,CAAsBD,IAAtB,EAA5C;AACH,aAFD;AAGH;;;wCAEeE,M,EAAQ;AACpB;AACA,gBAAMC,cAAc,oBAAOD,MAAP,EAAe,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAAuB,UAAvB,CAAf,CAApB;AACA,gBAAMV,UAAU,yBAAY,KAAK1B,KAAL,CAAWa,KAAvB,CAAhB;AACAa,oBAAQC,MAAR,CAAe,yBAAYD,OAAZ,EAAqB,EAAET,IAAImB,OAAOnB,EAAb,EAArB,CAAf,EAAwD,CAAxD,EAA2DoB,WAA3D;AACA,iBAAKrC,KAAL,CAAWc,QAAX,CAAoBY,OAApB;AACH;;;yCAEgBY,K,EAAOf,M,EAAQ;AAC5B,gBAAMG,UAAU,yBAAY,KAAK1B,KAAL,CAAWa,KAAvB,CAAhB;AACAa,oBAAQC,MAAR,CAAe,yBAAYD,OAAZ,EAAqB,EAAET,IAAIqB,MAAMrB,EAAZ,EAArB,CAAf,EAAuD,CAAvD,EAA0D,qBAAQ,EAAR,EAAYqB,KAAZ,EAAmB,EAAEf,cAAF,EAAnB,CAA1D;;AAEA;AACA,iBAAKvB,KAAL,CAAWc,QAAX,CAAoBY,OAApB;AACH;;;2CAEkBT,E,EAAI;AACnB,mBAAO,KAAKf,GAAL,CAASqC,kBAAT,CAA4BtB,EAA5B,CAAP;AACH;;;uCAEcL,M,EAAQ4B,M,EAAQ;AAAA,gBACnB3B,KADmB,GACT,KAAKb,KADI,CACnBa,KADmB;AAAA,gBAEnBG,IAFmB,GAESwB,MAFT,CAEnBxB,IAFmB;AAAA,gBAEbyB,QAFa,GAESD,MAFT,CAEbC,QAFa;AAAA,gBAEHC,OAFG,GAESF,MAFT,CAEHE,OAFG;;;AAI3B,gBAAMC,8BACC/B,MADD;AAEF8B;AAFE,cAAN;;AAKA,gBAAI1B,SAAS4B,SAAb,EAAwB;AACpBD,0BAAU,MAAV,IAAoB3B,IAApB;AACH;;AAED,gBAAIyB,aAAaG,SAAjB,EAA4B;AACxBD,0BAAU,UAAV,IAAwBF,QAAxB;AACH;;AAED5B,kBAAM,yBAAYA,KAAZ,EAAmB,EAAEI,IAAIL,OAAOK,EAAb,EAAnB,CAAN,IAA+C0B,SAA/C;;AAEA,iBAAK3C,KAAL,CAAWc,QAAX,CAAoBD,KAApB;AACH;;;qCAEYG,I,EAAM6B,K,EAAO;AAAA;;AAAA,gBACHC,KADG,GACS,KAAK9C,KADd,CACd+C,OADc,CACHD,KADG;;AAEtB,gBAAMlC,SAAS,yBAAYI,IAAZ,CAAf;;AAEA,gBAAMgC,YAAY;AACdC,wBAAQ;AAAA,2BAAM,OAAKzC,WAAL,CAAiBqC,KAAjB,EAAwBA,QAAQ,CAAhC,CAAN;AAAA,iBADM;AAEdpC,6BAAa;AAAA,2BAAM,OAAKyC,YAAL,CAAkBC,QAAlB,CAA2B,aAA3B,EAA0CvC,MAA1C,CAAN;AAAA,iBAFC;AAGdwC,8BAAc;AAAA,2BAAM,OAAK7C,kBAAL,CAAwB,EAAEK,cAAF,EAAxB,CAAN;AAAA,iBAHA;AAIdyC,2BAAW;AAAA,2BAAM,OAAK/C,YAAL,CAAkB,EAAEM,cAAF,EAAlB,CAAN;AAAA,iBAJG;AAKd0C,0BAAU;AAAA,2BAAM,OAAK9C,WAAL,CAAiBqC,KAAjB,EAAwBA,QAAQ,CAAhC,CAAN;AAAA;AALI,aAAlB;;AAQA,gBAAIjC,OAAOW,MAAX,EAAmB;AACf,oBAAMgC,KAAK,KAAKrD,GAAL,CAASmB,eAAT,CAAyBT,OAAOU,IAAhC,EAAsC,EAAEC,QAAQX,OAAOW,MAAjB,EAAtC,CAAX;AACA,oBAAI,CAACgC,EAAL,EAAS;AACL,2BACI;AAAC,6BAAD;AAAA,0BAAO,KAAK3C,OAAOK,EAAnB,EAAuB,MAAM,QAA7B;AAAA;AAC4B;AAAA;AAAA;AAASL,mCAAOU;AAAhB;AAD5B,qBADJ;AAKH;AACD,oBAAI,CAACV,OAAOI,IAAZ,EAAkB;AACdJ,2BAAOI,IAAP,GAAc,yBAAYuC,GAAGvC,IAAf,CAAd;AACH;;AAED,oBAAI,CAACJ,OAAO6B,QAAZ,EAAsB;AAClB7B,2BAAO6B,QAAP,GAAkB,yBAAYc,GAAGd,QAAf,CAAlB;AACH;AACJ;;AAED,mBACI,8BAAC,gBAAD;AACI,qBAAK7B,OAAOK,EADhB;AAEI,wBAAQL,MAFZ;AAGI,2BAAWoC,SAHf;AAII,0BAAU;AAAA,2BAAQ,OAAKQ,cAAL,CAAoB5C,MAApB,EAA4BI,IAA5B,CAAR;AAAA;AAJd,cADJ;AAQH;;;iCAEQ;AAAA;;AAAA,0BACmE,KAAKhB,KADxE;AAAA,0CACG+C,OADH;AAAA,gBACcU,MADd,mBACcA,MADd;AAAA,gBACsBC,IADtB,mBACsBA,IADtB;AAAA,gBAC4BC,IAD5B,mBAC4BA,IAD5B;AAAA,gBACkCC,YADlC,mBACkCA,YADlC;AAAA,gBACgDC,KADhD,mBACgDA,KADhD;AAAA,gBACyDhD,KADzD,WACyDA,KADzD;;;AAGL,gBAAMiD,aACF;AAAC,oBAAD,CAAM,GAAN;AAAA;AACI;AAAC,wBAAD,CAAM,GAAN;AAAA,sBAAU,KAAK,EAAf,EAAmB,OAAO,EAAEC,WAAW,QAAb,EAA1B;AACI;AAAC,8BAAD;AAAA;AACI,kCAAM,SADV;AAEI,kCAAM,CAAC,KAAD,EAAQ,aAAR,CAFV;AAGI,qCAAS;AAAA,uCAAM,OAAKC,YAAL,CAAkB9B,IAAlB,EAAN;AAAA;AAHb;AAAA;AAAA,qBADJ;AAQI,kDAAC,sBAAD;AACI,8BAAM,cADV;AAEI,8BAAM,IAFV;AAGI,kCAAU,KAAK9B,SAHnB;AAII,kCAAU;AAAA,mCACN,OAAK8C,YAAL,CAAkBC,QAAlB,CAA2B,oBAA3B,EAAiDvC,MAAjD,CADM;AAAA,yBAJd;AAOI,iCAAS;AAAA,mCAAW,OAAKoD,YAAL,GAAoBC,MAA/B;AAAA;AAPb;AARJ;AADJ,aADJ;;AAuBA,mBACI;AAAC,4BAAD;AAAA,kBAAc,SAAS;AAAA,+BAAY,OAAKf,YAAL,GAAoBgB,OAAhC;AAAA,qBAAvB;AACI;AAAC,gCAAD,CAAc,IAAd;AAAA,sBAAmB,MAAM,SAAzB,EAAoC,iBAApC;AACK;AAAA,+BACG;AAAC,2CAAD,CAAO,QAAP;AAAA;AACK,6BAACrD,MAAMkB,MAAP,IACG;AAAC,+CAAD,CAAO,QAAP;AAAA;AACI;AAAA;AAAA,sCAAG,OAAO,EAAEgC,WAAW,QAAb,EAAuBI,WAAW,EAAlC,EAAV;AAAA;AACuD;AADvD,iCADJ;AAIKL;AAJL,6BAFR;AAUKjD,kCAAMkB,MAAN,GAAe,CAAf,IACG;AAAC,+CAAD,CAAO,QAAP;AAAA;AACK+B,0CADL;AAEI;AAAC,wCAAD,CAAM,GAAN;AAAA;AACI;AAAC,4CAAD,CAAM,GAAN;AAAA,0CAAU,KAAK,CAAf;AACI;AAAA;AAAA,8CAAK,WAAWM,sBAAOC,aAAvB;AACKxD,qDAASA,MAAMyD,GAAN,CAAU,OAAKC,YAAL,CAAkBlE,IAAlB,CAAuB,MAAvB,CAAV;AADd;AADJ,qCADJ;AAMI;AAAC,4CAAD,CAAM,GAAN;AAAA,0CAAU,KAAK,CAAf;AACI;AAAA;AAAA;AACI,2DAAW+D,sBAAOC,aADtB;AAEI,uDAAO,EAAEG,SAAS,CAAX,EAAcC,QAAQ,CAAtB;AAFX;AAII;AAAC,oDAAD;AAAA;AACI;AAAC,wDAAD,CAAM,GAAN;AAAA,sDAAU,OAAO,SAAjB;AACK5D,6DACG,8BAAC,4BAAD;AACI,iEAAS,yBAAYA,KAAZ;AADb;AAFR,iDADJ;AAQI;AAAC,wDAAD,CAAM,GAAN;AAAA,sDAAU,OAAO,OAAjB;AACI;AAAA;AAAA;AACK6D,6DAAKC,SAAL,CACG,OAAK3E,KAAL,CAAW4E,IAAX,CAAgB3E,KAAhB,CAAsB4E,KADzB,EAEG,IAFH,EAGG,CAHH;AADL;AADJ;AARJ;AAJJ;AADJ;AANJ;AAFJ;AAXR,yBADH;AAAA;AADL,iBADJ;AAqDI;AAAC,gCAAD,CAAc,IAAd;AAAA,sBAAmB,MAAM,aAAzB,EAAwC,WAAxC;AACK,qCAAc;AAAA,4BAAX7D,IAAW,SAAXA,IAAW;;AACX,4BAAIA,KAAKO,MAAT,EAAiB;AACb,mCACI,8BAAC,KAAD,CAAO,YAAP;AACI,sCAAM,WADV;AAEI,yCAAS,oBAFb;AAGI,wCAAQ,SAHZ;AAII,yCACI;AAAA;AAAA;AAAA;AAC4C,6EAD5C;AAEI,6EAFJ;AAAA;AAAA,iCALR;AAYI,2CAAW;AAAA,2CAAM,OAAKb,eAAL,CAAqBM,IAArB,CAAN;AAAA;AAZf,8BADJ;AAgBH;;AAED,+BACI,8BAAC,0BAAD;AACI,kCAAM,YADV;AAEI,oCAAQA,IAFZ;AAGI,uCAAW;AAAA,uCAAU,OAAKL,gBAAL,CAAsBK,IAAtB,EAA4BJ,MAA5B,CAAV;AAAA;AAHf,0BADJ;AAOH;AA5BL,iBArDJ;AAmFI;AAAC,gCAAD,CAAc,IAAd;AAAA,sBAAmB,MAAM,oBAAzB,EAA+C,WAA/C;AACK,qCAAc;AAAA,4BAAXI,IAAW,SAAXA,IAAW;;AACX,+BACI,8BAAC,KAAD,CAAO,YAAP;AACI,kCAAM,oBADV;AAEI,qCAAS,wBAFb;AAGI,oCAAQ,mBAHZ;AAII,qCACI;AAAA;AAAA;AAAA;AAC4C,yEAD5C;AAEI,yEAFJ;AAAA;AAAA,6BALR;AAWI,uCAAW;AAAA,uCAAM,OAAKuB,kBAAL,CAAwBvB,KAAKO,MAA7B,CAAN;AAAA;AAXf,0BADJ;AAeH;AAjBL;AAnFJ,aADJ;AAyGH;;;EA7QqBuD,gBAAMC,S;;kBAgRjB,gCAAgBhF,WAAhB,EAA6B;AACxCgD,aAAS,CAAC,OAAD,EAAU,QAAV,EAAoB,MAApB,EAA4B,MAA5B,EAAoC,cAApC,EAAoD,OAApD,CAD+B;AAExC5C,cAAU,CAAC,KAAD;AAF8B,CAA7B,C","file":"PageContent.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { createComponent } from \"webiny-app\";\nimport shortid from \"shortid\";\nimport WidgetsModal from \"./WidgetsModal\";\nimport Widget from \"./Widget\";\nimport styles from \"./PageContent.scss\";\nimport MakeGlobalDialog from \"./MakeGlobalDialog\";\nimport PageContentPreview from \"./../PageContentPreview\";\n\nclass PageContent extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {};\n        this.cms = props.services.cms;\n        this.addWidget = this.addWidget.bind(this);\n        this.removeWidget = this.removeWidget.bind(this);\n        this.beforeRemoveWidget = this.beforeRemoveWidget.bind(this);\n        this.swapWidgets = this.swapWidgets.bind(this);\n        this.toggleScope = this.toggleScope.bind(this);\n        this.makeWidgetLocal = this.makeWidgetLocal.bind(this);\n        this.makeWidgetGlobal = this.makeWidgetGlobal.bind(this);\n    }\n\n    addWidget(widget) {\n        let { value, onChange } = this.props;\n        if (!value) {\n            value = [];\n        }\n\n        value.push(_.merge({ data: {} }, widget, { id: shortid.generate() }));\n\n        onChange(value);\n    }\n\n    beforeRemoveWidget({ widget }) {\n        const editorWidget = this.cms.getEditorWidget(widget.type);\n        if (typeof editorWidget.removeWidget === \"function\" && !widget.origin) {\n            return editorWidget.removeWidget(widget);\n        }\n        return Promise.resolve();\n    }\n\n    removeWidget({ id }) {\n        const widgets = _.cloneDeep(this.props.value);\n        widgets.splice(_.findIndex(widgets, { id }), 1);\n        this.props.onChange(widgets);\n    }\n\n    swapWidgets(a, b) {\n        const count = this.props.value.length;\n        if (count === 1 || b === count || b === -1) {\n            return;\n        }\n\n        const widgets = _.cloneDeep(this.props.value);\n        widgets.splice(b, 1, widgets.splice(a, 1, widgets[b])[0]);\n        this.props.onChange(widgets);\n    }\n\n    toggleScope(data) {\n        this.setState({ toggleScope: data }, () => {\n            data.origin ? this.makeLocalDialog.show() : this.makeGlobalDialog.show();\n        });\n    }\n\n    makeWidgetLocal(global) {\n        // Make widget global\n        const localWidget = _.pick(global, [\"id\", \"type\", \"data\", \"settings\"]);\n        const widgets = _.cloneDeep(this.props.value);\n        widgets.splice(_.findIndex(widgets, { id: global.id }), 1, localWidget);\n        this.props.onChange(widgets);\n    }\n\n    makeWidgetGlobal(local, origin) {\n        const widgets = _.cloneDeep(this.props.value);\n        widgets.splice(_.findIndex(widgets, { id: local.id }), 1, _.merge({}, local, { origin }));\n\n        // Propagate changes\n        this.props.onChange(widgets);\n    }\n\n    deleteGlobalWidget(id) {\n        return this.cms.deleteGlobalWidget(id);\n    }\n\n    onWidgetChange(widget, update) {\n        const { value } = this.props;\n        const { data, settings, __dirty } = update;\n\n        const newWidget = {\n            ...widget,\n            __dirty\n        };\n\n        if (data !== undefined) {\n            newWidget[\"data\"] = data;\n        }\n\n        if (settings !== undefined) {\n            newWidget[\"settings\"] = settings;\n        }\n\n        value[_.findIndex(value, { id: widget.id })] = newWidget;\n\n        this.props.onChange(value);\n    }\n\n    renderWidget(data, index) {\n        const { modules: { Alert } } = this.props;\n        const widget = _.cloneDeep(data);\n\n        const functions = {\n            moveUp: () => this.swapWidgets(index, index - 1),\n            toggleScope: () => this.viewSwitcher.showView(\"toggleScope\")(widget),\n            beforeRemove: () => this.beforeRemoveWidget({ widget }),\n            onRemoved: () => this.removeWidget({ widget }),\n            moveDown: () => this.swapWidgets(index, index + 1)\n        };\n\n        if (widget.origin) {\n            const wd = this.cms.getEditorWidget(widget.type, { origin: widget.origin });\n            if (!wd) {\n                return (\n                    <Alert key={widget.id} type={\"danger\"}>\n                        Missing widget for type <strong>{widget.type}</strong>\n                    </Alert>\n                );\n            }\n            if (!widget.data) {\n                widget.data = _.cloneDeep(wd.data);\n            }\n\n            if (!widget.settings) {\n                widget.settings = _.cloneDeep(wd.settings);\n            }\n        }\n\n        return (\n            <Widget\n                key={widget.id}\n                widget={widget}\n                functions={functions}\n                onChange={data => this.onWidgetChange(widget, data)}\n            />\n        );\n    }\n\n    render() {\n        const { modules: { Button, Grid, Tabs, ViewSwitcher, Modal }, value } = this.props;\n\n        const addContent = (\n            <Grid.Row>\n                <Grid.Col all={12} style={{ textAlign: \"center\" }}>\n                    <Button\n                        type={\"primary\"}\n                        icon={[\"fas\", \"plus-circle\"]}\n                        onClick={() => this.pluginsModal.show()}\n                    >\n                        Add content\n                    </Button>\n                    <WidgetsModal\n                        name={\"pluginsModal\"}\n                        wide={true}\n                        onSelect={this.addWidget}\n                        onDelete={widget =>\n                            this.viewSwitcher.showView(\"deleteGlobalWidget\")(widget)\n                        }\n                        onReady={dialog => (this.pluginsModal = dialog)}\n                    />\n                </Grid.Col>\n            </Grid.Row>\n        );\n\n        return (\n            <ViewSwitcher onReady={actions => (this.viewSwitcher = actions)}>\n                <ViewSwitcher.View name={\"content\"} defaultView>\n                    {() => (\n                        <React.Fragment>\n                            {!value.length && (\n                                <React.Fragment>\n                                    <p style={{ textAlign: \"center\", marginTop: 30 }}>\n                                        To begin editing your page click the big button :){\" \"}\n                                    </p>\n                                    {addContent}\n                                </React.Fragment>\n                            )}\n\n                            {value.length > 0 && (\n                                <React.Fragment>\n                                    {addContent}\n                                    <Grid.Row>\n                                        <Grid.Col all={6}>\n                                            <div className={styles.editorContent}>\n                                                {value && value.map(this.renderWidget.bind(this))}\n                                            </div>\n                                        </Grid.Col>\n                                        <Grid.Col all={6}>\n                                            <div\n                                                className={styles.editorContent}\n                                                style={{ padding: 0, border: 0 }}\n                                            >\n                                                <Tabs>\n                                                    <Tabs.Tab label={\"Preview\"}>\n                                                        {value && (\n                                                            <PageContentPreview\n                                                                content={_.cloneDeep(value)}\n                                                            />\n                                                        )}\n                                                    </Tabs.Tab>\n                                                    <Tabs.Tab label={\"Model\"}>\n                                                        <pre>\n                                                            {JSON.stringify(\n                                                                this.props.form.state.model,\n                                                                null,\n                                                                2\n                                                            )}\n                                                        </pre>\n                                                    </Tabs.Tab>\n                                                </Tabs>\n                                            </div>\n                                        </Grid.Col>\n                                    </Grid.Row>\n                                </React.Fragment>\n                            )}\n                        </React.Fragment>\n                    )}\n                </ViewSwitcher.View>\n                <ViewSwitcher.View name={\"toggleScope\"} modal>\n                    {({ data }) => {\n                        if (data.origin) {\n                            return (\n                                <Modal.Confirmation\n                                    name={\"makeLocal\"}\n                                    confirm={\"Ok, make it local!\"}\n                                    cancel={\"Not now\"}\n                                    message={\n                                        <span>\n                                            You are about to make this widget local.<br />\n                                            <br />Note that after this action this widget will no\n                                            longer be affected by the changes you make to the global\n                                            widget it originates from!\n                                        </span>\n                                    }\n                                    onConfirm={() => this.makeWidgetLocal(data)}\n                                />\n                            );\n                        }\n\n                        return (\n                            <MakeGlobalDialog\n                                name={\"makeGlobal\"}\n                                widget={data}\n                                onSuccess={widget => this.makeWidgetGlobal(data, widget)}\n                            />\n                        );\n                    }}\n                </ViewSwitcher.View>\n                <ViewSwitcher.View name={\"deleteGlobalWidget\"} modal>\n                    {({ data }) => {\n                        return (\n                            <Modal.Confirmation\n                                name={\"deleteGlobalWidget\"}\n                                confirm={\"I know what I'm doing!\"}\n                                cancel={\"I changed my mind\"}\n                                message={\n                                    <span>\n                                        You are about to delete a global widget!<br />\n                                        <br />Note that this will affect all the pages that are\n                                        currently using this widget!\n                                    </span>\n                                }\n                                onConfirm={() => this.deleteGlobalWidget(data.origin)}\n                            />\n                        );\n                    }}\n                </ViewSwitcher.View>\n            </ViewSwitcher>\n        );\n    }\n}\n\nexport default createComponent(PageContent, {\n    modules: [\"Alert\", \"Button\", \"Grid\", \"Tabs\", \"ViewSwitcher\", \"Modal\"],\n    services: [\"cms\"]\n});\n"]}