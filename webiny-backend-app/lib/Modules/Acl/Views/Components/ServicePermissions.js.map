{"version":3,"sources":["../../../../../src/Modules/Acl/Views/Components/ServicePermissions.jsx"],"names":["ServicePermissions","state","services","loading","api","Api","Endpoint","isEmpty","props","model","permissions","setState","setQuery","classIds","map","get","then","apiResponse","getData","Ui","Component","defaultProps","onTogglePermission","noop","onAddService","onRemoveService","renderer","Loader","Button","ViewSwitcher","Grid","Icon","showView","servicePermissionsWrapper","addAction","i18n","accessBoxesWrapper","servicePermissions","find","classId","service","method","index","findIndex","clone","splice","Growl","success","concat","createComponent","modules"],"mappings":"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","file":"ServicePermissions.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport {Webiny} from 'webiny-client';\nimport styles from './styles.css';\nimport ServiceBox from './AccessBox/ServiceBox';\nimport AddServiceModal from './AddServiceModal';\n\n/**\n * @i18n.namespace Webiny.Backend.Acl.ServicePermissions\n */\nclass ServicePermissions extends Webiny.Ui.Component {\n    constructor() {\n        super();\n        this.state = {\n            services: [],\n            loading: false\n        };\n\n        this.api = new Webiny.Api.Endpoint('/entities/webiny/user-permissions');\n    }\n\n    componentWillMount() {\n        super.componentWillMount();\n        if (!_.isEmpty(this.props.model.permissions)) {\n            this.setState({loading: true}, () => {\n                this.api.setQuery({classIds: _.map(this.props.model.permissions, 'classId')}).get('/service').then(apiResponse => {\n                    this.setState({loading: false, services: apiResponse.getData()})\n                });\n            });\n        }\n    }\n}\n\nServicePermissions.defaultProps = {\n    model: null,\n    onTogglePermission: _.noop,\n    onAddService: _.noop,\n    onRemoveService: _.noop,\n    renderer() {\n        const {Loader, Button, ViewSwitcher, Grid, Icon} = this.props;\n\n        return (\n            <ViewSwitcher>\n                <ViewSwitcher.View view=\"form\" defaultView>\n                    {({showView}) => (\n                        <div className={styles.servicePermissionsWrapper}>\n                            {this.state.loading && <Loader/>}\n                            <Grid.Row className={styles.addAction}>\n                                <Grid.Col all={12} className=\"text-center\">\n                                    <Button type=\"primary\" onClick={showView('addServiceModal')}>\n                                        <Icon icon=\"icon-plus-circled\"/>\n                                        {this.i18n(`Add service`)}\n                                    </Button>\n                                </Grid.Col>\n                            </Grid.Row>\n\n                            {_.isEmpty(this.state.services) ? (\n                                <Grid.Row>\n                                    <Grid.Col all={12} className=\"text-center\">\n                                        <div>\n                                            <h2>{this.i18n(`No services selected.`)}</h2>\n                                            <p>\n                                                {this.i18n(`To manage access, please add a service first.`)}\n                                            </p>\n                                        </div>\n                                    </Grid.Col>\n                                </Grid.Row>\n                            ) : (\n                                <Grid.Row className={styles.accessBoxesWrapper}>\n                                    {this.state.services.map(service => {\n                                        const servicePermissions = _.find(this.props.model.permissions, {classId: service.classId});\n                                        return (\n                                            <ServiceBox\n                                                currentlyEditingPermission={this.props.model}\n                                                onTogglePermission={(service, method) => this.props.onTogglePermission(service, method)}\n                                                onRemoveService={service => {\n                                                    const index = _.findIndex(this.state.services, {classId: service.classId});\n                                                    const services = _.clone(this.state.services);\n                                                    services.splice(index, 1);\n                                                    this.setState({services}, () => {\n                                                        this.props.onRemoveService(service);\n                                                        Webiny.Growl.success(this.i18n('Service removed successfully!'));\n                                                    });\n                                                }}\n                                                key={service.classId}\n                                                service={service}\n                                                permissions={_.get(servicePermissions, 'rules', {})}/>\n                                        );\n                                    })}\n                                </Grid.Row>\n                            )}\n                        </div>\n                    )}\n                </ViewSwitcher.View>\n                <ViewSwitcher.View view=\"addServiceModal\" modal>\n                    {() => (\n                        <AddServiceModal\n                            exclude={this.state.services}\n                            onSubmit={service => {\n                                this.setState({services: _.clone(this.state.services).concat([service])}, () => {\n                                    this.props.onAddService(service);\n                                    Webiny.Growl.success(this.i18n('Service was added successfully!'));\n                                });\n                            }}/>\n                    )}\n                </ViewSwitcher.View>\n            </ViewSwitcher>\n        );\n    }\n};\n\nexport default Webiny.createComponent(ServicePermissions, {\n    modules: [\n        'Input', 'Button', 'ViewSwitcher', 'Grid', 'Icon', 'Loader'\n    ]\n});\n"]}