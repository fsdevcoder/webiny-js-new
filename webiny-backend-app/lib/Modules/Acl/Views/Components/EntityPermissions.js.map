{"version":3,"sources":["../../../../../src/Modules/Acl/Views/Components/EntityPermissions.jsx"],"names":["EntityPermissions","state","entities","loading","api","Api","Endpoint","isEmpty","props","model","permissions","setState","setQuery","classIds","map","get","then","apiResponse","getData","Ui","Component","defaultProps","onTogglePermission","noop","onAddEntity","onRemoveEntity","renderer","Loader","Button","ViewSwitcher","Grid","Icon","showView","entityPermissionsWrapper","addAction","i18n","accessBoxesWrapper","entityPermissions","find","classId","entity","method","index","findIndex","clone","splice","Growl","success","concat","createComponent","modules"],"mappings":"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","file":"EntityPermissions.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport {Webiny} from 'webiny-client';\nimport styles from './styles.css';\nimport EntityBox from './AccessBox/EntityBox';\nimport AddEntityModal from './AddEntityModal';\n\n/**\n * @i18n.namespace Webiny.Backend.Acl.EntityPermissions\n */\nclass EntityPermissions extends Webiny.Ui.Component {\n    constructor() {\n        super();\n        this.state = {\n            entities: [],\n            loading: false\n        };\n\n        this.api = new Webiny.Api.Endpoint('/entities/webiny/user-permissions');\n    }\n\n    componentWillMount() {\n        super.componentWillMount();\n        if (!_.isEmpty(this.props.model.permissions)) {\n            this.setState({loading: true}, () => {\n                this.api.setQuery({classIds: _.map(this.props.model.permissions , 'classId')}).get('/entity').then(apiResponse => {\n                    this.setState({loading: false, entities: apiResponse.getData()})\n                });\n            });\n        }\n    }\n}\n\nEntityPermissions.defaultProps = {\n    model: null,\n    onTogglePermission: _.noop,\n    onAddEntity: _.noop,\n    onRemoveEntity: _.noop,\n    renderer() {\n        const {Loader, Button, ViewSwitcher, Grid, Icon, permissions} = this.props;\n\n        return (\n            <ViewSwitcher>\n                <ViewSwitcher.View view=\"form\" defaultView>\n                    {({showView}) => (\n                        <div className={styles.entityPermissionsWrapper}>\n                            {this.state.loading && <Loader/>}\n                            <Grid.Row className={styles.addAction}>\n                                <Grid.Col all={12} className=\"text-center\">\n                                    <Button type=\"primary\" onClick={showView('addEntityModal')}>\n                                        <Icon icon=\"icon-plus-circled\"/>\n                                        {this.i18n(`Add entity`)}\n                                    </Button>\n                                </Grid.Col>\n                            </Grid.Row>\n\n                            {_.isEmpty(this.state.entities) ? (\n                                <Grid.Row>\n                                    <Grid.Col all={12} className=\"text-center\">\n                                        <div>\n                                            <h2>{this.i18n(`No entities selected.`)}</h2>\n                                            <p>\n                                                {this.i18n(`To manage access, please add an entity first.`)}\n                                            </p>\n                                        </div>\n                                    </Grid.Col>\n                                </Grid.Row>\n                            ) : (\n                                <Grid.Row className={styles.accessBoxesWrapper}>\n                                    {this.state.entities.map(entity => {\n                                        const entityPermissions = _.find(this.props.model.permissions, {classId: entity.classId});\n                                        return (\n                                            <EntityBox\n                                                currentlyEditingPermission={this.props.model}\n                                                onTogglePermission={(entity, method) => this.props.onTogglePermission(entity, method)}\n                                                onRemoveEntity={entity => {\n                                                    const index = _.findIndex(this.state.entities, {classId: entity.classId});\n                                                    const entities = _.clone(this.state.entities);\n                                                    entities.splice(index, 1);\n                                                    this.setState({entities}, () => {\n                                                        this.props.onRemoveEntity(entity);\n                                                        Webiny.Growl.success(this.i18n('Entity removed successfully!'));\n                                                    });\n                                                }}\n                                                key={entity.classId}\n                                                entity={entity}\n                                                permissions={_.get(entityPermissions, 'rules', {})}/>\n                                        );\n                                    })}\n                                </Grid.Row>\n                            )}\n                        </div>\n                    )}\n                </ViewSwitcher.View>\n                <ViewSwitcher.View view=\"addEntityModal\" modal>\n                    {() => (\n                        <AddEntityModal\n                            exclude={this.state.entities}\n                            onSubmit={entity => {\n                                this.setState({entities: _.clone(this.state.entities).concat([entity])}, () => {\n                                    this.props.onAddEntity(entity);\n                                    Webiny.Growl.success(this.i18n('Entity was added successfully!'));\n                                });\n                            }}/>\n                    )}\n                </ViewSwitcher.View>\n            </ViewSwitcher>\n        );\n    }\n};\n\nexport default Webiny.createComponent(EntityPermissions, {\n    modules: [\n        'Input', 'Button', 'ViewSwitcher', 'Grid', 'Icon', 'Loader'\n    ]\n});\n"]}