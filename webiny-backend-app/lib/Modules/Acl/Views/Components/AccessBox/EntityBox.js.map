{"version":3,"sources":["../../../../../../src/Modules/Acl/Views/Components/AccessBox/EntityBox.jsx"],"names":["EntityBox","props","state","entityFilter","crud","create","read","list","update","delete","Tooltip","entity","permissions","onTogglePermission","currentlyEditingPermission","existingOperations","c","find","methods","key","r","get","u","d","buttons","each","method","custom","push","classId","Input","customMethods","exposed","assign","header","customMethodsTitle","i18n","content","noCustomMethods","isEmpty","bindTo","map","url","indexOf","toLowerCase","customMethodListItem","methodDetails","methodTypeLabel","toUpperCase","path","methodPathLabel","filter","isUndefined","item","customMethodsList","Ui","Component","defaultProps","noop","onRemoveEntity","renderer","ClickConfirm","box","title","class","removeButton","renderCrudMethods","renderCustomMethods","createComponent","modules"],"mappings":"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","file":"EntityBox.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport {Webiny} from 'webiny-client';\nimport ToggleAccessButton from './ToggleAccessButton';\nimport MethodTooltip from './MethodTooltip';\n\nimport styles from './styles.css';\n\n/**\n * @i18n.namespace Webiny.Backend.Acl.EntityBox\n */\nclass EntityBox extends Webiny.Ui.Component {\n    constructor(props) {\n        super(props);\n        this.state = {entityFilter: ''};\n\n        this.crud = {\n            create: '/.post',\n            read: '{id}.get',\n            list: '/.get',\n            update: '{id}.patch',\n            delete: '{id}.delete'\n        };\n    }\n\n    /**\n     * Renders toggle buttons for basic CRUD API endpoints (if they exist on given entity).\n     */\n    renderCrudMethods() {\n        const {Tooltip, entity, permissions, onTogglePermission, currentlyEditingPermission} = this.props;\n\n        const existingOperations = {\n            c: _.find(entity.methods, {key: this.crud.create}),\n            r: _.find(entity.methods, {key: this.crud.get}) || _.find(entity.methods, {key: this.crud.list}),\n            u: _.find(entity.methods, {key: this.crud.update}),\n            d: _.find(entity.methods, {key: this.crud.delete})\n        };\n\n        const buttons = [];\n        _.each(existingOperations, (method, key) => {\n            if (method && !method.custom) {\n                buttons.push(\n                    <Tooltip interactive placement=\"top\" key={key} target={(\n                        <ToggleAccessButton\n                            method={method}\n                            onClick={() => onTogglePermission(entity.classId, key)}\n                            value={permissions[key]}/>\n                    )}>\n                        <MethodTooltip method={method} currentlyEditingPermission={currentlyEditingPermission}/>\n                    </Tooltip>\n                );\n            }\n        });\n\n        return <div>{buttons}</div>;\n    }\n\n    /**\n     * Renders toggle buttons for custom API endpoints (if they exist on given entity).\n     */\n    renderCustomMethods() {\n        const {Input, Tooltip, entity, permissions, currentlyEditingPermission, onTogglePermission} = this.props;\n\n        let customMethods = [];\n\n        _.each(entity.methods, method => {\n            if (!method.custom) {\n                return true;\n            }\n            const exposed = _.get(permissions, method.key, false);\n            customMethods.push(_.assign({}, method, {exposed}));\n        });\n\n        let header = <h2 className={styles.customMethodsTitle}>{this.i18n(`Custom methods`)}</h2>;\n        let content = <div className={styles.noCustomMethods}>{this.i18n(`No custom methods.`)}</div>;\n\n        if (_.isEmpty(customMethods)) {\n            return (\n                <div className={styles.customMethods}>\n                    <header>{header}</header>\n                    {content}\n                </div>\n            );\n        }\n\n        header = (\n            <span>\n                <h2 className={styles.customMethodsTitle}>{this.i18n(`Custom methods`)}</h2>\n                <Input placeholder={this.i18n('Filter methods...')} {...this.bindTo('entityFilter')} delay={0}/>\n            </span>\n        );\n\n        let methods = customMethods.map(method => {\n            if (method.url.indexOf(this.state.entityFilter.toLowerCase()) === -1) {\n                return;\n            }\n\n            return (\n                <li key={method.key} className={styles.customMethodListItem}>\n                    <Tooltip interactive target={(\n                        <ToggleAccessButton\n                            label={this.i18n(`E`)}\n                            key={method.key}\n                            method={method}\n                            onClick={() => onTogglePermission(entity.classId, method.key)}\n                            value={_.get(permissions, method.key)}/>\n                    )}>\n                        <MethodTooltip method={method} currentlyEditingPermission={currentlyEditingPermission}/>\n                    </Tooltip>\n\n                    <div className={styles.methodDetails}>\n                        <div className={styles.methodTypeLabel}>\n                            {method.method.toUpperCase()}\n                        </div>\n                        <div title={method.path} className={styles.methodPathLabel}>{method.path}</div>\n                    </div>\n                    <div className=\"clearfix\"/>\n                </li>\n            );\n        });\n\n        // Filter out undefined values (when method filtering is active)\n        methods = _.filter(methods, item => !_.isUndefined(item));\n        content = _.isEmpty(methods) ? <div className={styles.noCustomMethods}>{this.i18n(`Nothing to show.`)}</div> :\n            <ul className={styles.customMethodsList}>{methods}</ul>;\n\n        return (\n            <div>\n                <header>{header}</header>\n                {content}\n            </div>\n        );\n    }\n}\n\nEntityBox.defaultProps = {\n    currentlyEditingPermission: null,\n    entity: {},\n    permissions: {},\n    onTogglePermission: _.noop,\n    onRemoveEntity: _.noop,\n    renderer() {\n        const {ClickConfirm} = this.props;\n\n        return (\n            <div className=\"col-lg-4 col-md-6 col-sm-12 col-xs-12\">\n                <div className={styles.box}>\n                    <div>\n                        <h1 className={styles.title}>\n                            {this.props.entity.classId}<br/>\n                            <small>{this.props.entity.class}</small>\n                        </h1>\n                        <ClickConfirm\n                            onComplete={() => this.props.onRemoveEntity(this.props.entity)}\n                            message={this.i18n('Are you sure you want to remove {entity}?', {\n                                entity: <strong>{this.props.entity.classId}</strong>\n                            })}>\n                            <span onClick={_.noop} className={styles.removeButton}>×</span>\n                        </ClickConfirm>\n                        {this.renderCrudMethods()}\n                        {this.renderCustomMethods()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Webiny.createComponent(EntityBox, {\n    modules: ['Input', 'ClickConfirm', 'Tooltip']\n});\n"]}