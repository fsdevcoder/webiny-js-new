{"version":3,"sources":["../../../../../../src/Modules/Acl/Views/Components/AccessBox/ServiceBox.jsx"],"names":["ServiceBox","props","state","serviceFilter","Input","Tooltip","service","permissions","currentlyEditingPermission","onTogglePermission","customMethods","each","methods","exposed","get","method","key","push","assign","header","customMethodsTitle","i18n","content","noCustomMethods","isEmpty","bindTo","map","url","indexOf","toLowerCase","customMethodListItem","classId","methodDetails","methodTypeLabel","toUpperCase","path","methodPathLabel","filter","isUndefined","item","customMethodsList","Ui","Component","defaultProps","noop","onRemoveService","renderer","ClickConfirm","box","title","class","removeButton","renderCustomMethods","createComponent","modules"],"mappings":"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","file":"ServiceBox.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport {Webiny} from 'webiny-client';\nimport ToggleAccessButton from './ToggleAccessButton';\nimport MethodTooltip from './MethodTooltip';\n\nimport styles from './styles.css';\n\n/**\n * @i18n.namespace Webiny.Backend.Acl.EntityBox\n */\nclass ServiceBox extends Webiny.Ui.Component {\n    constructor(props) {\n        super(props);\n        this.state = {serviceFilter: ''};\n    }\n\n    /**\n     * Renders toggle buttons for custom API endpoints (if they exist on given service).\n     */\n    renderCustomMethods() {\n        const {Input, Tooltip, service, permissions, currentlyEditingPermission, onTogglePermission} = this.props;\n\n        let customMethods = [];\n\n        _.each(service.methods, method => {\n            const exposed = _.get(permissions, method.key, false);\n            customMethods.push(_.assign({}, method, {exposed}));\n        });\n\n        let header = <h2 className={styles.customMethodsTitle}>{this.i18n(`Custom methods`)}</h2>;\n        let content = <div className={styles.noCustomMethods}>{this.i18n(`No custom methods.`)}</div>\n\n        if (_.isEmpty(customMethods)) {\n            return (\n                <div className={styles.customMethods}>\n                    <header>{header}</header>\n                    {content}\n                </div>\n            );\n        }\n\n        header = (\n            <span>\n                <h2 className={styles.customMethodsTitle}>{this.i18n(`Custom methods`)}</h2>\n                <Input placeholder={this.i18n('Filter methods...')} {...this.bindTo('serviceFilter')} delay={0}/>\n            </span>\n        );\n\n        let methods = customMethods.map(method => {\n            if (method.url.indexOf(this.state.serviceFilter.toLowerCase()) === -1) {\n                return;\n            }\n\n            return (\n                <li key={method.key} className={styles.customMethodListItem}>\n                    <Tooltip interactive target={(\n                        <ToggleAccessButton\n                            label={this.i18n(`E`)}\n                            key={method.key}\n                            method={method}\n                            onClick={() => onTogglePermission(service.classId, method.key)}\n                            value={method.exposed}/>\n                    )}>\n                        <MethodTooltip method={method} currentlyEditingPermission={currentlyEditingPermission}/>\n                    </Tooltip>\n\n                    <div className={styles.methodDetails}>\n                        <div className={styles.methodTypeLabel}>\n                            {method.method.toUpperCase()}\n                        </div>\n                        <div title={method.path} className={styles.methodPathLabel}>{method.path}</div>\n                    </div>\n                    <div className=\"clearfix\"/>\n                </li>\n            );\n        });\n\n        // Filter out undefined values (when method filtering is active)\n        methods = _.filter(methods, item => !_.isUndefined(item));\n        content = _.isEmpty(methods) ? <div className={styles.noCustomMethods}>{this.i18n(`Nothing to show.`)}</div> :\n            <ul className={styles.customMethodsList}>{methods}</ul>;\n\n        return (\n            <div>\n                <header>{header}</header>\n                {content}\n            </div>\n        );\n    }\n}\n\nServiceBox.defaultProps = {\n    currentlyEditingPermission: null,\n    service: {},\n    permissions: {},\n    onTogglePermission: _.noop,\n    onRemoveService: _.noop,\n    renderer() {\n        const {ClickConfirm} = this.props;\n\n        return (\n            <div className=\"col-lg-4 col-md-6 col-sm-12 col-xs-12\">\n                <div className={styles.box}>\n                    <div>\n                        <h1 className={styles.title}>\n                            {this.props.service.classId}<br/>\n                            <small>{this.props.service.class}</small>\n                        </h1>\n                        <ClickConfirm\n                            onComplete={() => this.props.onRemoveService(this.props.service)}\n                            message={this.i18n('Are you sure you want to remove {service}?', {\n                                service: <strong>{this.props.service.classId}</strong>\n                            })}>\n                            <span onClick={_.noop} className={styles.removeButton}>Ã—</span>\n                        </ClickConfirm>\n                        {this.renderCustomMethods()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Webiny.createComponent(ServiceBox, {\n    modules: ['Input', 'ClickConfirm', 'Tooltip']\n});\n"]}