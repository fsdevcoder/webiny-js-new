{"version":3,"sources":["../../../../src/Modules/Logger/Views/ListErrors.jsx"],"names":["ListErrors","props","bindMethods","state","error","list","api","Api","Endpoint","delete","id","then","loadData","parentList","post","response","getData","updateCount","Ui","View","defaultProps","renderer","jsErrorList","fields","searchFields","query","type","layout","meta","errorList","$this","i18n","total","totalCount","perPage","length","map","row","errorCount","ref","lastEntry","resolveError","resolveGroup"],"mappings":"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","file":"ListErrors.js","sourcesContent":["import React from 'react';\nimport {Webiny} from 'webiny-client';\nimport ErrorGroup from './ErrorGroup';\nimport ErrorCount from './ErrorCount';\n\n/**\n * @i18n.namespace Webiny.Backend.Logger.ListErrors\n */\nclass ListErrors extends Webiny.Ui.View {\n\n    constructor(props) {\n        super(props);\n\n        this.bindMethods('resolveError');\n\n        this.state = {};\n    }\n\n    resolveGroup(error, list) {\n        const api = new Webiny.Api.Endpoint('/entities/webiny/logger-error-group');\n        api.delete(error.id).then(() => {\n            list.loadData();\n        });\n    }\n\n    resolveError(error, list, parentList) {\n        const api = new Webiny.Api.Endpoint('/entities/webiny/logger-entry');\n        api.post(error.id + '/resolve').then((response) => {\n            if (response.getData('errorCount') < 1) {\n                // if we have 0 errors in this group, we have to refresh the parent table\n                parentList.loadData();\n            } else {\n                list.loadData();\n                this['errorCount-' + response.getData('errorGroup')].updateCount(response.getData('errorCount'));\n            }\n        });\n    }\n}\n\nListErrors.defaultProps = {\n\n    renderer() {\n        const jsErrorList = {\n            api: '/entities/webiny/logger-error-group',\n            fields: '*',\n            searchFields: 'error',\n            query: {'_sort': '-lastEntry', 'type': this.props.type},\n            layout: null\n        };\n\n        return (\n            <Webiny.Ui.LazyLoad modules={['List', 'Section', 'Grid', 'ExpandableList', 'Filters']}>\n                {(Ui) => (\n                    <Ui.List {...jsErrorList}>\n                        {({list, meta, $this: errorList}) => {\n                            return (\n                                <Ui.Grid.Row>\n                                    <Ui.Grid.Col all={12}>\n                                        <Ui.Section\n                                            title={this.i18n(`Found a total of {total} records (showing {perPage} per page)`, {\n                                                total: meta.totalCount,\n                                                perPage: meta.perPage\n                                            })}/>\n                                    </Ui.Grid.Col>\n                                    <Ui.Grid.Col all={12}>\n                                        <Ui.List.Loader/>\n                                        <Ui.List.Table.Empty renderIf={!list.length}/>\n                                        <Ui.ExpandableList>\n                                            {list.map(row => {\n                                                return (\n                                                    <Ui.ExpandableList.Row key={row.id}>\n                                                        <Ui.ExpandableList.Field width={1} name=\"Count\" className=\"text-center\">\n                                                            <ErrorCount\n                                                                count={row.errorCount}\n                                                                ref={ref => this['errorCount-' + row.id] = ref}/>\n                                                        </Ui.ExpandableList.Field>\n                                                        <Ui.ExpandableList.Field\n                                                            width={5}\n                                                            name=\"Error\">{row.error}</Ui.ExpandableList.Field>\n                                                        <Ui.ExpandableList.Field width={4} name=\"Last Entry\">\n                                                            <Ui.Filters.DateTime value={row.lastEntry}/>\n                                                        </Ui.ExpandableList.Field>\n\n                                                        <Ui.ExpandableList.RowDetailsList title={row.error}>\n                                                            <ErrorGroup\n                                                                errorGroup={row} resolveError={this.resolveError}\n                                                                parentList={errorList}/>\n                                                        </Ui.ExpandableList.RowDetailsList>\n\n                                                        <Ui.ExpandableList.ActionSet>\n                                                            <Ui.ExpandableList.Action\n                                                                label={this.i18n('Resolve Group')}\n                                                                icon=\"icon-check\"\n                                                                onClick={() => this.resolveGroup(row, errorList)}/>\n                                                        </Ui.ExpandableList.ActionSet>\n                                                    </Ui.ExpandableList.Row>\n                                                );\n                                            })}\n                                        </Ui.ExpandableList>\n                                    </Ui.Grid.Col>\n                                    <Ui.Grid.Col all={12}>\n                                        <Ui.List.Pagination/>\n                                    </Ui.Grid.Col>\n                                </Ui.Grid.Row>\n                            );\n                        }}\n                    </Ui.List>\n                )}\n            </Webiny.Ui.LazyLoad>\n        );\n    }\n};\n\nexport default ListErrors;"]}