{"version":3,"sources":["../../../../../src/Modules/I18N/Views/TextsList/ImportTextsModal.jsx"],"names":["ImportTextsModal","Ui","props","options","overwriteExisting","model","form","showLoading","preview","setModel","response","api","post","hideLoading","isError","handleApiError","results","data","getData","onTextsImported","i18n","num","created","updated","ignored","groups","hide","submit","ModalComponent","defaultProps","assign","noop","createComponent","modulesProp","modules"],"mappings":"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","file":"ImportTextsModal.js","sourcesContent":["import React from 'react';\nimport {Webiny} from 'webiny-client';\nimport _ from 'lodash';\n\n/**\n * @i18n.namespace Webiny.Backend.I18N.ImportTexts\n */\nclass ImportTextsModal extends Webiny.Ui.ModalComponent {\n    renderDialog() {\n        const {Ui} = this.props;\n\n        return (\n            <Ui.Modal.Dialog>\n                <Ui.Form \n                    api=\"/entities/webiny/i18n-texts\"\n                    url=\"/import/zip\"\n                    defaultModel={{options: {overwriteExisting: true}}}\n                    onSubmit={async ({model, form}) => {\n                        form.showLoading();\n                        const preview = model.options.preview;\n                        form.setModel({response: null});\n                        const response = await form.api.post('/import/json', model);\n                        form.hideLoading();\n\n                        if (response.isError()) {\n                            return form.handleApiError(response);\n                        }\n\n                        form.setModel({results: {preview, data: response.getData()}}, () => !preview && this.props.onTextsImported());\n                    }}>\n                    {({model, form}) => {\n                        let results = null;\n                        if (model.results) {\n                            if (model.results.preview) {\n                                results = (\n                                    <Ui.Alert>\n                                        {this.i18n('Export file is valid. After importing, following changes will be applied:')}\n                                        <ul>\n                                            <li>{this.i18n('{num} created', {num: <strong>{model.results.data.created}</strong>})}</li>\n                                            <li>{this.i18n('{num} updated', {num: <strong>{model.results.data.updated}</strong>})}</li>\n                                            <li>{this.i18n('{num} ignored', {num: <strong>{model.results.data.ignored}</strong>})}</li>\n                                        </ul>\n                                        {this.i18n('The following changes will be applied to text groups:')}\n                                        <ul>\n                                            <li>{this.i18n('{num} created', {num: <strong>{model.results.data.groups.created}</strong>})}</li>\n                                            <li>{this.i18n('{num} updated', {num: <strong>{model.results.data.groups.updated}</strong>})}</li>\n                                            <li>{this.i18n('{num} ignored', {num: <strong>{model.results.data.groups.ignored}</strong>})}</li>\n                                        </ul>\n                                    </Ui.Alert>\n                                );\n                            } else {\n                                results = (\n                                    <Ui.Alert type=\"success\">\n                                        {this.i18n('Translations were successfully imported! following changes were applied:')}\n                                        <ul>\n                                            <li>{this.i18n('{num} created', {num: <strong>{model.results.data.created}</strong>})}</li>\n                                            <li>{this.i18n('{num} updated', {num: <strong>{model.results.data.updated}</strong>})}</li>\n                                            <li>{this.i18n('{num} ignored', {num: <strong>{model.results.data.ignored}</strong>})}</li>\n                                        </ul>\n                                        {this.i18n('The following changes were applied to text groups:')}\n                                        <ul>\n                                            <li>{this.i18n('{num} created', {num: <strong>{model.results.data.groups.created}</strong>})}</li>\n                                            <li>{this.i18n('{num} updated', {num: <strong>{model.results.data.groups.updated}</strong>})}</li>\n                                            <li>{this.i18n('{num} ignored', {num: <strong>{model.results.data.groups.ignored}</strong>})}</li>\n                                        </ul>\n                                    </Ui.Alert>\n                                );\n                            }\n                        }\n\n                        return (\n                            <Ui.Modal.Content>\n                                <Ui.Form.Loader/>\n                                <Ui.Modal.Header title={this.i18n(`Import texts`)} onClose={this.hide}/>\n                                <Ui.Modal.Body>\n                                    <Ui.Form.Error/>\n                                    {results}\n                                    <Ui.Grid.Row>\n                                        <Ui.Grid.Col all={12}>\n                                            <Ui.File\n                                                validate=\"required\"\n                                                placeholder={this.i18n('JSON file')}\n                                                label={this.i18n('Choose File')}\n                                                name=\"file\"\n                                                accept={['application/json']}/>\n                                        </Ui.Grid.Col>\n                                    </Ui.Grid.Row>\n\n                                    <Ui.Section title={this.i18n('Options')}/>\n                                    <Ui.Grid.Row>\n                                        <Ui.Grid.Col all={12}>\n                                            <Ui.Checkbox\n                                                name=\"options.overwriteExisting\"\n                                                label={this.i18n('Overwrite existing keys')}\n                                                tooltip={this.i18n('Previously imported texts will be overwritten.')}/>\n                                            <Ui.Checkbox\n                                                name=\"options.preview\"\n                                                label={this.i18n('Preview')}/>\n                                        </Ui.Grid.Col>\n                                    </Ui.Grid.Row>\n                                </Ui.Modal.Body>\n                                <Ui.Modal.Footer >\n                                    <Ui.Button label={this.i18n(`Cancel`)} onClick={this.hide}/>\n                                    <Ui.Button\n                                        type=\"primary\"\n                                        label={this.i18n(`Import`)}\n                                        onClick={form.submit}/>\n                                </Ui.Modal.Footer>\n                            </Ui.Modal.Content>\n                        );\n                    }\n                    }\n                </Ui.Form>\n            </Ui.Modal.Dialog>\n        );\n    }\n}\n\nImportTextsModal.defaultProps = _.assign({}, Webiny.Ui.ModalComponent.defaultProps, {\n    onTextsImported: _.noop\n});\n\nexport default Webiny.createComponent(ImportTextsModal, {\n    modulesProp: 'Ui',\n    modules: [\n        'Modal', 'Form', 'Grid', 'CheckboxGroup', 'Checkbox', 'Button', 'File', 'Section', 'Alert'\n    ]\n});"]}