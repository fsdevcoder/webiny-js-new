{"version":3,"sources":["../src/file.js"],"names":["File","constructor","key","storage","file","body","bodyLoaded","metaLoaded","getStorage","getKey","getUrl","getURL","getBody","options","getFile","getMeta","meta","setBody","data","setMeta","getTimeModified","rename","newKey","delete","save","setFile","getAbsolutePath","getSize","getContentType"],"mappings":";;;;;;;;;;AACA;;;;;;AAGe,MAAMA,IAAN,CAA4B;;AAOvCC,gBAAYC,GAAZ,EAAyBC,OAAzB,EAA2C;AACvC,aAAKD,GAAL,GAAWA,GAAX;AACA,aAAKC,OAAL,GAAeA,OAAf;AACA,aAAKC,IAAL,GAAY,EAAEC,MAAM,EAAR,EAAZ;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACA,aAAKC,UAAL,GAAkB,KAAlB;AACH;;AAED;;;AAGAC,iBAAsB;AAClB,eAAO,KAAKL,OAAZ;AACH;;AAED;;;AAGAM,aAAiB;AACb,eAAO,KAAKP,GAAZ;AACH;;AAED;;;AAGAQ,aAAiB;AACb,eAAO,KAAKP,OAAL,CAAaQ,MAAb,CAAoB,KAAKT,GAAzB,CAAP;AACH;;AAED;;;AAGMU,WAAN,CAAcC,OAAd,EAA0D;AAAA;;AAAA;AACtD,gBAAI,CAAC,MAAKP,UAAV,EAAsB;AAClB,sBAAKF,IAAL,GAAY,MAAM,MAAKD,OAAL,CAAaW,OAAb,CAAqB,MAAKZ,GAA1B,EAA+BW,OAA/B,CAAlB;AACA,sBAAKP,UAAL,GAAkB,IAAlB;AACA,sBAAKC,UAAL,GAAkB,IAAlB;AACH;AACD,mBAAO,MAAKH,IAAL,CAAUC,IAAjB;AANsD;AAOzD;;AAED;;;AAGMU,WAAN,GAAkC;AAAA;;AAAA;AAC9B,gBAAI,CAAC,OAAKR,UAAV,EAAsB;AAClB,uBAAKH,IAAL,CAAUY,IAAV,GAAiB,MAAM,OAAKb,OAAL,CAAaY,OAAb,CAAqB,OAAKb,GAA1B,CAAvB;AACA,uBAAKK,UAAL,GAAkB,IAAlB;AACH;AACD,mBAAO,OAAKH,IAAL,CAAUY,IAAjB;AAL8B;AAMjC;;AAED;;;AAGAC,YAAQC,IAAR,EAAqC;AACjC,aAAKd,IAAL,CAAUC,IAAV,GAAiBa,IAAjB;AACA,aAAKZ,UAAL,GAAkB,IAAlB;AACH;;AAED;;;AAGAa,YAAQH,IAAR,EAA4B;AACxB,aAAKZ,IAAL,CAAUY,IAAV,GAAiBA,IAAjB;AACA,aAAKT,UAAL,GAAkB,IAAlB;AACH;;AAED;;;AAGAa,sBAAoC;AAChC,eAAO,KAAKjB,OAAL,CAAaiB,eAAb,CAA6B,KAAKlB,GAAlC,CAAP;AACH;;AAED;;;AAGAmB,WAAOC,MAAP,EAAyC;AACrC,eAAO,KAAKnB,OAAL,CAAakB,MAAb,CAAoB,KAAKnB,GAAzB,EAA8BoB,MAA9B,CAAP;AACH;;AAED;;;AAGAC,aAA2B;AACvB,eAAO,KAAKpB,OAAL,CAAaoB,MAAb,CAAoB,KAAKrB,GAAzB,CAAP;AACH;;AAED;;;AAGMsB,QAAN,GAA+B;AAAA;;AAAA;AAC3B,mBAAKtB,GAAL,GAAW,MAAM,OAAKC,OAAL,CAAasB,OAAb,CAAqB,OAAKvB,GAA1B,EAA+B,OAAKE,IAApC,CAAjB;AACA,mBAAO,IAAP;AAF2B;AAG9B;;AAED;;;;;;AAMAsB,sBAAmC;AAC/B,eAAO,KAAKvB,OAAL,CAAauB,eAAb,CAA6B,KAAKxB,GAAlC,CAAP;AACH;;AAED;;;AAGAyB,cAA4B;AACxB,eAAO,KAAKxB,OAAL,CAAawB,OAAb,CAAqB,KAAKzB,GAA1B,CAAP;AACH;;AAED;;;AAGA0B,mBAAe1B,GAAf,EAA8C;AAC1C,eAAO,KAAKC,OAAL,CAAayB,cAAb,CAA4B1B,GAA5B,CAAP;AACH;AA9HsC;kBAAtBF,I","file":"file.js","sourcesContent":["// @flow\nimport Storage from \"./storage\";\nimport type { IFile, IFileData } from \"../types\";\n\nexport default class File implements IFile {\n    key: string;\n    storage: Storage;\n    file: IFileData;\n    bodyLoaded: boolean;\n    metaLoaded: boolean;\n\n    constructor(key: string, storage: Storage) {\n        this.key = key;\n        this.storage = storage;\n        this.file = { body: \"\" };\n        this.bodyLoaded = false;\n        this.metaLoaded = false;\n    }\n\n    /**\n     * Get file storage\n     */\n    getStorage(): Storage {\n        return this.storage;\n    }\n\n    /**\n     * Get file key\n     */\n    getKey(): string {\n        return this.key;\n    }\n\n    /**\n     * Get public file URL\n     */\n    getUrl(): string {\n        return this.storage.getURL(this.key);\n    }\n\n    /**\n     * Get file body\n     */\n    async getBody(options?: Object): Promise<string | Buffer> {\n        if (!this.bodyLoaded) {\n            this.file = await this.storage.getFile(this.key, options);\n            this.bodyLoaded = true;\n            this.metaLoaded = true;\n        }\n        return this.file.body;\n    }\n\n    /**\n     * Get file meta\n     */\n    async getMeta(): Promise<?Object> {\n        if (!this.metaLoaded) {\n            this.file.meta = await this.storage.getMeta(this.key);\n            this.metaLoaded = true;\n        }\n        return this.file.meta;\n    }\n\n    /**\n     * Set file contents (writes contents to storage)\n     */\n    setBody(data: string | Buffer): void {\n        this.file.body = data;\n        this.bodyLoaded = true;\n    }\n\n    /**\n     * Set file meta\n     */\n    setMeta(meta: Object): void {\n        this.file.meta = meta;\n        this.metaLoaded = true;\n    }\n\n    /**\n     * Get time modified\n     */\n    getTimeModified(): Promise<?number> {\n        return this.storage.getTimeModified(this.key);\n    }\n\n    /**\n     * Rename a file\n     */\n    rename(newKey: string): Promise<boolean> {\n        return this.storage.rename(this.key, newKey);\n    }\n\n    /**\n     * Delete a file\n     */\n    delete(): Promise<boolean> {\n        return this.storage.delete(this.key);\n    }\n\n    /**\n     * Save file (call `setFile` on Storage instance)\n     */\n    async save(): Promise<boolean> {\n        this.key = await this.storage.setFile(this.key, this.file);\n        return true;\n    }\n\n    /**\n     * Get absolute file path.\n     * If storage driver does not support absolute paths (cloud storage), returns file key\n     *\n     * @return string\n     */\n    getAbsolutePath(): Promise<string> {\n        return this.storage.getAbsolutePath(this.key);\n    }\n\n    /**\n     * Get file size in bytes\n     */\n    getSize(): Promise<?number> {\n        return this.storage.getSize(this.key);\n    }\n\n    /**\n     * Get content type\n     */\n    getContentType(key: string): Promise<?string> {\n        return this.storage.getContentType(key);\n    }\n}\n"]}