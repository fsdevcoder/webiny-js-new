{"version":3,"sources":["../src/storage.js"],"names":["Storage","constructor","driver","getFile","key","options","setFile","file","getMeta","setMeta","meta","exists","getKeys","filter","getTimeModified","delete","rename","sourceKey","targetKey","getURL","getSize","getContentType","getAbsolutePath"],"mappings":";;;;;;;AAGA,MAAMA,OAAN,CAAc;;AAGVC,gBAAYC,MAAZ,EAAwC;AACpC,aAAKA,MAAL,GAAcA,MAAd;AACH;;AAED;;;AAGAC,YAAQC,GAAR,EAAqBC,OAArB,EAA2D;AACvD,eAAO,KAAKH,MAAL,CAAYC,OAAZ,CAAoBC,GAApB,EAAyBC,OAAzB,CAAP;AACH;;AAED;;;AAGAC,YAAQF,GAAR,EAAqBG,IAArB,EAAuD;AACnD,eAAO,KAAKL,MAAL,CAAYI,OAAZ,CAAoBF,GAApB,EAAyBG,IAAzB,CAAP;AACH;;AAED;;;AAGAC,YAAQJ,GAAR,EAAuC;AACnC,eAAO,KAAKF,MAAL,CAAYM,OAAZ,CAAoBJ,GAApB,CAAP;AACH;;AAED;;;AAGAK,YAAQL,GAAR,EAAqBM,IAArB,EAAqD;AACjD,eAAO,KAAKR,MAAL,CAAYO,OAAZ,CAAoBL,GAApB,EAAyBM,IAAzB,CAAP;AACH;;AAED;;;AAGAC,WAAOP,GAAP,EAAsC;AAClC,eAAO,KAAKF,MAAL,CAAYS,MAAZ,CAAmBP,GAAnB,CAAP;AACH;;AAED;;;;;;;;AAQAQ,YAAQR,GAAR,EAAsBS,MAAtB,EAA+D;AAC3D,eAAO,KAAKX,MAAL,CAAYU,OAAZ,CAAoBR,GAApB,EAAyBS,MAAzB,CAAP;AACH;;AAED;;;AAGAC,oBAAgBV,GAAhB,EAA+C;AAC3C,eAAO,KAAKF,MAAL,CAAYY,eAAZ,CAA4BV,GAA5B,CAAP;AACH;;AAED;;;AAGAW,WAAOX,GAAP,EAAsC;AAClC,eAAO,KAAKF,MAAL,CAAYa,MAAZ,CAAmBX,GAAnB,CAAP;AACH;;AAED;;;AAGAY,WAAOC,SAAP,EAA0BC,SAA1B,EAA+D;AAC3D,eAAO,KAAKhB,MAAL,CAAYc,MAAZ,CAAmBC,SAAnB,EAA8BC,SAA9B,CAAP;AACH;;AAED;;;AAGAC,WAAOf,GAAP,EAA4B;AACxB,eAAO,KAAKF,MAAL,CAAYiB,MAAZ,CAAmBf,GAAnB,CAAP;AACH;;AAED;;;AAGAgB,YAAQhB,GAAR,EAAuC;AACnC,eAAO,KAAKF,MAAL,CAAYkB,OAAZ,CAAoBhB,GAApB,CAAP;AACH;;AAED;;;AAGAiB,mBAAejB,GAAf,EAA8C;AAC1C,eAAO,KAAKF,MAAL,CAAYmB,cAAZ,CAA2BjB,GAA3B,CAAP;AACH;;AAED;;;AAGAkB,oBAAgBlB,GAAhB,EAA8C;AAC1C,eAAO,KAAKF,MAAL,CAAYoB,eAAZ,CAA4BlB,GAA5B,CAAP;AACH;AArGS;kBAwGCJ,O","file":"storage.js","sourcesContent":["// @flow\nimport type { IFileStorageDriver, IFileData } from \"../types\";\n\nclass Storage {\n    driver: IFileStorageDriver;\n\n    constructor(driver: IFileStorageDriver) {\n        this.driver = driver;\n    }\n\n    /**\n     * Reads the contents of the file\n     */\n    getFile(key: string, options?: Object): Promise<IFileData> {\n        return this.driver.getFile(key, options);\n    }\n\n    /**\n     * Writes the given File\n     */\n    setFile(key: string, file: IFileData): Promise<string> {\n        return this.driver.setFile(key, file);\n    }\n\n    /**\n     * Get meta data\n     */\n    getMeta(key: string): Promise<?Object> {\n        return this.driver.getMeta(key);\n    }\n\n    /**\n     * Set meta data\n     */\n    setMeta(key: string, meta: Object): Promise<boolean> {\n        return this.driver.setMeta(key, meta);\n    }\n\n    /**\n     * Checks whether the file exists\n     */\n    exists(key: string): Promise<boolean> {\n        return this.driver.exists(key);\n    }\n\n    /**\n     * Returns an array of all keys (files and directories)\n     *\n     * For storage that doesn't support directories, both parameters are irrelevant.\n     *\n     * @param key       (Optional) Key of a directory to get keys from. If not set - keys will be read from the storage root.\n     * @param filter    (Optional) Glob pattern to filter returned file keys\n     */\n    getKeys(key?: string, filter?: string): Promise<Array<string>> {\n        return this.driver.getKeys(key, filter);\n    }\n\n    /**\n     * Returns the last modified time\n     */\n    getTimeModified(key: string): Promise<?number> {\n        return this.driver.getTimeModified(key);\n    }\n\n    /**\n     * Deletes the file\n     */\n    delete(key: string): Promise<boolean> {\n        return this.driver.delete(key);\n    }\n\n    /**\n     * Renames a file\n     */\n    rename(sourceKey: string, targetKey: string): Promise<boolean> {\n        return this.driver.rename(sourceKey, targetKey);\n    }\n\n    /**\n     * Returns public file URL\n     */\n    getURL(key: string): string {\n        return this.driver.getURL(key);\n    }\n\n    /**\n     * Get file size (if supported)\n     */\n    getSize(key: string): Promise<?number> {\n        return this.driver.getSize(key);\n    }\n\n    /**\n     * Returns content type\n     */\n    getContentType(key: string): Promise<?string> {\n        return this.driver.getContentType(key);\n    }\n\n    /**\n     * Get absolute file path (if supported)\n     */\n    getAbsolutePath(key: string): Promise<string> {\n        return this.driver.getAbsolutePath(key);\n    }\n}\n\nexport default Storage;\n"]}