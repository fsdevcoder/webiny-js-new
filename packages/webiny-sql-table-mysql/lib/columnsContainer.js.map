{"version":3,"sources":["../src/columnsContainer.js"],"names":["ColumnsContainer","bigInt","column","newColumnName","arguments","columns","push","blob","char","date","dateTime","decimal","double","enum","float","int","json","longBlob","longText","mediumBlob","mediumInt","mediumText","smallInt","text","time","timestamp","tinyInt","tinyText","varChar","year"],"mappings":"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","file":"columnsContainer.js","sourcesContent":["// @flow\nimport { ColumnsContainer as BaseContainer } from \"webiny-sql-table\";\n\nimport {\n    BigIntColumn,\n    BlobColumn,\n    CharColumn,\n    DateColumn,\n    DateTimeColumn,\n    DecimalColumn,\n    DoubleColumn,\n    EnumColumn,\n    FloatColumn,\n    IntColumn,\n    JSONColumn,\n    LongBlobColumn,\n    LongTextColumn,\n    MediumBlobColumn,\n    MediumIntColumn,\n    MediumTextColumn,\n    SmallIntColumn,\n    TextColumn,\n    TimeColumn,\n    TimestampColumn,\n    TinyIntColumn,\n    TinyTextColumn,\n    VarCharColumn,\n    YearColumn\n} from \"./columns\";\n\n/**\n * Contains basic columns. If needed, this class can be extended to add additional columns,\n * and then be set as a new columns container as the default one.\n */\nclass ColumnsContainer extends BaseContainer {\n    bigInt(): BigIntColumn {\n        const column = new BigIntColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    blob(): BlobColumn {\n        const column = new BlobColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    char(): CharColumn {\n        const column = new CharColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    date(): DateColumn {\n        const column = new DateColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    dateTime(): DateTimeColumn {\n        const column = new DateTimeColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    decimal(): DecimalColumn {\n        const column = new DecimalColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    double(): DoubleColumn {\n        const column = new DoubleColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    enum(): EnumColumn {\n        const column = new EnumColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    float(): FloatColumn {\n        const column = new FloatColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    int(): IntColumn {\n        const column = new IntColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    json(): JSONColumn {\n        const column = new JSONColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    longBlob(): LongBlobColumn {\n        const column = new LongBlobColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    longText(): LongTextColumn {\n        const column = new LongTextColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    mediumBlob(): MediumBlobColumn {\n        const column = new MediumBlobColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    mediumInt(): MediumIntColumn {\n        const column = new MediumIntColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    mediumText(): MediumTextColumn {\n        const column = new MediumTextColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    smallInt(): SmallIntColumn {\n        const column = new SmallIntColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    text(): TextColumn {\n        const column = new TextColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    time(): TimeColumn {\n        const column = new TimeColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    timestamp(): TimestampColumn {\n        const column = new TimestampColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    tinyInt(): TinyIntColumn {\n        const column = new TinyIntColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    tinyText(): TinyTextColumn {\n        const column = new TinyTextColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n\n    varChar(): VarCharColumn {\n        const column = new VarCharColumn(this.newColumnName, this, Array.from(arguments));\n        this.columns.push(column);\n        return column;\n    }\n\n    year(): YearColumn {\n        const column = new YearColumn(this.newColumnName, this);\n        this.columns.push(column);\n        return column;\n    }\n}\n\nexport default ColumnsContainer;\n"]}