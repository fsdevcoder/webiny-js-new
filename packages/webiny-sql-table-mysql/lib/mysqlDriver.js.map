{"version":3,"sources":["../src/mysqlDriver.js"],"names":["MySQLDriver","constructor","options","connection","setConnection","getConnection","getColumnsClass","getIndexesClass","create","table","alter","drop","truncate","sync","hasTable","execute","getName","length","sql","query","Error"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAIA,MAAMA,WAAN,gCAAiC;;AAG7BC,gBAAYC,UAA8B,EAA1C,EAA8C;AAC1C;AACA,aAAKC,UAAL,GAAkB,IAAlB;AACAD,gBAAQC,UAAR,IAAsB,KAAKC,aAAL,CAAmBF,QAAQC,UAA3B,CAAtB;AACH;;AAEDE,oBAAkC;AAC9B,eAAO,KAAKF,UAAZ;AACH;;AAEDC,kBAAcD,UAAd,EAA8C;AAC1C,aAAKA,UAAL,GAAkB,2CAAoBA,UAApB,CAAlB;AACA,eAAO,IAAP;AACH;;AAEDG,sBAA2C;AACvC;AACH;;AAEDC,sBAA2C;AACvC;AACH;;AAED;AACMC,UAAN,CAAaC,KAAb,EAA2BP,OAA3B,EAAoD;AAAA;AAChD,mBAAO,sBAAYO,KAAZ,CAAP;AADgD;AAEnD;;AAED;AACMC,SAAN,CAAYD,KAAZ,EAA0BP,OAA1B,EAAmD;AAAA;AAC/C,mBAAO,qBAAWO,KAAX,CAAP;AAD+C;AAElD;;AAED;AACME,QAAN,CAAWF,KAAX,EAAyBP,OAAzB,EAAkD;AAAA;AAC9C,mBAAO,oBAAUO,KAAV,CAAP;AAD8C;AAEjD;;AAED;AACMG,YAAN,CAAeH,KAAf,EAA6BP,OAA7B,EAAsD;AAAA;AAClD,mBAAO,wBAAcO,KAAd,CAAP;AADkD;AAErD;;AAED;AACMI,QAAN,CAAWJ,KAAX,EAAyBP,OAAzB,EAAkD;AAAA;;AAAA;AAC9C,kBAAMY,WAAW,MAAM,MAAKC,OAAL,CAAc,qBAAoBN,MAAMO,OAAN,EAAgB,GAAlD,CAAvB;AACA,gBAAIF,SAASG,MAAb,EAAqB;AACjB;AACA;AACA,uBAAO,EAAP;AACH;;AAED;AACA,mBAAO,MAAKT,MAAL,CAAYC,KAAZ,EAAmBP,OAAnB,CAAP;AAT8C;AAUjD;;AAEKa,WAAN,CAAcG,GAAd,EAA2C;AAAA;;AAAA;AACvC,kBAAMf,aAAa,OAAKE,aAAL,EAAnB;AACA,gBAAIF,4DAAJ,EAA2C;AACvC,uBAAO,MAAMA,WAAWgB,KAAX,CAAiBD,GAAjB,CAAb;AACH;;AAED,kBAAME,MAAM,2BAAN,CAAN;AANuC;AAO1C;AAlE4B;kBAqElBpB,W","file":"mysqlDriver.js","sourcesContent":["// @flow\nimport ColumnsContainer from \"./columnsContainer\";\nimport IndexesContainer from \"./indexesContainer\";\nimport { Driver, Table } from \"webiny-sql-table\";\nimport { MySQLConnection } from \"webiny-mysql-connection\";\nimport { createTable, alterTable, truncateTable, dropTable } from \"./sql\";\nimport type { MySQLDriverOptions, MySQL } from \"./../types\";\nimport type { CommandOptions } from \"webiny-sql-table/types\";\n\nclass MySQLDriver extends Driver {\n    connection: ?MySQLConnection;\n\n    constructor(options: MySQLDriverOptions = {}) {\n        super();\n        this.connection = null;\n        options.connection && this.setConnection(options.connection);\n    }\n\n    getConnection(): ?MySQLConnection {\n        return this.connection;\n    }\n\n    setConnection(connection: MySQL): MySQLDriver {\n        this.connection = new MySQLConnection(connection);\n        return this;\n    }\n\n    getColumnsClass(): Class<ColumnsContainer> {\n        return ColumnsContainer;\n    }\n\n    getIndexesClass(): Class<IndexesContainer> {\n        return IndexesContainer;\n    }\n\n    // eslint-disable-next-line\n    async create(table: Table, options: CommandOptions) {\n        return createTable(table);\n    }\n\n    // eslint-disable-next-line\n    async alter(table: Table, options: CommandOptions) {\n        return alterTable(table);\n    }\n\n    // eslint-disable-next-line\n    async drop(table: Table, options: CommandOptions) {\n        return dropTable(table);\n    }\n\n    // eslint-disable-next-line\n    async truncate(table: Table, options: CommandOptions) {\n        return truncateTable(table);\n    }\n\n    // eslint-disable-next-line\n    async sync(table: Table, options: CommandOptions) {\n        const hasTable = await this.execute(`SHOW TABLES LIKE '${table.getName()}'`);\n        if (hasTable.length) {\n            // Table exist, we must alter the table.\n            // const tableStructure = await this.execute(`DESCRIBE ${table.getName()}`);\n            return \"\";\n        }\n\n        // Table does not exist, we can safely return SQL for new table creation create a new table.\n        return this.create(table, options);\n    }\n\n    async execute(sql: string): Promise<mixed> {\n        const connection = this.getConnection();\n        if (connection instanceof MySQLConnection) {\n            return await connection.query(sql);\n        }\n\n        throw Error(\"MySQL connection not set.\");\n    }\n}\n\nexport default MySQLDriver;\n"]}