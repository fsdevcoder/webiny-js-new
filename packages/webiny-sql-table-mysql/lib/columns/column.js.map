{"version":3,"sources":["../../src/columns/column.js"],"names":["Column","constructor","name","columnsContainer","columnArguments","default","undefined","notNull","unsigned","autoIncrement","getSQLValue","sql","getName","getType","hasArguments","getArguments","map","item","join","getUnsigned","getNotNull","getDefault","value","String","getAutoIncrement","setDefault","defaultValue","setNotNull","arguments","Array","isArray","length","setUnsigned","setAutoIncrement","getObjectValue","type"],"mappings":";;;;;;AACA;;AACA;;;;;;AAEA,MAAMA,MAAN,gCAAgC;;AAM5BC,gBACIC,IADJ,EAEIC,gBAFJ,EAGIC,kBAA2C,EAH/C,EAIE;AACE,cAAMF,IAAN,EAAYC,gBAAZ,EAA8BC,eAA9B;;AAEA;;;;AAIA,aAAKC,OAAL,GAAeC,SAAf;;AAEA;;;;AAIA,aAAKC,OAAL,GAAe,KAAf;;AAEA;;;;AAIA,aAAKC,QAAL,GAAgB,IAAhB;;AAEA;;;;AAIA,aAAKC,aAAL,GAAqB,IAArB;AACH;;AAED;;;;AAIAC,kBAAc;AACV,YAAIC,MAAO,KAAI,KAAKC,OAAL,EAAe,MAAK,KAAKC,OAAL,EAAe,EAAlD;;AAEA,YAAI,KAAKC,YAAL,EAAJ,EAAyB;AACrBH,mBAAQ,IAAG,KAAKI,YAAL,GACNC,GADM,CACFC,QAAQ;AACT,uBAAO,OAAOA,IAAP,KAAgB,QAAhB,GAA4B,IAAGA,IAAK,GAApC,GAAyCA,IAAhD;AACH,aAHM,EAINC,IAJM,CAID,IAJC,CAIK,GAJhB;AAKH;;AAED,YAAI,KAAKC,WAAL,OAAuB,IAA3B,EAAiC;AAC7BR,mBAAO,WAAP;AACH;;AAED,YAAI,KAAKS,UAAL,OAAsB,IAA1B,EAAgC;AAC5BT,mBAAO,WAAP;AACH;;AAED,YAAI,OAAO,KAAKU,UAAL,EAAP,KAA6B,WAAjC,EAA8C;AAC1C,kBAAMC,QAAQ,KAAKD,UAAL,EAAd;AACA,gBAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BX,uBAAQ,YAAWW,KAAM,EAAzB;AACH,aAFD,MAEO,IAAIA,UAAU,IAAd,EAAoB;AACvBX,uBAAQ,eAAR;AACH,aAFM,MAEA;AACHA,uBAAQ,aAAYY,OAAOD,KAAP,CAAc,GAAlC;AACH;AACJ;;AAED,YAAI,KAAKE,gBAAL,EAAJ,EAA6B;AACzBb,mBAAQ,iBAAR;AACH;;AAED,eAAOA,GAAP;AACH;;AAED;;;AAGAc,eAAWC,YAAX,EAAwC;AACpC,aAAKrB,OAAL,GAAeqB,YAAf;AACA,eAAO,IAAP;AACH;;AAED;;;AAGAL,iBAAoB;AAChB,eAAO,KAAKhB,OAAZ;AACH;;AAEDsB,eAAWpB,UAAmB,IAA9B,EAA4C;AACxC,aAAKA,OAAL,GAAeA,OAAf;AACA,eAAO,IAAP;AACH;;AAEDa,iBAAsB;AAClB,eAAO,KAAKb,OAAZ;AACH;;AAEDQ,mBAAuC;AACnC,eAAO,KAAKa,SAAZ;AACH;;AAEDd,mBAAwB;AACpB,eAAOe,MAAMC,OAAN,CAAc,KAAKF,SAAnB,KAAiC,KAAKA,SAAL,CAAeG,MAAf,GAAwB,CAAhE;AACH;;AAEDC,gBAAYxB,WAAoB,IAAhC,EAA8C;AAC1C,aAAKA,QAAL,GAAgBA,QAAhB;AACA,eAAO,IAAP;AACH;;AAEDW,kBAAwB;AACpB,eAAO,KAAKX,QAAZ;AACH;;AAEDyB,qBAAiBxB,gBAAyB,IAA1C,EAAwD;AACpD,aAAKA,aAAL,GAAqBA,aAArB;AACA,eAAO,IAAP;AACH;;AAEDe,uBAA6B;AACzB,eAAO,KAAKf,aAAZ;AACH;;AAEDyB,qBAAqB;AACjB,eAAO;AACHhC,kBAAM,KAAKU,OAAL,EADH;AAEHuB,kBAAM,KAAKtB,OAAL,EAFH;AAGHe,uBAAW,KAAKb,YAAL,EAHR;AAIHV,qBAAS,KAAKgB,UAAL,EAJN;AAKHb,sBAAU,KAAKW,WAAL,EALP;AAMHV,2BAAe,KAAKe,gBAAL,EANZ;AAOHjB,qBAAS,KAAKa,UAAL;AAPN,SAAP;AASH;AA3I2B;;kBA8IjBpB,M","file":"column.js","sourcesContent":["// @flow\nimport { Column as BaseColumn } from \"webiny-sql-table\";\nimport ColumnsContainer from \"../columnsContainer\";\n\nclass Column extends BaseColumn {\n    default: mixed;\n    notNull: boolean;\n    unsigned: ?boolean;\n    autoIncrement: ?boolean;\n\n    constructor(\n        name: string,\n        columnsContainer: ColumnsContainer,\n        columnArguments: ?Array<string | number> = []\n    ) {\n        super(name, columnsContainer, columnArguments);\n\n        /**\n         * Column's default value.\n         * @var null\n         */\n        this.default = undefined;\n\n        /**\n         * Defines if column accept NULL values.\n         * @var null\n         */\n        this.notNull = false;\n\n        /**\n         * Only for numeric columns - defines if column can receive negative values or not.\n         * @type {null}\n         */\n        this.unsigned = null;\n\n        /**\n         * Only for numeric columns - defines if column must be auto-incremented or not.\n         * @type {null}\n         */\n        this.autoIncrement = null;\n    }\n\n    /**\n     * Returns SQL definition if column.\n     * @returns {string}\n     */\n    getSQLValue() {\n        let sql = `\\`${this.getName()}\\` ${this.getType()}`;\n\n        if (this.hasArguments()) {\n            sql += `(${this.getArguments()\n                .map(item => {\n                    return typeof item === \"string\" ? `'${item}'` : item;\n                })\n                .join(\", \")})`;\n        }\n\n        if (this.getUnsigned() === true) {\n            sql += \" unsigned\";\n        }\n\n        if (this.getNotNull() === true) {\n            sql += \" NOT NULL\";\n        }\n\n        if (typeof this.getDefault() !== \"undefined\") {\n            const value = this.getDefault();\n            if (typeof value === \"number\") {\n                sql += ` DEFAULT ${value}`;\n            } else if (value === null) {\n                sql += ` DEFAULT NULL`;\n            } else {\n                sql += ` DEFAULT '${String(value)}'`;\n            }\n        }\n\n        if (this.getAutoIncrement()) {\n            sql += ` AUTO_INCREMENT`;\n        }\n\n        return sql;\n    }\n\n    /**\n     * Sets default column value.\n     */\n    setDefault(defaultValue: mixed): Column {\n        this.default = defaultValue;\n        return this;\n    }\n\n    /**\n     * Returns default column value.\n     */\n    getDefault(): mixed {\n        return this.default;\n    }\n\n    setNotNull(notNull: boolean = true): Column {\n        this.notNull = notNull;\n        return this;\n    }\n\n    getNotNull(): boolean {\n        return this.notNull;\n    }\n\n    getArguments(): Array<string | number> {\n        return this.arguments;\n    }\n\n    hasArguments(): boolean {\n        return Array.isArray(this.arguments) && this.arguments.length > 0;\n    }\n\n    setUnsigned(unsigned: boolean = true): Column {\n        this.unsigned = unsigned;\n        return this;\n    }\n\n    getUnsigned(): ?boolean {\n        return this.unsigned;\n    }\n\n    setAutoIncrement(autoIncrement: boolean = true): Column {\n        this.autoIncrement = autoIncrement;\n        return this;\n    }\n\n    getAutoIncrement(): ?boolean {\n        return this.autoIncrement;\n    }\n\n    getObjectValue(): {} {\n        return {\n            name: this.getName(),\n            type: this.getType(),\n            arguments: this.getArguments(),\n            default: this.getDefault(),\n            unsigned: this.getUnsigned(),\n            autoIncrement: this.getAutoIncrement(),\n            notNull: this.getNotNull()\n        };\n    }\n}\n\nexport default Column;\n"]}