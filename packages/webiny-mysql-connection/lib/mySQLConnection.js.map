{"version":3,"sources":["../src/mySQLConnection.js"],"names":["MySQLConnection","constructor","instance","validateMySQLInstance","getInstance","isConnectionPool","isConnection","Error","query","sql","results","queries","Array","resolve","reject","getConnection","error","connection","__executeQueriesWithConnection","e","release","length","i","push","__executeQueryWithConnection"],"mappings":";;;;;;;;;;;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,eAAN,CAAsB;;AAGlBC,gBAAYC,QAAZ,EAAmD;AAC/C;AACA,aAAKD,WAAL,CAAiBE,qBAAjB,CAAuCD,QAAvC;;AAEA;AACA,aAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAEDE,kBAA2C;AACvC,eAAO,KAAKF,QAAZ;AACH;;AAEDG,uBAA4B;AACxB,eAAO,KAAKD,WAAL,4BAAP;AACH;;AAEDE,mBAAwB;AACpB,eAAO,KAAKF,WAAL,kCAAP;AACH;;AAED,WAAOD,qBAAP,CAA6BD,QAA7B,EAAoD;AAChD,YAAIA,sCAAiCA,wCAArC,EAA0E;AACtE;AACH;AACD,cAAMK,MAAM,kDAAN,CAAN;AACH;;AAEDC,UAAMC,GAAN,EAA8C;AAAA;;AAC1C,YAAIC,UAAwB,EAA5B;AAAA,YACIC,UAAyBF,eAAeG,KAAf,GAAuBH,GAAvB,GAA6B,CAACA,GAAD,CAD1D;;AAGA,eAAO;AAAA,uDAAY,WAAOI,OAAP,EAAgBC,MAAhB,EAA2B;AAC1C,oBAAI,MAAKT,gBAAL,EAAJ,EAA6B;AACzB,2BAAO,MAAKD,WAAL,GAAmBW,aAAnB;AAAA,oEAAiC,WAAOC,KAAP,EAAcC,UAAd,EAA6B;AACjE,gCAAID,KAAJ,EAAW;AACPF,uCAAOE,KAAP;AACA;AACH;;AAED,gCAAI;AACAN,0CAAU,MAAM,MAAKQ,8BAAL,CAAoCD,UAApC,EAAgDN,OAAhD,CAAhB;AACH,6BAFD,CAEE,OAAOQ,CAAP,EAAU;AACRF,2CAAWG,OAAX;AACA,uCAAON,OAAOK,CAAP,CAAP;AACH;;AAEDF,uCAAWG,OAAX;AACAT,oCAAQU,MAAR,KAAmB,CAAnB,GAAuBR,QAAQH,QAAQ,CAAR,CAAR,CAAvB,GAA6CG,QAAQH,OAAR,CAA7C;AACH,yBAfM;;AAAA;AAAA;AAAA;AAAA,yBAAP;AAgBH;;AAED;AACA,oBAAI;AACAA,8BAAU,MAAM,MAAKQ,8BAAL,CAAoC,MAAKd,WAAL,EAApC,EAAwDO,OAAxD,CAAhB;AACAA,4BAAQU,MAAR,KAAmB,CAAnB,GAAuBR,QAAQH,QAAQ,CAAR,CAAR,CAAvB,GAA6CG,QAAQH,OAAR,CAA7C;AACH,iBAHD,CAGE,OAAOS,CAAP,EAAU;AACRL,2BAAOK,CAAP;AACH;AACJ,aA3BM;;AAAA;AAAA;AAAA;AAAA,aAAP;AA4BH;;AAEKD,kCAAN,CAAqCD,UAArC,EAAkEN,OAAlE,EAA0F;AAAA;;AAAA;AACtF,kBAAMD,UAAU,EAAhB;AACA,iBAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIX,QAAQU,MAA5B,EAAoCC,GAApC,EAAyC;AACrCZ,wBAAQa,IAAR,EAAa,MAAM,OAAKC,4BAAL,CAAkCP,UAAlC,EAA8CN,QAAQW,CAAR,CAA9C,CAAnB;AACH;AACD,mBAAOZ,OAAP;AALsF;AAMzF;;AAEKc,gCAAN,CACIP,UADJ,EAEIR,GAFJ,EAGkC;AAAA;AAC9B,mBAAO,sBAAY,UAACI,OAAD,EAAUC,MAAV,EAAqB;AACpCG,2BAAWT,KAAX,CAAiBC,GAAjB,EAAsB,UAACO,KAAD,EAAQN,OAAR,EAAoB;AACtC,wBAAIM,KAAJ,EAAW;AACP,+BAAOF,OAAOE,KAAP,CAAP;AACH;;AAEDH,4BAAQH,OAAR;AACH,iBAND;AAOH,aARM,CAAP;AAD8B;AAUjC;AArFiB;;kBAwFPV,e","file":"mySQLConnection.js","sourcesContent":["// @flow\nimport PoolClass from \"mysql/lib/Pool\";\nimport ConnectionClass from \"mysql/lib/Connection\";\n\nclass MySQLConnection {\n    instance: PoolClass | ConnectionClass;\n\n    constructor(instance: PoolClass | ConnectionClass) {\n        // Will throw an error if an invalid instance was passed.\n        this.constructor.validateMySQLInstance(instance);\n\n        // If everything went okay, let's assign and continue.\n        this.instance = instance;\n    }\n\n    getInstance(): PoolClass | ConnectionClass {\n        return this.instance;\n    }\n\n    isConnectionPool(): boolean {\n        return this.getInstance() instanceof PoolClass;\n    }\n\n    isConnection(): boolean {\n        return this.getInstance() instanceof ConnectionClass;\n    }\n\n    static validateMySQLInstance(instance: mixed): void {\n        if (instance instanceof PoolClass || instance instanceof ConnectionClass) {\n            return;\n        }\n        throw Error(\"A valid MySQL connection or pool must be passed.\");\n    }\n\n    query(sql: string | Array<any>): Promise<any> {\n        let results: Array<mixed> = [],\n            queries: Array<string> = sql instanceof Array ? sql : [sql];\n\n        return new Promise(async (resolve, reject) => {\n            if (this.isConnectionPool()) {\n                return this.getInstance().getConnection(async (error, connection) => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n\n                    try {\n                        results = await this.__executeQueriesWithConnection(connection, queries);\n                    } catch (e) {\n                        connection.release();\n                        return reject(e);\n                    }\n\n                    connection.release();\n                    queries.length === 1 ? resolve(results[0]) : resolve(results);\n                });\n            }\n\n            // We don't close the passed connection, because it might be used outside of the scope of entity.\n            try {\n                results = await this.__executeQueriesWithConnection(this.getInstance(), queries);\n                queries.length === 1 ? resolve(results[0]) : resolve(results);\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async __executeQueriesWithConnection(connection: ConnectionClass, queries: Array<string>) {\n        const results = [];\n        for (let i = 0; i < queries.length; i++) {\n            results.push(await this.__executeQueryWithConnection(connection, queries[i]));\n        }\n        return results;\n    }\n\n    async __executeQueryWithConnection(\n        connection: ConnectionClass,\n        sql: string | Array<string>\n    ): Promise<Array<mixed> | Object> {\n        return new Promise((resolve, reject) => {\n            connection.query(sql, (error, results) => {\n                if (error) {\n                    return reject(error);\n                }\n\n                resolve(results);\n            });\n        });\n    }\n}\n\nexport default MySQLConnection;\n"]}