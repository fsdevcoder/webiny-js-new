{"version":3,"sources":["../../../src/entities/helpers/onSetFactory.js"],"names":["EntityClass","entities","Array","isArray","i","length","value","query","id","isId","slug","findOne","filter","Boolean"],"mappings":";;;;;;;;;;AAQA;;;;kBAEeA,eAAe;AAC1B;AAAA,mDAAO,WAAMC,QAAN,EAAkB;AACrB,gBAAIC,MAAMC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AACzB,qBAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIH,SAASI,MAA7B,EAAqCD,GAArC,EAA0C;AACtC,wBAAIE,QAAQL,SAASG,CAAT,CAAZ;AACA,wBAAIE,iBAAiBN,WAArB,EAAkC;AAC9B;AACH;AACD,wBAAIO,QAAQ,EAAEC,IAAIF,KAAN,EAAZ;AACA;AACA,wBAAI,CAACN,YAAYS,IAAZ,CAAiBH,KAAjB,CAAL,EAA8B;AAC1B,4BAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3BC,oCAAQ,EAAEG,MAAMJ,KAAR,EAAR;AACH,yBAFD,MAEO,IAAIA,MAAME,EAAV,EAAc;AACjBD,oCAAQ,EAAEC,IAAIF,MAAME,EAAZ,EAAR;AACH,yBAFM,MAEA,IAAIF,MAAMI,IAAV,EAAgB;AACnBH,oCAAQ,EAAEG,MAAMJ,MAAMI,IAAd,EAAR;AACH;AACJ;;AAED;AACAT,6BAASG,CAAT,IAAc,MAAMJ,YAAYW,OAAZ,CAAoB,EAAEJ,KAAF,EAApB,CAApB;AACH;;AAED,uBAAO,mCAAqBN,SAASW,MAAT,CAAgBC,OAAhB,CAArB,CAAP;AACH;;AAED,mBAAOZ,QAAP;AACH,SA3BD;;AAAA;AAAA;AAAA;AAAA;AA4BH,C,EAvCD","file":"onSetFactory.js","sourcesContent":["/**\n * Create onSet callback for the specified Entity class.\n * The callback is used on `entities` attributes for Role, RoleGroup and Permission entities\n * to handle different types of data: id, slug, {id}, {slug}.\n *\n * @param EntityClass\n * @returns {function(*=)}\n */\nimport { EntityCollection } from \"webiny-entity\";\n\nexport default EntityClass => {\n    return async entities => {\n        if (Array.isArray(entities)) {\n            for (let i = 0; i < entities.length; i++) {\n                let value = entities[i];\n                if (value instanceof EntityClass) {\n                    continue;\n                }\n                let query = { id: value };\n                // If not DB ids - load entities by slugs\n                if (!EntityClass.isId(value)) {\n                    if (typeof value === \"string\") {\n                        query = { slug: value };\n                    } else if (value.id) {\n                        query = { id: value.id };\n                    } else if (value.slug) {\n                        query = { slug: value.slug };\n                    }\n                }\n\n                // TODO: ne bi htio loadati entitet tu jer to je samo populate\n                entities[i] = await EntityClass.findOne({ query });\n            }\n\n            return new EntityCollection(entities.filter(Boolean));\n        }\n\n        return entities;\n    };\n};\n"]}