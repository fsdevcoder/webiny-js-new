{"version":3,"sources":["../../src/entities/identity.entity.js"],"names":["Identity","constructor","attr","entities","identityId","setUsing","onGet","hasRole","role","roles","getRoles","i","length","slug","groups","roleGroups","group","groupRoles","concat","classId"],"mappings":";;;;;;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAIA;;;;;;;AAOA,MAAMA,QAAN,2BAAuD;AACnDC,kBAAc;AACV;AACA,aAAKC,IAAL,CAAU,OAAV,EACKC,QADL,iBACoB,UADpB,EACgC,MAAM,KAAKC,UAD3C,EAEKC,QAFL,0BAGKC,KAHL,CAGW,2CAHX;;AAKA,aAAKJ,IAAL,CAAU,YAAV,EACKC,QADL,sBACyB,UADzB,EACqC,MAAM,KAAKC,UADhD,EAEKC,QAFL,+BAGKC,KAHL,CAGW,gDAHX;AAIH;;AAED;;;;;AAKA;AACMC,WAAN,CAAcC,IAAd,EAA8C;AAAA;;AAAA;AAC1C,kBAAMC,QAAQ,MAAM,MAAKC,QAAL,EAApB;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACnC,oBAAIF,MAAME,CAAN,EAASE,IAAT,KAAkBL,IAAtB,EAA4B;AACxB,2BAAO,IAAP;AACH;AACJ;AACD,mBAAO,KAAP;AAP0C;AAQ7C;;AAED;;;;AAIME,YAAN,GAAuC;AAAA;;AAAA;AACnC,gBAAID,QAAQ,CAAC,IAAI,MAAM,OAAKA,KAAf,CAAD,CAAZ;AACA,kBAAMK,SAAS,MAAM,OAAKC,UAA1B;AACA,iBAAK,IAAIJ,IAAI,CAAb,EAAgBA,IAAIG,OAAOF,MAA3B,EAAmCD,GAAnC,EAAwC;AACpC,sBAAMK,QAAQF,OAAOH,CAAP,CAAd;AACA,sBAAMM,aAAa,MAAMD,MAAMP,KAA/B;AACAA,wBAAQA,MAAMS,MAAN,CAAa,GAAGD,UAAhB,CAAR;AACH;;AAED,mBAAOR,KAAP;AATmC;AAUtC;AA5CkD;;AA+CvDT,SAASmB,OAAT,GAAmB,mBAAnB;;kBAEenB,Q","file":"identity.entity.js","sourcesContent":["// @flow\nimport { Entity } from \"webiny-api\";\nimport Role from \"./role.entity\";\nimport RoleGroup from \"./roleGroup.entity\";\nimport Identity2Role from \"./identity2Role.entity\";\nimport Identity2RoleGroup from \"./identity2RoleGroup.entity\";\nimport onSetFactory from \"./helpers/onSetFactory\";\n\nimport type { IAuthorizable } from \"../../types\";\n\n/**\n * Identity class is the base class for all identity classes.\n * It is used to create your API user classes.\n *\n * @property {EntityCollection<Role>} roles\n * @property {EntityCollection<RoleGroup>} roleGroups\n */\nclass Identity extends Entity implements IAuthorizable {\n    constructor() {\n        super();\n        this.attr(\"roles\")\n            .entities(Role, \"identity\", () => this.identityId)\n            .setUsing(Identity2Role)\n            .onGet(onSetFactory(Role));\n\n        this.attr(\"roleGroups\")\n            .entities(RoleGroup, \"identity\", () => this.identityId)\n            .setUsing(Identity2RoleGroup)\n            .onGet(onSetFactory(RoleGroup));\n    }\n\n    /**\n     * Checks whether the user has the specified role.\n     * @param {string} role\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line\n    async hasRole(role: string): Promise<boolean> {\n        const roles = await this.getRoles();\n        for (let i = 0; i < roles.length; i++) {\n            if (roles[i].slug === role) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns all user's roles.\n     * @returns {Array<Role>} All roles assigned to the user.\n     */\n    async getRoles(): Promise<Array<Role>> {\n        let roles = [...(await this.roles)];\n        const groups = await this.roleGroups;\n        for (let i = 0; i < groups.length; i++) {\n            const group = groups[i];\n            const groupRoles = await group.roles;\n            roles = roles.concat(...groupRoles);\n        }\n\n        return roles;\n    }\n}\n\nIdentity.classId = \"Security.Identity\";\n\nexport default Identity;\n"]}