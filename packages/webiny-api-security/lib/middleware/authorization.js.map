{"version":3,"sources":["../../src/middleware/authorization.js"],"names":["params","next","req","matchedApiMethod","services","get","canExecute","getApiMethod","identity"],"mappings":";;;;;;;;;;AACA;;;;kBAGe,MAAM;AACjB;;;;;;;;;;;AAWA;AAAA,mDAAO,WACHA,MADG,EAEHC,IAFG,EAGF;AACD,kBAAM,EAAEC,GAAF,EAAOC,gBAAP,KAA4BH,MAAlC;AACA,kBAAM,eAAII,QAAJ,CACDC,GADC,CACG,eADH,EAEDC,UAFC,CAEUH,iBAAiBI,YAAjB,EAFV,EAE2CL,IAAIM,QAF/C,CAAN;AAGAP;AACH,SATD;;AAAA;AAAA;AAAA;AAAA;AAUH,C","file":"authorization.js","sourcesContent":["// @flow\nimport { app } from \"webiny-api\";\nimport type { MatchedApiMethod } from \"webiny-api\";\n\nexport default () => {\n    /**\n     * Authorization middleware.\n     * Checks if request identity is authorized to execute the matched API method.\n     *\n     * @param {Object} params\n     * @param {Request} params.req\n     * @param {ApiMethod} params.apiMethod\n     * @param {Api} params.app\n     * @param next\n     * @return {Promise<void>}\n     */\n    return async (\n        params: { req: express$Request, matchedApiMethod: MatchedApiMethod },\n        next: Function\n    ) => {\n        const { req, matchedApiMethod } = params;\n        await app.services\n            .get(\"authorization\")\n            .canExecute(matchedApiMethod.getApiMethod(), req.identity);\n        next();\n    };\n};\n"]}