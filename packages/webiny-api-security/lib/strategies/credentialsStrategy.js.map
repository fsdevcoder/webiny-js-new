{"version":3,"sources":["../../src/strategies/credentialsStrategy.js"],"names":["options","error","INVALID_CREDENTIALS","config","credentials","req","username","body","password","usernameAttribute","identity","resolve","reject","instance","findOne","query","compare","err","res"],"mappings":";;;;;;;;;;;;;;;;;;AACA;;;;AAEA;;;;;;AAEA;;;;kBAIe,CAACA,UAAkE,EAAnE,KAA0E;AACrF,UAAMC,QAAQ,kCACV,sBADU,EAEV,8BAAoBC,mBAFV,CAAd;;AAKA,UAAMC,mCAAcH,OAAd,CAAN;;AAEA;AACA,QAAI,OAAOG,OAAOC,WAAd,KAA8B,UAAlC,EAA8C;AAC1CD,eAAOC,WAAP,GAAqBC,OAAO;AACxB,mBAAO;AACHC,0BAAUD,IAAIE,IAAJ,CAASD,QADhB;AAEHE,0BAAUH,IAAIE,IAAJ,CAASC;AAFhB,aAAP;AAIH,SALD;AAMH;;AAED,QAAI,CAACL,OAAOM,iBAAZ,EAA+B;AAC3BN,eAAOM,iBAAP,GAA2B,UAA3B;AACH;;AAED;;;;;;AAMA,WAAO,CAACJ,GAAD,EAAuBK,QAAvB,KAAwE;AAC3E,eAAO;AAAA,uDAAY,WAAOC,OAAP,EAAgBC,MAAhB,EAA2B;AAC1C,sBAAM,EAAEN,QAAF,EAAYE,QAAZ,KAAyBL,OAAOC,WAAP,CAAmBC,GAAnB,CAA/B;AACA,sBAAMQ,WAAW,MAAMH,SAASI,OAAT,CAAiB;AACpCC,2BAAO,EAAE,CAACZ,OAAOM,iBAAR,GAA4BH,QAA9B;AAD6B,iBAAjB,CAAvB;;AAIA,oBAAI,CAACO,QAAL,EAAe;AACX,2BAAOD,OAAOX,KAAP,CAAP;AACH;;AAED,mCAAOe,OAAP,CAAeR,QAAf,EAAyBK,SAASL,QAAlC,EAA4C,UAACS,GAAD,EAAMC,GAAN,EAAc;AACtD,wBAAID,OAAO,CAACC,GAAZ,EAAiB;AACb,+BAAON,OAAOX,KAAP,CAAP;AACH;;AAEDU,4BAAQE,QAAR;AACH,iBAND;AAOH,aAjBM;;AAAA;AAAA;AAAA;AAAA,aAAP;AAkBH,KAnBD;AAoBH,C","file":"credentialsStrategy.js","sourcesContent":["// @flow\nimport bcrypt from \"bcryptjs\";\nimport type { Identity } from \"../index\";\nimport AuthenticationError from \"../services/authenticationError\";\n\n/**\n * Credentials strategy factory\n * @return {function(express$Request, Class<Identity>)}\n */\nexport default (options: { usernameAttribute?: string, credentials?: Function } = {}) => {\n    const error = new AuthenticationError(\n        \"Invalid credentials.\",\n        AuthenticationError.INVALID_CREDENTIALS\n    );\n\n    const config = { ...options };\n\n    // Default credentials provider\n    if (typeof config.credentials !== \"function\") {\n        config.credentials = req => {\n            return {\n                username: req.body.username,\n                password: req.body.password\n            };\n        };\n    }\n\n    if (!config.usernameAttribute) {\n        config.usernameAttribute = \"username\";\n    }\n\n    /**\n     * Credentials authentication strategy.\n     * It extracts credentials from request and tries loading the identity instance using the provided Identity class.\n     * @param req\n     * @param identity\n     */\n    return (req: express$Request, identity: Class<Identity>): Promise<Identity> => {\n        return new Promise(async (resolve, reject) => {\n            const { username, password } = config.credentials(req);\n            const instance = await identity.findOne({\n                query: { [config.usernameAttribute]: username }\n            });\n\n            if (!instance) {\n                return reject(error);\n            }\n\n            bcrypt.compare(password, instance.password, (err, res) => {\n                if (err || !res) {\n                    return reject(error);\n                }\n\n                resolve(instance);\n            });\n        });\n    };\n};\n"]}