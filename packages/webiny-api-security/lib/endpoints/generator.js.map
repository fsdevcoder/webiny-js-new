{"version":3,"sources":["../../src/endpoints/generator.js"],"names":["BaseEndpoint","config","authentication","Auth","init","api","identities","map","identity","Identity","authenticate","strategy","apiMethod","expiresOn","post","name","pattern","req","error","expiration","Date","Math","floor","getTime","token","createToken","toJSON","query","_fields","e","response","message","errorCode","statusCode","setPublic"],"mappings":";;;;;;;;;;AACA;;AACA;;;;AAGA;;;;;;kBAEe,CAACA,YAAD,EAAgCC,MAAhC,EAAgDC,cAAhD,KAAoF;AAC/F,WAAO,MAAMC,IAAN,SAAmBH,YAAnB,CAAgC;AACnCI,aAAKC,GAAL,EAAwB;AACpB,kBAAMD,IAAN,CAAWC,GAAX;;AAEA;AACAJ,mBAAOK,UAAP,CAAkBC,GAAlB,CAAsB,CAAC,EAAEC,UAAUC,QAAZ,EAAsBC,YAAtB,EAAD,KAA0C;AAC5D;AACAA,6BAAaH,GAAb,CAAiB,CAAC,EAAEI,QAAF,EAAYC,SAAZ,EAAuBC,SAAvB,EAAD,KAAwC;AACrDR,wBACKS,IADL,CACUF,UAAUG,IADpB,EAC0BH,UAAUI,OADpC;AAAA,mEAC6C,WAAO,EAAEC,GAAF,EAAP,EAAmB;AACxD,gCAAI;AACA,sCAAMT,WAAW,MAAMN,eAAeQ,YAAf,CACnBO,GADmB,EAEnBR,QAFmB,EAGnBE,QAHmB,CAAvB;;AAMA,sCAAMO,QAAS,gDAA+CP,QAAS,aAAvE;AACA,yDAAU,OAAOE,SAAP,KAAqB,UAA/B,EAA2CK,KAA3C;;AAEA,oCAAIC,aAAaN,UAAUI,GAAV,CAAjB;AACA,oCAAIE,sBAAsBC,IAA1B,EAAgC;AAC5BD,iDAAaE,KAAKC,KAAL,CAAWH,WAAWI,OAAX,KAAuB,IAAlC,CAAb;AACH;;AAED,uCAAO,2BAAgB;AACnBC,2CAAO,MAAMtB,eAAeuB,WAAf,CAA2BjB,QAA3B,EAAqCW,UAArC,CADM;AAEnBX,8CAAU,MAAMA,SAASkB,MAAT,CAAgBT,IAAIU,KAAJ,CAAUC,OAA1B,CAFG;AAGnBf,+CAAWM;AAHQ,iCAAhB,CAAP;AAKH,6BApBD,CAoBE,OAAOU,CAAP,EAAU;AACR,sCAAMC,WAAW,gCAAqB,EAArB,EAAyBD,EAAEE,OAA3B,CAAjB;AACA,oCAAIF,0CAAJ,EAAsC;AAClCC,6CAASE,SAAT,GAAqB,yBAArB;AACAF,6CAASG,UAAT,GAAsB,GAAtB;AACH,iCAHD,MAGO;AACHH,6CAASE,SAAT,GAAqB,oBAArB;AACAF,6CAASG,UAAT,GAAsB,GAAtB;AACH;AACD,uCAAOH,QAAP;AACH;AACJ,yBAjCL;;AAAA;AAAA;AAAA;AAAA,0BAkCKI,SAlCL;AAmCH,iBApCD;AAqCH,aAvCD;AAwCH;AA7CkC,KAAvC;AA+CH,C","file":"generator.js","sourcesContent":["// @flow\nimport { ApiResponse, ApiErrorResponse } from \"webiny-api\";\nimport invariant from \"invariant\";\nimport type { ApiContainer, Endpoint } from \"webiny-api\";\nimport type { IAuthentication } from \"../../types\";\nimport AuthenticationError from \"../services/authenticationError\";\n\nexport default (BaseEndpoint: Class<Endpoint>, config: Object, authentication: IAuthentication) => {\n    return class Auth extends BaseEndpoint {\n        init(api: ApiContainer) {\n            super.init(api);\n\n            // Create API methods for each identity\n            config.identities.map(({ identity: Identity, authenticate }) => {\n                // Create api methods for each strategy\n                authenticate.map(({ strategy, apiMethod, expiresOn }) => {\n                    api\n                        .post(apiMethod.name, apiMethod.pattern, async ({ req }) => {\n                            try {\n                                const identity = await authentication.authenticate(\n                                    req,\n                                    Identity,\n                                    strategy\n                                );\n\n                                const error = `\"expiresOn\" function must be configured for \"${strategy}\" strategy!`;\n                                invariant(typeof expiresOn === \"function\", error);\n\n                                let expiration = expiresOn(req);\n                                if (expiration instanceof Date) {\n                                    expiration = Math.floor(expiration.getTime() / 1000);\n                                }\n\n                                return new ApiResponse({\n                                    token: await authentication.createToken(identity, expiration),\n                                    identity: await identity.toJSON(req.query._fields),\n                                    expiresOn: expiration\n                                });\n                            } catch (e) {\n                                const response = new ApiErrorResponse({}, e.message);\n                                if (e instanceof AuthenticationError) {\n                                    response.errorCode = \"WBY_INVALID_CREDENTIALS\";\n                                    response.statusCode = 401;\n                                } else {\n                                    response.errorCode = \"WBY_INTERNAL_ERROR\";\n                                    response.statusCode = 500;\n                                }\n                                return response;\n                            }\n                        })\n                        .setPublic();\n                });\n            });\n        }\n    };\n};\n"]}