{"version":3,"sources":["../../src/services/authentication.js"],"names":["Authentication","constructor","config","createToken","identity","expiresOn","token","encode","verifyToken","decoded","decode","getIdentityClass","data","classId","UNKNOWN_IDENTITY","identityId","instance","findById","IDENTITY_INSTANCE_NOT_FOUND","authenticate","req","strategy","strategyFn","strategies","reject","UNKNOWN_STRATEGY","i","identities","length","getIdentityClasses","map","current"],"mappings":";;;;;;;;;;;;;;AACA;;AACA;;;;;;AAGA,MAAMA,cAAN,CAAgD;;AAS5CC,gBAAYC,MAAZ,EAA4B;AACxB,aAAKA,MAAL,GAAcA,MAAd;AACH;;AAED;;;;;AAKAC,gBAAYC,QAAZ,EAAgCC,SAAhC,EAAoE;AAChE,eAAO,KAAKH,MAAL,CAAYI,KAAZ,CAAkBC,MAAlB,CAAyBH,QAAzB,EAAmCC,SAAnC,CAAP;AACH;;AAED;;;;;AAKMG,eAAN,CAAkBF,KAAlB,EAAoD;AAAA;;AAAA;AAChD,kBAAMG,UAAU,MAAM,MAAKP,MAAL,CAAYI,KAAZ,CAAkBI,MAAlB,CAAyBJ,KAAzB,CAAtB;AACA,gBAAIF,WAAW,MAAKO,gBAAL,CAAsBF,QAAQG,IAAR,CAAaC,OAAnC,CAAf;;AAEA,gBAAI,CAACT,QAAL,EAAe;AACX,sBAAM,kCACD,qBAAoBK,QAAQG,IAAR,CAAaC,OAAQ,GADxC,EAEF,8BAAoBC,gBAFlB,EAGF,EAAED,SAASJ,QAAQG,IAAR,CAAaC,OAAxB,EAHE,CAAN;AAKH;;AAED,kBAAME,aAAaN,QAAQG,IAAR,CAAaG,UAAhC;AACA,kBAAMC,WAAW,MAAMZ,SAASa,QAAT,CAAkBF,UAAlB,CAAvB;AACA,gBAAI,CAACC,QAAL,EAAe;AACX,sBAAM,kCACD,eAAcD,UAAW,aADxB,EAEF,8BAAoBG,2BAFlB,CAAN;AAIH;;AAED,mBAAOF,QAAP;AArBgD;AAsBnD;;AAED;;;;;;;AAOAG,iBACIC,GADJ,EAEIhB,QAFJ,EAGIiB,QAHJ,EAIqB;AACjB,cAAMC,aAAa,KAAKpB,MAAL,CAAYqB,UAAZ,CAAuBF,QAAvB,CAAnB;AACA,YAAI,CAACC,UAAL,EAAiB;AACb,mBAAO,kBAAQE,MAAR,CACH,kCACK,aAAYH,QAAS,cAD1B,EAEI,8BAAoBI,gBAFxB,EAGI,EAAEJ,QAAF,EAHJ,CADG,CAAP;AAOH;;AAED,eAAOC,WAAWF,GAAX,EAAgBhB,QAAhB,CAAP;AACH;;AAED;;;;;AAKAO,qBAAiBE,OAAjB,EAA0D;AACtD,aAAK,IAAIa,IAAI,CAAb,EAAgBA,IAAI,KAAKxB,MAAL,CAAYyB,UAAZ,CAAuBC,MAA3C,EAAmDF,GAAnD,EAAwD;AACpD,gBAAI,KAAKxB,MAAL,CAAYyB,UAAZ,CAAuBD,CAAvB,EAA0BtB,QAA1B,CAAmCS,OAAnC,KAA+CA,OAAnD,EAA4D;AACxD,uBAAO,KAAKX,MAAL,CAAYyB,UAAZ,CAAuBD,CAAvB,EAA0BtB,QAAjC;AACH;AACJ;AACD,eAAO,IAAP;AACH;;AAED;;;;AAIAyB,yBAAoD;AAChD,eAAO,KAAK3B,MAAL,CAAYyB,UAAZ,CAAuBG,GAAvB,CAA2BC,WAAW;AACzC,mBAAOA,QAAQ3B,QAAf;AACH,SAFM,CAAP;AAGH;AAnG2C;;kBAsGjCJ,c","file":"authentication.js","sourcesContent":["// @flow\nimport { Identity } from \"./../index\";\nimport AuthenticationError from \"./authenticationError\";\nimport type { IAuthentication, IToken } from \"./../../types\";\n\nclass Authentication implements IAuthentication {\n    config: {\n        token: IToken,\n        strategies: {\n            [name: string]: (req: express$Request, identity: Class<Identity>) => Promise<Identity>\n        },\n        identities: Array<Object>\n    };\n\n    constructor(config: Object) {\n        this.config = config;\n    }\n\n    /**\n     * Create an authentication token for the given user\n     * @param identity\n     * @param expiresOn\n     */\n    createToken(identity: Identity, expiresOn: number): Promise<string> {\n        return this.config.token.encode(identity, expiresOn);\n    }\n\n    /**\n     * Verify token and return Identity instance.\n     * @param {string} token\n     * @return {Promise<null|Identity>} Identity instance.\n     */\n    async verifyToken(token: string): Promise<Identity> {\n        const decoded = await this.config.token.decode(token);\n        let identity = this.getIdentityClass(decoded.data.classId);\n\n        if (!identity) {\n            throw new AuthenticationError(\n                `Unknown identity '${decoded.data.classId}'`,\n                AuthenticationError.UNKNOWN_IDENTITY,\n                { classId: decoded.data.classId }\n            );\n        }\n\n        const identityId = decoded.data.identityId;\n        const instance = await identity.findById(identityId);\n        if (!instance) {\n            throw new AuthenticationError(\n                `Identity ID ${identityId} not found!`,\n                AuthenticationError.IDENTITY_INSTANCE_NOT_FOUND\n            );\n        }\n\n        return instance;\n    }\n\n    /**\n     * Authenticate request.\n     * @param req\n     * @param identity\n     * @param strategy\n     * @returns {Identity} A valid system Identity.\n     */\n    authenticate(\n        req: express$Request,\n        identity: Class<Identity>,\n        strategy: string\n    ): Promise<Identity> {\n        const strategyFn = this.config.strategies[strategy];\n        if (!strategyFn) {\n            return Promise.reject(\n                new AuthenticationError(\n                    `Strategy \"${strategy}\" not found!`,\n                    AuthenticationError.UNKNOWN_STRATEGY,\n                    { strategy }\n                )\n            );\n        }\n\n        return strategyFn(req, identity);\n    }\n\n    /**\n     * Returns Identity class for given `classId`.\n     * @param {string} classId\n     * @returns {Class<Identity>} Identity class corresponding to given `classId`.\n     */\n    getIdentityClass(classId: string): Class<Identity> | null {\n        for (let i = 0; i < this.config.identities.length; i++) {\n            if (this.config.identities[i].identity.classId === classId) {\n                return this.config.identities[i].identity;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Returns set `Identity` classes.\n     * @returns {Array<Class<Identity>>} Set `Identity` classes.\n     */\n    getIdentityClasses(): Array<Class<Identity>> | null {\n        return this.config.identities.map(current => {\n            return current.identity;\n        });\n    }\n}\n\nexport default Authentication;\n"]}