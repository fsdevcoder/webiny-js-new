{"version":3,"sources":["../../src/services/authorization.js"],"names":["Authorization","canExecute","apiMethod","authorizable","isPublic","endpointClassId","getEndpoint","constructor","classId","method","getName","authorizationError","NOT_AUTHORIZED","roles","getRoles","i","length","permissions","j","rules","k","rule","l","methods"],"mappings":";;;;;;;;;;AAGA;;;;;;AAEA,MAAMA,aAAN,CAA8C;AAC1C;;;;;;AAMMC,cAAN,CAAiBC,SAAjB,EAAuCC,YAAvC,EAAsF;AAAA;AAClF,gBAAID,UAAUE,QAAV,EAAJ,EAA0B;AACtB,uBAAO,IAAP;AACH;;AAED,kBAAMC,kBAAkBH,UAAUI,WAAV,GAAwBC,WAAxB,CAAoCC,OAA5D;AACA,kBAAMC,SAASP,UAAUQ,OAAV,EAAf;;AAEA,kBAAMC,qBAAqB,iCACtB,6BAA4BF,MAAO,OAAMJ,eAAgB,EADnC,EAEvB,6BAAmBO,cAFI,CAA3B;;AAKA,gBAAI,CAACT,YAAL,EAAmB;AACf,sBAAMQ,kBAAN;AACH;;AAED,kBAAME,QAAQ,MAAMV,aAAaW,QAAb,EAApB;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACnC,sBAAME,cAAc,MAAMJ,MAAME,CAAN,EAASE,WAAnC;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,YAAYD,MAAhC,EAAwCE,GAAxC,EAA6C;AACzC,0BAAM,EAAEC,KAAF,KAAYF,YAAYC,CAAZ,CAAlB;AACA,yBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAID,MAAMH,MAA1B,EAAkCI,GAAlC,EAAuC;AACnC,8BAAMC,OAAOF,MAAMC,CAAN,CAAb;AACA,4BAAIC,KAAKb,OAAL,KAAiBH,eAArB,EAAsC;AAClC,iCAAK,IAAIiB,IAAI,CAAb,EAAgBA,IAAID,KAAKE,OAAL,CAAaP,MAAjC,EAAyCM,GAAzC,EAA8C;AAC1C,oCAAID,KAAKE,OAAL,CAAaD,CAAb,EAAgBb,MAAhB,KAA2BA,MAA/B,EAAuC;AACnC,2CAAO,IAAP;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,kBAAME,kBAAN;AAnCkF;AAoCrF;AA3CyC;kBA8C/BX,a","file":"authorization.js","sourcesContent":["// @flow\nimport type { IAuthorization, IAuthorizable } from \"../../types\";\nimport type { ApiMethod } from \"webiny-api\";\nimport AuthorizationError from \"./authorizationError\";\n\nclass Authorization implements IAuthorization {\n    /**\n     * Checks whether user can execute an API method.\n     * @param {ApiMethod} apiMethod\n     * @param {IAuthorizable} authorizable\n     * @returns {Promise<boolean>}\n     */\n    async canExecute(apiMethod: ApiMethod, authorizable: IAuthorizable): Promise<boolean> {\n        if (apiMethod.isPublic()) {\n            return true;\n        }\n\n        const endpointClassId = apiMethod.getEndpoint().constructor.classId;\n        const method = apiMethod.getName();\n\n        const authorizationError = new AuthorizationError(\n            `Not authorized to execute ${method} on ${endpointClassId}`,\n            AuthorizationError.NOT_AUTHORIZED\n        );\n\n        if (!authorizable) {\n            throw authorizationError;\n        }\n\n        const roles = await authorizable.getRoles();\n        for (let i = 0; i < roles.length; i++) {\n            const permissions = await roles[i].permissions;\n            for (let j = 0; j < permissions.length; j++) {\n                const { rules } = permissions[j];\n                for (let k = 0; k < rules.length; k++) {\n                    const rule = rules[k];\n                    if (rule.classId === endpointClassId) {\n                        for (let l = 0; l < rule.methods.length; l++) {\n                            if (rule.methods[l].method === method) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        throw authorizationError;\n    }\n}\n\nexport default Authorization;\n"]}