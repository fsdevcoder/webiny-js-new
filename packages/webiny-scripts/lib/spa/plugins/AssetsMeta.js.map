{"version":3,"sources":["../../../src/spa/plugins/AssetsMeta.js"],"names":["AssetsMeta","constructor","options","manifestVariable","apply","compiler","outputName","urlGenerator","plugin","compilation","compileCallback","meta","chunks","prefix","process","env","NODE_ENV","forEach","chunk","files","file","indexOf","startsWith","id","generate","json","assets","source","size","length","oldChunkFilename","mainTemplate","content","filename","outputOptions","chunkFilename","hash","chunkIdVar","replace","generateUrl","output","publicPath","htmlPluginData","callback","js","css","map"],"mappings":"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","file":"AssetsMeta.js","sourcesContent":["/**\n * AssetsMeta class generates a `meta.json` file containing chunks manifest and other entry points.\n * Chunks manifest is then included in the HTML file.\n */\nclass AssetsMeta {\n    constructor(options) {\n        this.options = options || {};\n        this.manifestVariable = options.manifestVariable || \"webpackManifest\";\n    }\n\n    apply(compiler) {\n        const outputName = \"meta.json\";\n        const { urlGenerator } = this.options;\n\n        compiler.plugin(\"emit\", (compilation, compileCallback) => {\n            this.compilation = compilation;\n            let meta = {\n                chunks: {}\n            };\n\n            const prefix = process.env.NODE_ENV === \"development\" ? \"\" : \"/\";\n\n            compilation.chunks.forEach(chunk => {\n                chunk.files.forEach(file => {\n                    // Don't add hot updates to meta\n                    if (file.indexOf(\"hot-update\") >= 0) {\n                        return;\n                    }\n\n                    // Only store chunks map\n                    if (file.startsWith(\"chunks/\")) {\n                        meta.chunks[chunk.id] = urlGenerator.generate(file, prefix);\n                    }\n                });\n            });\n\n            const json = JSON.stringify(meta, null, 2);\n\n            compilation.assets[outputName] = {\n                source: () => json,\n                size: () => json.length\n            };\n\n            compileCallback();\n        });\n\n        let oldChunkFilename;\n        let manifestVariable = this.manifestVariable;\n\n        compiler.plugin(\"this-compilation\", function(compilation) {\n            const mainTemplate = compilation.mainTemplate;\n            mainTemplate.plugin(\"require-ensure\", function(content) {\n                const filename = this.outputOptions.chunkFilename || this.outputOptions.filename;\n\n                if (filename) {\n                    oldChunkFilename = this.outputOptions.chunkFilename;\n                    this.outputOptions.chunkFilename = \"__CHUNK_MANIFEST__\";\n                }\n\n                return content;\n            });\n        });\n\n        compiler.plugin(\"compilation\", function(compilation) {\n            // Replace placeholder with custom variable for manifest json\n            compilation.mainTemplate.plugin(\"require-ensure\", function(\n                content,\n                chunk,\n                hash,\n                chunkIdVar\n            ) {\n                if (oldChunkFilename) {\n                    this.outputOptions.chunkFilename = oldChunkFilename;\n                }\n\n                return content.replace(\n                    '\"__CHUNK_MANIFEST__\"',\n                    manifestVariable + \"[\" + chunkIdVar + \"]\"\n                );\n            });\n\n            /**\n             * Generate proper URLs for assets that are injected in the HTML\n             */\n            const generateUrl = file => {\n                return urlGenerator.generate(file.replace(compiler.options.output.publicPath, \"\"));\n            };\n\n            compilation.plugin(\"html-webpack-plugin-before-html-processing\", function(\n                htmlPluginData,\n                callback\n            ) {\n                const { js, css } = htmlPluginData.assets;\n                htmlPluginData.assets.js = js.map(generateUrl);\n                htmlPluginData.assets.css = css.map(generateUrl);\n\n                callback(null, htmlPluginData);\n            });\n        });\n    }\n}\n\nexport default AssetsMeta;\n"]}