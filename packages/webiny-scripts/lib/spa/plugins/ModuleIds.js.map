{"version":3,"sources":["../../../src/spa/plugins/ModuleIds.js"],"names":["ModuleIds","apply","compiler","plugin","compilation","modules","forEach","module","id","length","libIdent","createHash","update","context","options","digest","substr"],"mappings":";;;;;;AAAA;;;;;;AAEA,MAAMA,SAAN,CAAgB;AACZC,UAAMC,QAAN,EAAgB;AACZA,iBAASC,MAAT,CAAgB,aAAhB,EAA+BC,eAAe;AAC1CA,wBAAYD,MAAZ,CAAmB,mBAAnB,EAAwCE,WAAW;AAC/CA,wBAAQC,OAAR,CAAgBC,UAAU;AACtB,wBAAI,CAAC,CAACA,OAAOC,EAAR,IAAcD,OAAOC,EAAP,CAAUC,MAAV,KAAqB,EAApC,KAA2CF,OAAOG,QAAtD,EAAgE;AAC5DH,+BAAOC,EAAP,GAAY,iBACPG,UADO,CACI,KADJ,EAEPC,MAFO,CAGJL,OAAOG,QAAP,CAAgB;AACZG,qCAASX,SAASY,OAAT,CAAiBD;AADd,yBAAhB,CAHI,EAOPE,MAPO,CAOA,KAPA,EAQPC,MARO,CAQA,CARA,EAQG,EARH,CAAZ;AASH;AACJ,iBAZD;AAaH,aAdD;AAeH,SAhBD;AAiBH;AAnBW;;kBAsBDhB,S","file":"ModuleIds.js","sourcesContent":["import crypto from \"crypto\";\n\nclass ModuleIds {\n    apply(compiler) {\n        compiler.plugin(\"compilation\", compilation => {\n            compilation.plugin(\"before-module-ids\", modules => {\n                modules.forEach(module => {\n                    if ((!module.id || module.id.length !== 10) && module.libIdent) {\n                        module.id = crypto\n                            .createHash(\"md5\")\n                            .update(\n                                module.libIdent({\n                                    context: compiler.options.context\n                                })\n                            )\n                            .digest(\"hex\")\n                            .substr(0, 10);\n                    }\n                });\n            });\n        });\n    }\n}\n\nexport default ModuleIds;\n"]}