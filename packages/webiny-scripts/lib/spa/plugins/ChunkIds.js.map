{"version":3,"sources":["../../../src/spa/plugins/ChunkIds.js"],"names":["ChunkIds","constructor","options","apply","compiler","plugin","compilation","chunks","forEach","chunk","index","hasEntryModule","id","process","env","NODE_ENV","createChunkIdHash","chunkData","generateChunkName","name","unique","filenameTemplate","replace","chunkModules","mapModules","m","filter","filterJsModules","sort","sortByIndex","filteredModules","resource","includes","chunkName","get","split","projectRoot","sep","pop","slice","join","a","b","endsWith","paths","getRelativeModulePath","createHash","update","digest","substr","module"],"mappings":"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","file":"ChunkIds.js","sourcesContent":["import path from \"path\";\nimport crypto from \"crypto\";\nimport _ from \"lodash\";\nimport NormalModule from \"webpack/lib/NormalModule\";\n\nclass ChunkIds {\n    constructor(options) {\n        this.options = options || {};\n    }\n\n    apply(compiler) {\n        this.compiler = compiler;\n        compiler.plugin(\"compilation\", compilation => {\n            // Generate chunk IDs\n            compilation.plugin(\"before-chunk-ids\", chunks => {\n                chunks.forEach((chunk, index) => {\n                    if (!chunk.hasEntryModule() && chunk.id === null) {\n                        if (process.env.NODE_ENV === \"production\") {\n                            chunk.id = this.createChunkIdHash(chunk);\n                        } else {\n                            // ID must contain the name of the app to avoid ID clashes between multiple apps\n                            chunk.id = \"chunk-\" + index;\n                            // Name is only used in development for easier debugging\n                            const chunkData = this.generateChunkName(chunk);\n                            chunk.name = chunkData.unique\n                                ? chunkData.name\n                                : chunkData.name + \"-\" + index;\n                        }\n                    }\n                });\n            });\n        });\n    }\n\n    generateChunkName(chunk) {\n        if (chunk.filenameTemplate) {\n            return { name: chunk.filenameTemplate.replace(\".js\", \"\"), unique: true };\n        }\n        const chunkModules = chunk\n            .mapModules(m => m)\n            .filter(this.filterJsModules)\n            .sort(this.sortByIndex);\n        const filteredModules = chunkModules.filter(m => !m.resource.includes(\"node_modules\"));\n        let chunkName = _.get(\n            filteredModules,\n            \"[0].resource\",\n            _.get(chunkModules, \"0.resource\", \"undefined\")\n        )\n            .split(this.options.projectRoot + path.sep)\n            .pop();\n        chunkName = chunkName\n            .replace(`${path.sep}index.js`, \"\")\n            .replace(/\\//g, \"_\")\n            .replace(/\\\\/g, \"_\")\n            .replace(/\\.jsx?/, \"\");\n        chunkName = chunkName\n            .split(\"_\")\n            .slice(-3)\n            .join(\"_\");\n        return { name: chunkName };\n    }\n\n    sortByIndex(a, b) {\n        return a.index - b.index;\n    }\n\n    filterJsModules(m) {\n        if (m instanceof NormalModule) {\n            return m.resource.endsWith(\".js\") || m.resource.endsWith(\".jsx\");\n        }\n\n        return false;\n    }\n\n    createChunkIdHash(chunk) {\n        // We are generating chunk id based on containing modules (their `resource` path relative to `Apps` folder).\n        // That way chunk id does not change as long as it contains the same modules (no matter the content).\n        const paths = chunk\n            .mapModules(m => this.getRelativeModulePath(m))\n            .sort((a, b) => a.index - b.index)\n            .join(\"\\n\");\n        return crypto\n            .createHash(\"md5\")\n            .update(paths)\n            .digest(\"hex\")\n            .substr(0, 10);\n    }\n\n    getRelativeModulePath(module) {\n        if (!module || !module.resource) {\n            return \"\";\n        }\n\n        return module.resource.split(this.options.projectRoot + path.sep).pop();\n    }\n}\n\nexport default ChunkIds;\n"]}