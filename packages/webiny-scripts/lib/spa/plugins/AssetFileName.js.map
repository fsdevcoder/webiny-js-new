{"version":3,"sources":["../../../src/spa/plugins/AssetFileName.js"],"names":["AssetsFileName","constructor","options","replaceChunkFile","chunk","file","source","nameFn","fileIndex","files","indexOf","compilation","assets","createSourceHash","length","hash","createHash","updateHash","digest","substr","apply","compiler","plugin","compileCallback","chunks","forEach","fileSource","startsWith","ext","extname","fileName","basename"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,MAAMA,cAAN,CAAqB;AACjBC,gBAAYC,OAAZ,EAAqB;AACjB,aAAKA,OAAL,GAAeA,WAAW,EAA1B;AACH;;AAEDC,qBAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,MAA9B,EAAsCC,MAAtC,EAA8C;AAC1C,cAAMC,YAAYJ,MAAMK,KAAN,CAAYC,OAAZ,CAAoBL,IAApB,CAAlB;AACA;AACA,eAAO,KAAKM,WAAL,CAAiBC,MAAjB,CAAwBP,IAAxB,CAAP;AACAA,eAAOE,OAAO,KAAKM,gBAAL,CAAsBP,MAAtB,CAAP,CAAP;AACA,aAAKK,WAAL,CAAiBC,MAAjB,CAAwBP,IAAxB,IAAgCC,MAAhC;AACAF,cAAMK,KAAN,CAAYD,SAAZ,IAAyBH,IAAzB;AACA,eAAOA,IAAP;AACH;;AAEDQ,qBAAiBP,MAAjB,EAAyBQ,SAAS,EAAlC,EAAsC;AAClC;AACA,cAAMC,OAAO,iBAAOC,UAAP,CAAkB,KAAlB,CAAb;AACAV,eAAOW,UAAP,CAAkBF,IAAlB;AACA,eAAOA,KAAKG,MAAL,CAAY,KAAZ,EAAmBC,MAAnB,CAA0B,CAA1B,EAA6BL,MAA7B,CAAP;AACH;;AAEDM,UAAMC,QAAN,EAAgB;AACZA,iBAASC,MAAT,CAAgB,MAAhB,EAAwB,CAACX,WAAD,EAAcY,eAAd,KAAkC;AACtD,iBAAKZ,WAAL,GAAmBA,WAAnB;;AAEAA,wBAAYa,MAAZ,CAAmBC,OAAnB,CAA2BrB,SAAS;AAChCA,sBAAMK,KAAN,CAAYgB,OAAZ,CAAoBpB,QAAQ;AACxB,wBAAIA,KAAKK,OAAL,CAAa,YAAb,KAA8B,CAAlC,EAAqC;AACjC;AACH;;AAED,0BAAMgB,aAAaf,YAAYC,MAAZ,CAAmBP,IAAnB,CAAnB;;AAEA,wBAAIA,KAAKsB,UAAL,CAAgB,SAAhB,CAAJ,EAAgC;AAC5B,6BAAKxB,gBAAL,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCqB,UAAnC,EAA+CX,QAAS,UAASA,IAAK,KAAtE;AACH,qBAFD,MAEO;AACH,8BAAMa,MAAM,eAAKC,OAAL,CAAaxB,IAAb,CAAZ;AACA,8BAAMyB,WAAW,eAAKC,QAAL,CAAc1B,IAAd,EAAoBuB,GAApB,CAAjB;AACA,6BAAKzB,gBAAL,CACIC,KADJ,EAEIC,IAFJ,EAGIqB,UAHJ,EAIIX,QAAS,GAAEe,QAAS,IAAGf,IAAK,GAAEa,GAAI,EAJtC;AAMH;AACJ,iBAnBD;AAoBH,aArBD;;AAuBAL;AACH,SA3BD;AA4BH;AAnDgB;;kBAsDNvB,c","file":"AssetFileName.js","sourcesContent":["import path from \"path\";\nimport crypto from \"crypto\";\n\n/**\n * PRODUCTION ONLY PLUGIN\n * AssetsFileName class is responsible for generating a file name with unique hash based on the ENTIRE file content, to the last byte.\n *\n * NOTE:\n * This was tested on a big production web app with tons of code splitting and this code is the\n * only approach that solved our problems with CDN and granular code updates.\n * Existing webpack plugins were simply not enough.\n */\nclass AssetsFileName {\n    constructor(options) {\n        this.options = options || {};\n    }\n\n    replaceChunkFile(chunk, file, source, nameFn) {\n        const fileIndex = chunk.files.indexOf(file);\n        // Remove old asset file\n        delete this.compilation.assets[file];\n        file = nameFn(this.createSourceHash(source));\n        this.compilation.assets[file] = source;\n        chunk.files[fileIndex] = file;\n        return file;\n    }\n\n    createSourceHash(source, length = 10) {\n        // Create hash based on new file contents\n        const hash = crypto.createHash(\"md5\");\n        source.updateHash(hash);\n        return hash.digest(\"hex\").substr(0, length);\n    }\n\n    apply(compiler) {\n        compiler.plugin(\"emit\", (compilation, compileCallback) => {\n            this.compilation = compilation;\n\n            compilation.chunks.forEach(chunk => {\n                chunk.files.forEach(file => {\n                    if (file.indexOf(\"hot-update\") >= 0) {\n                        return;\n                    }\n\n                    const fileSource = compilation.assets[file];\n\n                    if (file.startsWith(\"chunks/\")) {\n                        this.replaceChunkFile(chunk, file, fileSource, hash => `chunks/${hash}.js`);\n                    } else {\n                        const ext = path.extname(file);\n                        const fileName = path.basename(file, ext);\n                        this.replaceChunkFile(\n                            chunk,\n                            file,\n                            fileSource,\n                            hash => `${fileName}-${hash}${ext}`\n                        );\n                    }\n                });\n            });\n\n            compileCallback();\n        });\n    }\n}\n\nexport default AssetsFileName;\n"]}