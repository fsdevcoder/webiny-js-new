{"version":3,"sources":["../../../../src/spa/loaders/i18n-loader/index.js"],"names":["getNamespaces","source","matches","regex","match","exec","push","index","name","output","forEachRight","unshift","from","undefined","to","findIndex","sortBy","getNamespaceOnIndex","namespaces","current","namespace","i18n","webinyI18n","occurrencesCount","Error","slice","length"],"mappings":"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","file":"index.js","sourcesContent":["import _ from \"lodash\";\n\n/**\n * Returns an array with all detected namespaces in current file. Each namespace will have opening and closing tag positions.\n * @param source\n * @returns {Array}\n */\nfunction getNamespaces(source) {\n    const matches = [],\n        regex = /@i18n\\.namespace +([A-Za-z.0-9]*)?/g;\n\n    let match;\n    while ((match = regex.exec(source))) {\n        matches.push({ index: match.index, name: match[1] });\n    }\n\n    const output = [];\n    _.forEachRight(matches, match => {\n        if (!match.name) {\n            output.unshift({ from: undefined, name: undefined, to: match.index });\n            return true;\n        }\n\n        const index = _.findIndex(output, { from: undefined });\n        if (index >= 0) {\n            output[index].from = match.index;\n            output[index].name = match.name;\n        } else {\n            output.unshift({ name: match.name, from: match.index });\n        }\n    });\n\n    return _.sortBy(output, \"from\");\n}\n\n/**\n * Tells us to which i18n namespace current index belongs to.\n * @param index\n * @param namespaces\n * @returns {*}\n */\nfunction getNamespaceOnIndex(index, namespaces) {\n    let current = null;\n    _.forEachRight(namespaces, namespace => {\n        if (namespace.from < index && (!namespace.to || namespace.to > index)) {\n            current = namespace.name;\n            return false;\n        }\n    });\n    return current;\n}\n\nexport default source => {\n    const regex = {\n        i18n: /this\\.i18n\\(['`\"]/g,\n        webinyI18n: /Webiny\\.I18n\\(['`\"]/g\n    };\n\n    // Let's detect all defined i18n namespaces in source.\n    const namespaces = getNamespaces(source);\n\n    let occurrencesCount = 0;\n\n    let match;\n    while ((match = regex.i18n.exec(source))) {\n        const namespace = getNamespaceOnIndex(match.index, namespaces);\n        if (!namespace) {\n            throw Error('Using \"this.i18n\" but namespace not defined.');\n        }\n        source =\n            source.slice(0, match.index) +\n            `this.i18n(\"${namespace}\", ` +\n            source.slice(match.index + 10);\n        occurrencesCount++;\n    }\n\n    while ((match = regex.webinyI18n.exec(source))) {\n        const namespace = getNamespaceOnIndex(match.index, namespaces);\n        if (!namespace) {\n            throw Error('Using \"Webiny.I18n\" but namespace not defined.');\n        }\n        source =\n            source.slice(0, match.index) +\n            `Webiny.I18n(\"${namespace}\", ` +\n            source.slice(match.index + 12);\n        occurrencesCount++;\n    }\n\n    if (namespaces.length > 0 && occurrencesCount === 0) {\n        throw Error(\"I18n namespace was defined but no usages found.\");\n    }\n\n    return source;\n};\n"]}