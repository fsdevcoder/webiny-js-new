{"version":3,"sources":["../../src/spa/webpack.config.js"],"names":["ifProduction","ifDevelopment","process","env","NODE_ENV","projectRoot","appRoot","urlGenerator","definePlugin","DefinePlugin","assetFileNamePlugin","assetsMetaPlugin","uglifyPlugin","plugins","inject","filename","entry","vendor","module","rules","test","exclude","use","loader","options","ProvidePlugin","$","jQuery","root","NoEmitOnErrorsPlugin","HotModuleReplacementPlugin","NamedModulesPlugin","optimize","ModuleConcatenationPlugin","HashedModuleIdsPlugin","canPrint","assetNameRegExp","cssProcessorOptions","discardComments","removeAll","safe","reduceInitial","disable","IgnorePlugin","fileExtensionRegex","fileLoaderOptions","name","context","resolve","outputPath","file","startsWith","parts","replace","split","normalize","join","publicPath","generate","cache","devtool","output","path","chunkFilename","include","pop","alias","jquery","require","extensions","resolveLoader","modules","__dirname"],"mappings":"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","file":"webpack.config.js","sourcesContent":["import path from \"path\";\nimport webpack from \"webpack\";\n\n// Webpack plugins\nimport ExtractTextPlugin from \"extract-text-webpack-plugin\";\nimport CleanWebpackPlugin from \"clean-webpack-plugin\";\nimport OptimizeCssAssetsPlugin from \"optimize-css-assets-webpack-plugin\";\nimport AutoDllPlugin from \"autodll-webpack-plugin\";\nimport UglifyJsPlugin from \"uglifyjs-webpack-plugin\";\n\n// Custom plugins\nimport AssetFileNamePlugin from \"./plugins/AssetFileName\";\nimport AssetsMetaPlugin from \"./plugins/AssetsMeta\";\nimport ModuleIdsPlugin from \"./plugins/ModuleIds\";\nimport ChunkIdsPlugin from \"./plugins/ChunkIds\";\n\n// Config helpers\nimport stylesCreator from \"./styles\";\nimport babelOptions from \"./babel\";\n// List of vendor libraries to create a DLL\nimport vendor from \"webiny-app/lib/vendor\";\n\nimport { getIfUtils, removeEmpty } from \"webpack-config-utils\";\n\nconst { ifProduction, ifDevelopment } = getIfUtils(process.env.NODE_ENV);\n\nexport default ({ projectRoot, appRoot, urlGenerator }) => {\n    const definePlugin = new webpack.DefinePlugin({\n        \"process.env\": {\n            NODE_ENV: JSON.stringify(process.env.NODE_ENV)\n        }\n    });\n\n    const assetFileNamePlugin = ifProduction(new AssetFileNamePlugin());\n    const assetsMetaPlugin = new AssetsMetaPlugin({ projectRoot, urlGenerator });\n    const uglifyPlugin = ifProduction(new UglifyJsPlugin());\n\n    const plugins = removeEmpty([\n        definePlugin,\n        new AutoDllPlugin({\n            inject: true,\n            filename: \"[name].dll.js\",\n            plugins: removeEmpty([definePlugin, uglifyPlugin, assetFileNamePlugin]),\n            entry: {\n                vendor\n            },\n            module: {\n                rules: [\n                    {\n                        test: /\\.jsx?$/,\n                        exclude: /node_modules/,\n                        use: [\n                            {\n                                loader: \"babel-loader\",\n                                options: babelOptions\n                            }\n                        ]\n                    }\n                ]\n            }\n        }),\n        new webpack.ProvidePlugin({\n            $: \"jquery\",\n            jQuery: \"jquery\"\n        }),\n        new CleanWebpackPlugin([\"dist/\" + process.env.NODE_ENV], { root: projectRoot }),\n        new ModuleIdsPlugin(),\n        new ChunkIdsPlugin({ projectRoot }),\n        ifDevelopment(new webpack.NoEmitOnErrorsPlugin()),\n        ifDevelopment(new webpack.HotModuleReplacementPlugin()),\n        new ExtractTextPlugin(\"styles.css\"),\n        assetFileNamePlugin,\n        assetsMetaPlugin,\n        ifDevelopment(new webpack.NamedModulesPlugin()),\n        ifProduction(new webpack.optimize.ModuleConcatenationPlugin()),\n        ifProduction(new webpack.HashedModuleIdsPlugin()),\n        uglifyPlugin,\n        ifProduction(\n            new OptimizeCssAssetsPlugin({\n                canPrint: false,\n                assetNameRegExp: /\\.css$/,\n                cssProcessorOptions: {\n                    discardComments: { removeAll: true },\n                    safe: true,\n                    reduceInitial: { disable: true }\n                }\n            })\n        ),\n        new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)\n    ]);\n\n    const fileExtensionRegex = /\\.(png|jpg|gif|jpeg|mp4|mp3|woff2?|ttf|otf|eot|svg|ico)$/;\n\n    const fileLoaderOptions = name => {\n        return {\n            name,\n            context: path.resolve(appRoot, \"assets\"),\n            outputPath: file => {\n                if (file.startsWith(\"_/\")) {\n                    const parts = file.replace(/_\\//g, \"\").split(\"/assets/\");\n                    file = path.normalize(path.join(\"external\", parts[0], parts[1]));\n                }\n                return file;\n            },\n            publicPath: file => {\n                if (file.startsWith(\"_/\")) {\n                    const parts = file.replace(/_\\//g, \"\").split(\"/assets/\");\n                    file = path.normalize(path.join(\"external\", parts[0], parts[1]));\n                }\n                return urlGenerator.generate(file);\n            }\n        };\n    };\n\n    return {\n        cache: true,\n        context: appRoot,\n        devtool: ifDevelopment(\"eval-source-map\", \"cheap-module-source-map\"),\n        entry: {},\n        output: {\n            path: path.resolve(path.join(projectRoot, \"dist\", process.env.NODE_ENV)),\n            filename: \"[name].js\",\n            chunkFilename: \"chunks/[name].js\",\n            publicPath: ifDevelopment(\"/\", \"\")\n        },\n        plugins,\n        module: {\n            rules: [\n                {\n                    test: /\\.jsx?$/,\n                    exclude: /node_modules/,\n                    use: removeEmpty([\n                        {\n                            loader: \"babel-loader\",\n                            options: babelOptions\n                        },\n                        ifDevelopment(\"hot-accept-loader\")\n                    ])\n                },\n                {\n                    test: /bootstrap-sass/,\n                    include: /\\.js$/,\n                    use: 'imports-loader?jQuery=>require(\"jquery\")'\n                },\n                stylesCreator(),\n                {\n                    test: /node_modules/,\n                    include: fileExtensionRegex,\n                    loader: \"file-loader\",\n                    options: {\n                        context: path.resolve(projectRoot, \"node_modules\"),\n                        name: ifDevelopment(\"[path][name].[ext]\", \"[path][name]-[hash].[ext]\"),\n                        outputPath: file => {\n                            const parts = file.replace(/_\\//g, \"\").split(\"node_modules/\");\n                            return path.normalize(path.join(\"external\", parts.pop()));\n                        },\n                        publicPath: file => {\n                            const parts = file.replace(/_\\//g, \"\").split(\"node_modules/\");\n                            file = path.normalize(path.join(\"external\", parts.pop()));\n                            return urlGenerator.generate(file);\n                        }\n                    }\n                },\n                // Files containing /public/ should not include [hash]\n                // This is for rare occasions when we need to include a path to the file in TPL template\n                {\n                    test: fileExtensionRegex,\n                    exclude: /node_modules/,\n                    include: /\\/public\\//,\n                    loader: \"file-loader\",\n                    options: fileLoaderOptions(\"[path][name].[ext]\")\n                },\n                {\n                    test: fileExtensionRegex,\n                    exclude: removeEmpty([/node_modules/, ifProduction(/\\/public\\//)]),\n                    loader: \"file-loader\",\n                    options: fileLoaderOptions(\n                        ifDevelopment(\"[path][name].[ext]\", \"[path][name]-[hash].[ext]\")\n                    )\n                }\n            ]\n        },\n        resolve: {\n            alias: {\n                jquery: require.resolve(\"jquery/dist/jquery.slim.js\")\n            },\n            extensions: [\".jsx\", \".js\", \".css\", \".scss\"]\n        },\n        resolveLoader: {\n            modules: [__dirname + \"/loaders\", \"node_modules\"]\n        }\n    };\n};\n"]}