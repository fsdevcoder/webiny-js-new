{"version":3,"sources":["../../../src/spa/server/development.js"],"names":["routes","port","domain","devMiddleware","config","projectRoot","statsConfig","all","errors","errorDetails","entrypoints","colors","wfp","log","test","plugins","push","output","publicPath","compiler","devMiddlewareOptions","noInfo","stats","baseDir","join","process","env","NODE_ENV","browserSyncConfig","ui","open","logPrefix","online","socket","server","middleware","req","res","next","url","each","file","startsWith","trim","setHeader","watchOptions","ignoreInitial","ignored","files","path","create","init"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,CAAC,EAAEA,MAAF,EAAUC,IAAV,EAAgBC,MAAhB,EAAwBC,aAAxB,EAAD,KAA6C;AACxD,WAAO,CAAC,EAAEC,MAAF,EAAUC,WAAV,EAAD,KAA6B;AAChC,cAAMC,cAAc;AAChBC,iBAAK,KADW;AAEhBC,oBAAQ,IAFQ;AAGhBC,0BAAc,IAHE;AAIhBC,yBAAa,IAJG;AAKhBC,oBAAQ;AALQ,SAApB;;AAQA;AACA,cAAMC,MAAM,EAAEC,KAAK,KAAP,EAAcC,MAAM,sBAApB,EAAZ;AACAV,eAAOW,OAAP,CAAeC,IAAf,CAAoB,qCAAoBJ,GAApB,CAApB;AACAR,eAAOa,MAAP,CAAcC,UAAd,GAA4B,GAAEhB,MAAO,IAAGD,IAAK,GAA7C;;AAEA;AACA,cAAMkB,WAAW,uBAAQf,MAAR,CAAjB;;AAEA,cAAMgB;AACFC,oBAAQ,KADN;AAEFC,mBAAOhB;AAFL,WAGCH,aAHD,CAAN;;AAMA;AACA,cAAMoB,UAAU,eAAKC,IAAL,CAAUnB,WAAV,EAAuB,MAAvB,EAA+BoB,QAAQC,GAAR,CAAYC,QAA3C,CAAhB;AACA,cAAMC,oBAAoB;AACtBC,gBAAI,KADkB;AAEtBC,kBAAM,KAFgB;AAGtBC,uBAAW,QAHW;AAItBC,oBAAQ,KAJc;AAKtB/B,gBALsB;AAMtBgC,oBAAQ;AACJ/B,wBAAS,GAAEA,MAAO,IAAGD,IAAK;AADtB,aANc;AAStBiC,oBAAQ;AACJX,uBADI;AAEJY,4BAAY,CACR,oCAAqBhB,QAArB,EAA+BC,oBAA/B,CADQ,EAER,oCAAqBD,QAArB,CAFQ,EAGR,CAACiB,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAChB,wBAAI,cAAcxB,IAAd,CAAmBsB,IAAIG,GAAvB,CAAJ,EAAiC;AAC7B,+BAAOD,MAAP;AACH;;AAED,qCAAEE,IAAF,CAAOxC,MAAP,EAAe,CAACyC,IAAD,EAAOF,GAAP,KAAe;AAC1B,4BAAIH,IAAIG,GAAJ,CAAQG,UAAR,CAAmBH,GAAnB,CAAJ,EAA6B;AACzBH,gCAAIG,GAAJ,GAAU,MAAM,iBAAEI,IAAF,CAAOF,IAAP,EAAa,GAAb,CAAhB;AACA,mCAAO,KAAP;AACH;AACJ,qBALD;AAMA,2BAAOH,MAAP;AACH,iBAfO,EAgBR,CAACF,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAChBD,wBAAIO,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAN;AACH,iBAnBO;AAFR,aATc;AAiCtBO,0BAAc;AACVC,+BAAe,IADL;AAEVC,yBAAS;AAFC,aAjCQ;AAqCtB;AACAC,mBAAO,CAAC5C,OAAOa,MAAP,CAAcgC,IAAd,GAAqB,QAAtB;AAtCe,SAA1B;;AAyCA,8BAAYC,MAAZ,GAAqBC,IAArB,CAA0BvB,iBAA1B;AACH,KAnED;AAoEH,C","file":"development.js","sourcesContent":["import path from \"path\";\nimport webpack from \"webpack\";\nimport _ from \"lodash\";\nimport browserSync from \"browser-sync\";\nimport webpackDevMiddleware from \"webpack-dev-middleware\";\nimport webpackHotMiddleware from \"webpack-hot-middleware\";\nimport WriteFilePlugin from \"write-file-webpack-plugin\";\n\nexport default ({ routes, port, domain, devMiddleware }) => {\n    return ({ config, projectRoot }) => {\n        const statsConfig = {\n            all: false,\n            errors: true,\n            errorDetails: true,\n            entrypoints: true,\n            colors: true\n        };\n\n        // Write webpack files to disk to trigger BrowserSync injection of CSS\n        const wfp = { log: false, test: /^((?!hot-update).)*$/ };\n        config.plugins.push(new WriteFilePlugin(wfp));\n        config.output.publicPath = `${domain}:${port}/`;\n\n        // Create webpack compiler\n        const compiler = webpack(config);\n\n        const devMiddlewareOptions = {\n            noInfo: false,\n            stats: statsConfig,\n            ...devMiddleware\n        };\n\n        // Run browser-sync server\n        const baseDir = path.join(projectRoot, \"dist\", process.env.NODE_ENV);\n        const browserSyncConfig = {\n            ui: false,\n            open: false,\n            logPrefix: \"Webiny\",\n            online: false,\n            port,\n            socket: {\n                domain: `${domain}:${port}`\n            },\n            server: {\n                baseDir,\n                middleware: [\n                    webpackDevMiddleware(compiler, devMiddlewareOptions),\n                    webpackHotMiddleware(compiler),\n                    (req, res, next) => {\n                        if (/\\.[a-z]{2,}/.test(req.url)) {\n                            return next();\n                        }\n\n                        _.each(routes, (file, url) => {\n                            if (req.url.startsWith(url)) {\n                                req.url = \"/\" + _.trim(file, \"/\");\n                                return false;\n                            }\n                        });\n                        return next();\n                    },\n                    (req, res, next) => {\n                        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                        next();\n                    }\n                ]\n            },\n            watchOptions: {\n                ignoreInitial: true,\n                ignored: \"*.{html,js,json}\"\n            },\n            // Files being watched for changes (add CSS of apps selected for build)\n            files: [config.output.path + \"/*.css\"]\n        };\n\n        browserSync.create().init(browserSyncConfig);\n    };\n};\n"]}