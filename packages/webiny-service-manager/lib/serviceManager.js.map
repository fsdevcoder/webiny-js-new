{"version":3,"sources":["../src/serviceManager.js"],"names":["ServiceManager","constructor","services","instances","add","name","factory","singleton","tags","get","service","instance","undefined","getByTag","tag","interf","forEach","includes","push"],"mappings":";;;;;;;;;;;;AACA,MAAMA,cAAN,CAAqB;;AAIjBC,kBAAc;AACV,aAAKC,QAAL,GAAgB,EAAhB;AACA,aAAKC,SAAL,GAAiB,EAAjB;AACH;;AAED;;;;;;;AAOAC,QACIC,IADJ,EAEIC,OAFJ,EAGIC,YAAqB,IAHzB,EAIIC,OAAsB,EAJ1B,EAKQ;AACJ,aAAKN,QAAL,CAAcG,IAAd,IAAsB;AAClBC,mBADkB;AAElBC,qBAFkB;AAGlBC;AAHkB,SAAtB;AAKH;;AAED;;;;;AAKAC,QAAIJ,IAAJ,EAAuB;AACnB,cAAMK,UAAU,KAAKR,QAAL,CAAcG,IAAd,CAAhB;AACA,YAAIM,WAAW,KAAKR,SAAL,CAAeE,IAAf,CAAf;;AAEA,YAAI,CAACK,OAAL,EAAc;AACV,mBAAOE,SAAP;AACH;;AAED,YAAI,CAACD,QAAD,IAAa,CAACD,QAAQH,SAA1B,EAAqC;AACjCI,uBAAWD,QAAQJ,OAAR,EAAX;AACH;;AAED,YAAII,QAAQH,SAAZ,EAAuB;AACnB,iBAAKJ,SAAL,CAAeE,IAAf,IAAuBM,QAAvB;AACH;;AAED,eAAOA,QAAP;AACH;;AAEDE,aAASC,GAAT,EAAsBC,SAAc,IAApC,EAAsD;AAClD,cAAMb,WAAuB,EAA7B;AACA,4BAAY,KAAKA,QAAjB,EAA2Bc,OAA3B,CAAoCX,IAAD,IAAkB;AACjD,kBAAMK,UAAU,KAAKR,QAAL,CAAcG,IAAd,CAAhB;AACA,gBAAIK,QAAQF,IAAR,CAAaS,QAAb,CAAsBH,GAAtB,CAAJ,EAAgC;AAC5B,sBAAMH,WAAW,KAAKF,GAAL,CAASJ,IAAT,CAAjB;AACA,oBAAI,CAACU,MAAD,IAAYA,UAAUJ,oBAAoBI,MAA9C,EAAuD;AACnDb,6BAASgB,IAAT,CAAcP,QAAd;AACH;AACJ;AACJ,SARD;AASA,eAAOT,QAAP;AACH;AAjEgB;;kBAoENF,c","file":"serviceManager.js","sourcesContent":["// @flow\nclass ServiceManager {\n    services: { [string]: { factory: Function, singleton: boolean, tags: Array<string> } };\n    instances: Object;\n\n    constructor() {\n        this.services = {};\n        this.instances = {};\n    }\n\n    /**\n     * Add service\n     * @param name\n     * @param factory\n     * @param singleton\n     * @param tags\n     */\n    add(\n        name: string,\n        factory: Function,\n        singleton: boolean = true,\n        tags: Array<string> = []\n    ): void {\n        this.services[name] = {\n            factory,\n            singleton,\n            tags\n        };\n    }\n\n    /**\n     * Get service\n     * @param name\n     * @return {*}\n     */\n    get(name: string): any {\n        const service = this.services[name];\n        let instance = this.instances[name];\n\n        if (!service) {\n            return undefined;\n        }\n\n        if (!instance || !service.singleton) {\n            instance = service.factory();\n        }\n\n        if (service.singleton) {\n            this.instances[name] = instance;\n        }\n\n        return instance;\n    }\n\n    getByTag(tag: string, interf: any = null): Array<any> {\n        const services: Array<any> = [];\n        Object.keys(this.services).forEach((name: string) => {\n            const service = this.services[name];\n            if (service.tags.includes(tag)) {\n                const instance = this.get(name);\n                if (!interf || (interf && instance instanceof interf)) {\n                    services.push(instance);\n                }\n            }\n        });\n        return services;\n    }\n}\n\nexport default ServiceManager;\n"]}