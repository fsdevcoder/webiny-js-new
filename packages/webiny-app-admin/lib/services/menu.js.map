{"version":3,"sources":["../../src/services/menu.js"],"names":["findMenuIndex","findIn","menu","id","item","props","label","menuId","mergeMenus","menu1","menu2","overwriteExisting","omit","newProps","newChildren","Children","toArray","children","key","forEach","existingMenu","child","push","cloneElement","createElement","sortMenus","menus","level","map","Menu","menuIndex"],"mappings":"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","file":"menu.js","sourcesContent":["import _ from \"lodash\";\nimport React from \"react\";\nimport MenuCmp from \"./../components/Menu\";\n\nfunction findMenuIndex(findIn, menu) {\n    return _.findIndex(findIn, item => {\n        const id = item.props.id || item.props.label;\n        const menuId = menu.props.id || menu.props.label;\n        return id === menuId;\n    });\n}\n\nfunction mergeMenus(menu1, menu2) {\n    // If requested, overwrite existing menu and exit\n    if (menu2.props.overwriteExisting) {\n        return menu2;\n    }\n\n    const omit = [\"render\", \"children\"];\n\n    // Create merged props object\n    const newProps = _.merge({}, _.omit(menu1.props, omit), _.omit(menu2.props, omit));\n    let newChildren = React.Children.toArray(menu1.props.children);\n    newProps.key = menu1.props.id || menu1.props.label;\n    React.Children.forEach(menu2.props.children, child => {\n        const existingMenu = findMenuIndex(newChildren, child);\n        if (existingMenu > -1) {\n            newChildren[existingMenu] = mergeMenus(newChildren[existingMenu], child);\n        } else {\n            newChildren.push(\n                React.cloneElement(child, { key: child.props.id || child.props.label })\n            );\n        }\n    });\n\n    return React.createElement(MenuCmp, newProps, newChildren);\n}\n\nfunction sortMenus(menus, level = 0) {\n    menus = _.sortBy(menus, [\"props.order\", \"props.label\"]);\n    return menus.map(menu => {\n        return React.cloneElement(\n            menu,\n            _.assign({}, menu.props, { level }),\n            sortMenus(React.Children.toArray(menu.props.children), level + 1)\n        );\n    });\n}\n\n/**\n * Menu class holds the entire system menu structure.\n * Menu items are registered when app modules are initiated.\n */\nclass Menu {\n    constructor() {\n        this.menu = [];\n    }\n\n    /**\n     * Add a single top-level menu to system menu\n     * @param menu\n     */\n    add(menu) {\n        // Make sure we have a menu ID\n        menu = React.cloneElement(menu, { id: menu.props.id || menu.props.label });\n\n        // If top-level menu already exists...\n        const menuIndex = findMenuIndex(this.menu, menu);\n        if (menuIndex > -1) {\n            // Merge new menu with existing menu\n            const existingMenu = this.menu[menuIndex];\n            this.menu[menuIndex] = mergeMenus(existingMenu, menu);\n        } else {\n            // New top-level menu\n            this.menu.push(menu);\n        }\n\n        // Sort menu by order, then by label (alphabetically)\n        this.menu = sortMenus(this.menu);\n\n        return this;\n    }\n\n    /**\n     * Get entire system menu\n     * @returns {{}|*}\n     */\n    getMenu() {\n        return this.menu;\n    }\n}\n\nexport default Menu;\n"]}