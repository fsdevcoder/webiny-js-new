{"version":3,"sources":["../../../src/components/Navigation/Desktop.js"],"names":["Desktop","props","state","onClick","bind","menu","services","get","renderer","canAccess","children","Children","toArray","hasChildren","length","Link","menuIconClass","icon","linkProps","key","id","label","level","className","open","active","findRoute","router","route","name","childMenuItems","map","child","i","cloneElement","render","filter","item","getLink","setState","checkRoute","getMenu","Component","modules"],"mappings":"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","file":"Desktop.js","sourcesContent":["import React from 'react';\nimport classSet from \"classnames\";\nimport { app, createComponent } from 'webiny-app';\nimport _ from 'lodash';\nimport utils from './utils';\n\nclass Desktop extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n        this.onClick = this.onClick.bind(this);\n\n        this.menu = app.services.get('menu');\n\n        /**\n         * Menu renderer passed to <Menu>.\n         * Note that `this` is still bound to `Desktop` class since we are passing an arrow function.\n         */\n        this.renderer = (menu) => {\n            const props = _.clone(menu.props);\n            if (!utils.canAccess(props)) {\n                return null;\n            }\n\n            const children = React.Children.toArray(props.children);\n            const hasChildren = children.length > 0;\n            const { Link } = this.props;\n\n            const menuIconClass = classSet('icon app-icon', { 'fa': _.includes(props.icon, 'fa-') }, props.icon);\n\n            const linkProps = {\n                key: props.id,\n                label: props.label,\n                children: [\n                    props.icon ? <span key=\"icon\" className={menuIconClass}/> : null,\n                    props.level > 1 ? props.label : <span key=\"title\" className=\"app-title\">{props.label}</span>,\n                    hasChildren && props.level > 0 ? <span key=\"caret\" className=\"icon icon-caret-down\"/> : null\n                ]\n            };\n\n            const className = classSet({\n                open: this.state.open === props.id,\n                active: props.level === 0 ? utils.findRoute(props, app.router.route.name) : false\n            });\n\n            let childMenuItems = null;\n            if (hasChildren) {\n                // Build array of child items and check their access roles.\n                childMenuItems = children.map((child, i) => {\n                    if (!utils.canAccess(child.props)) {\n                        return null;\n                    }\n\n                    return React.cloneElement(child, { key: i, render: this.renderer });\n                });\n\n                // If no child items are there to render - hide parent menu as well.\n                if (!childMenuItems.filter(item => !_.isNil(item)).length) {\n                    return null;\n                }\n            }\n\n            return (\n                <li className={className} key={props.id} onClick={() => this.onClick(menu)}>\n                    {utils.getLink(props.route, Link, linkProps)}\n                    {hasChildren && (\n                        <ul className={'level-' + (props.level + 1)}>\n                            {childMenuItems}\n                        </ul>\n                    )}\n                </li>\n            );\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ active: utils.checkRoute(app.router.route) });\n    }\n\n    onClick(menu) {\n        if (menu.props.level === 0) {\n            this.setState({ open: menu.props.id });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"navigation\">\n                <div className=\"shield\"/>\n                <div className=\"main-menu\">\n                    <ul className=\"menu-list level-0\">\n                        {this.menu.getMenu().map(menu => (\n                            React.cloneElement(menu, {\n                                key: menu.props.id,\n                                render: this.renderer\n                            })\n                        ))}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default createComponent(Desktop, { modules: ['Link'] });"]}