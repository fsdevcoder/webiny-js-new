{"version":3,"sources":["../src/attribute.js"],"names":["Attribute","constructor","name","attributesContainer","value","getAttributeValueClass","once","toStorage","skipOnPopulate","async","defaultValue","validators","onSetCallback","onGetCallback","onGetJSONValueCallback","getName","setAsync","flag","getAsync","getParentAttributesContainer","getParentModel","setValidators","getValidators","hasValidators","isEmpty","getValidationValue","getValue","validate","valueValidation","isSet","isEmptyValue","validateType","validateAttribute","validateValue","e","INVALID_ATTRIBUTE","message","validator","reset","setSkipOnPopulate","getSkipOnPopulate","canSetValue","getOnce","setValue","setCurrent","getCurrent","getDefaultValue","arguments","onSet","callback","onGet","onGetJSONValue","getJSONValue","setToStorage","getToStorage","getStorageValue","setStorageValue","skipDifferenceCheck","setDefaultValue","setOnce","expected","expecting","got"],"mappings":"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","file":"attribute.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport { validation } from \"webiny-validation\";\nimport ModelError from \"./modelError\";\nimport AttributeValue from \"./attributeValue\";\nimport type { AttributesContainer, Model } from \".\";\n\nclass Attribute {\n    name: string;\n    attributesContainer: AttributesContainer;\n    value: AttributeValue;\n    once: boolean;\n    toStorage: boolean;\n    toJSON: boolean;\n    async: boolean;\n    skipOnPopulate: boolean;\n    defaultValue: mixed;\n    validators: ?(string | Function);\n    onSetCallback: Function;\n    onGetCallback: Function;\n    onGetJSONValueCallback: Function;\n    constructor(name: string, attributesContainer: AttributesContainer) {\n        /**\n         * Attribute name.\n         */\n        this.name = name;\n\n        /**\n         * Attribute's parent model instance.\n         */\n        this.attributesContainer = attributesContainer;\n\n        /**\n         * Attribute's current value.\n         */\n        this.value = new (this.getAttributeValueClass())(this);\n\n        /**\n         * If true - updating will be disabled.\n         * @var bool\n         */\n        this.once = false;\n\n        /**\n         * Marks whether or not this attribute can be stored in a storage.\n         * @var bool\n         */\n        this.toStorage = true;\n\n        /**\n         * If true - populate will skip this attribute\n         * @var bool\n         */\n        this.skipOnPopulate = false;\n\n        /**\n         * Determines if attribute is asynchronous or not.\n         * @var bool\n         */\n        this.async = false;\n\n        /**\n         * Default value.\n         * @var null\n         */\n        this.defaultValue = null;\n\n        /**\n         * Attribute validators.\n         * @var string\n         */\n        this.validators = null;\n\n        /**\n         * Custom onSet callback.\n         */\n        this.onSetCallback = value => value;\n\n        /**\n         * Custom onGet callback.\n         */\n        this.onGetCallback = value => value;\n\n        /**\n         * Custom onGetJSONValue callback.\n         */\n        this.onGetJSONValueCallback = value => value;\n    }\n\n    /**\n     * Returns AttributeValue class to be used on construct.\n     * @returns {AttributeValue}\n     */\n    getAttributeValueClass() {\n        return AttributeValue;\n    }\n\n    /**\n     * Returns name of attribute\n     */\n    getName(): string {\n        return this.name;\n    }\n\n    /**\n     * Sets this attribute as async.\n     * @param flag\n     * @returns {Attribute}\n     */\n    setAsync(flag: boolean = true): Attribute {\n        this.async = flag;\n        return this;\n    }\n\n    /**\n     * Returns whether or not this attribute is an async attribute.\n     */\n    getAsync(): boolean {\n        return this.async;\n    }\n\n    /**\n     * Returns parent model attributes container\n     */\n\n    getParentAttributesContainer(): AttributesContainer {\n        return this.attributesContainer;\n    }\n\n    /**\n     * Returns model\n     */\n    getParentModel(): Model {\n        return this.getParentAttributesContainer().getParentModel();\n    }\n\n    /**\n     * Sets data validators, can be a string containing all validators or a callback that throws a ModelError.\n     * @param validators\n     * @returns {Attribute}\n     */\n    setValidators(validators: string | Function = \"\"): Attribute {\n        this.validators = validators;\n        return this;\n    }\n\n    /**\n     * Returns defined validators or validation callback.\n     * @returns {array}\n     */\n    getValidators(): ?(string | Function) {\n        return this.validators;\n    }\n\n    /**\n     * Returns true if attribute has one or more validators set.\n     * @returns {boolean}\n     */\n    hasValidators(): boolean {\n        return !_.isEmpty(this.validators);\n    }\n\n    async getValidationValue() {\n        return this.getValue();\n    }\n\n    /**\n     * Perform validation against currently assigned value.\n     * @throws AttributeValidationException\n     */\n    async validate(): Promise<void> {\n        const value = await this.getValidationValue();\n        const valueValidation = this.isSet() && !Attribute.isEmptyValue(value);\n\n        valueValidation && (await this.validateType(value));\n        await this.validateAttribute(value);\n        valueValidation && (await this.validateValue(value));\n    }\n\n    /**\n     * Only used for validating data type only (eg. string must not be send to an attribute that accepts numbers).\n     * Will be triggered before data validation by given validators.\n     */\n    // eslint-disable-next-line\n    async validateType(value: mixed): Promise<void> {\n        // Does nothing unless this class is extended and method overridden.\n        // Throw an error to signal that validation has failed.\n    }\n\n    /**\n     * Used to additionally check set data (eg. items in array or to additionally validate set value).\n     * Will be triggered after data validation by given validators.\n     * @returns {Promise<void>}\n     */\n    // eslint-disable-next-line\n    async validateValue(value: mixed): Promise<void> {\n        // Does nothing unless this class is extended and method overridden.\n        // Throw an error to signal that validation has failed.\n    }\n\n    /**\n     * Used to additionally check set data (eg. items in array or to additionally validate set value).\n     * Will be triggered after data validation by given validators.\n     * @returns {Promise<void>}\n     */\n    async validateAttribute(value: mixed) {\n        let validators = this.getValidators();\n        if (typeof validators === \"string\") {\n            try {\n                await validation.validate(value, validators);\n            } catch (e) {\n                throw new ModelError(\"Invalid attribute.\", ModelError.INVALID_ATTRIBUTE, {\n                    message: e.message,\n                    value: e.value,\n                    validator: e.validator\n                });\n            }\n        } else if (typeof validators === \"function\") {\n            await validators(value, this);\n        }\n    }\n\n    /**\n     * Resets attribute - empties value and resets value.set flag, which means setting value will again work in cases setOnce is present.\n     */\n    reset(): Attribute {\n        this.value.reset();\n        return this;\n    }\n\n    /**\n     * Sets skip on populate - if true, value won't be set into attribute when populate method on parent model instance is called.\n     */\n    setSkipOnPopulate(flag: boolean = true): Attribute {\n        this.skipOnPopulate = flag;\n        return this;\n    }\n\n    /**\n     * Returns true if this attribute will be skipped on populate.\n     */\n    getSkipOnPopulate(): boolean {\n        return this.skipOnPopulate;\n    }\n\n    /**\n     * Checks if given value is empty or not.\n     * @param value\n     * @returns {boolean}\n     */\n    static isEmptyValue(value: mixed): boolean {\n        return value === null || typeof value === \"undefined\";\n    }\n\n    /**\n     * Tells us if the value has been set (flag triggered when setValue is called).\n     */\n    isSet(): boolean {\n        return this.value.isSet();\n    }\n\n    /**\n     * Tells us if value can be set or not (eg. dynamic attributes cannot receive data to be set as an attribute value).\n     * @returns {boolean}\n     */\n    canSetValue(): boolean {\n        return !(this.getOnce() && this.isSet());\n    }\n\n    /**\n     * Sets attribute's value.\n     * Some attributes may require async behaviour, that is why we annotate both sync and async return values.\n     *\n     * @param {any} value A value can be anything, depending on the attribute implementation.\n     * @returns {void|Promise<void>}\n     */\n    setValue(value: mixed): void {\n        if (!this.canSetValue()) {\n            return;\n        }\n\n        this.value.setCurrent(this.onSetCallback(value));\n    }\n\n    /**\n     * Returns attribute's value.\n     * @returns {*}\n     */\n    getValue(): mixed | Promise<mixed> {\n        const value = this.value.getCurrent();\n        if (Attribute.isEmptyValue(value)) {\n            this.value.setCurrent(this.getDefaultValue());\n        }\n\n        return this.onGetCallback(this.value.getCurrent(), ...arguments);\n    }\n\n    onSet(callback: Function) {\n        this.onSetCallback = callback;\n        return this;\n    }\n\n    onGet(callback: Function) {\n        this.onGetCallback = callback;\n        return this;\n    }\n\n    onGetJSONValue(callback: Function) {\n        this.onGetJSONValueCallback = callback;\n        return this;\n    }\n\n    async getJSONValue(): Promise<mixed> {\n        return this.onGetJSONValueCallback(await this.getValue(...arguments), ...arguments);\n    }\n\n    setToStorage(flag: boolean = true): this {\n        this.toStorage = flag;\n        return this;\n    }\n\n    getToStorage(): boolean {\n        return this.toStorage;\n    }\n\n    async getStorageValue(): Promise<mixed> {\n        return this.getValue();\n    }\n\n    setStorageValue(value: mixed): Attribute {\n        // We don't want to mark value as dirty.\n        this.value.setCurrent(value, { skipDifferenceCheck: true });\n        return this;\n    }\n\n    /**\n     * Sets default attribute value.\n     */\n    setDefaultValue(defaultValue: ?mixed): this {\n        this.defaultValue = defaultValue;\n        return this;\n    }\n\n    /**\n     * Returns default attribute value.\n     */\n    getDefaultValue() {\n        let defaultValue = this.defaultValue;\n        return typeof defaultValue === \"function\" ? defaultValue() : defaultValue;\n    }\n\n    /**\n     * If set to true, attribute's value won't be overridden if new values are about to be set.\n     */\n    setOnce(flag: boolean = true): this {\n        this.once = flag;\n        return this;\n    }\n\n    /**\n     * Tells us if attribute value can only be set once.\n     */\n    getOnce(): boolean {\n        return this.once;\n    }\n\n    expected(expecting: string, got: string): ModelError {\n        throw new ModelError(\n            `Validation failed, received ${got}, expecting ${expecting}.`,\n            ModelError.INVALID_ATTRIBUTE\n        );\n    }\n}\n\nexport default Attribute;\n"]}