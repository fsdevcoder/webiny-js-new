{"version":3,"sources":["../src/attributesContainer.js"],"names":["AttributesContainer","constructor","model","parentModel","name","attr","attribute","getParentModel","custom","args","arguments","shift","setAttribute","getAttribute"],"mappings":";;;;;;;;;;;;AAGA;;;AAGA,MAAMA,mBAAN,CAA0B;;AAItBC,gBAAYC,KAAZ,EAA0B;AACtB;;;AAGA,aAAKC,WAAL,GAAmBD,KAAnB;;AAEA;;;AAGA,aAAKE,IAAL,GAAY,EAAZ;AACH;;AAEDC,SAAKC,SAAL,EAA6C;AACzC,aAAKF,IAAL,GAAYE,SAAZ;AACA,eAAO,IAAP;AACH;;AAEDC,qBAAwB;AACpB,eAAO,KAAKJ,WAAZ;AACH;;AAEDK,WAAOF,SAAP,EAAoC;AAChC,cAAMJ,QAAQ,KAAKK,cAAL,EAAd;AACA,cAAME,OAAO,oBAAWC,SAAX,CAAb;AACAD,aAAKE,KAAL;AACAT,cAAMU,YAAN,CAAmB,KAAKR,IAAxB,EAA8B,IAAIE,SAAJ,CAAc,KAAKF,IAAnB,EAAyB,IAAzB,EAA+B,GAAGK,IAAlC,CAA9B;AACA,eAAOP,MAAMW,YAAN,CAAmB,KAAKT,IAAxB,CAAP;AACH;AA/BqB;kBAkCXJ,mB","file":"attributesContainer.js","sourcesContent":["// @flow\nimport type { Model, Attribute } from \".\";\n\n/**\n * Base AttributesContainer class, can be extended to implement new types of model attributes.\n */\nclass AttributesContainer {\n    parentModel: Model;\n    name: string;\n\n    constructor(model: Model) {\n        /**\n         * Parent parentModel - instance of Model class.\n         */\n        this.parentModel = model;\n\n        /**\n         * Name of current attribute\n         */\n        this.name = \"\";\n    }\n\n    attr(attribute: string): AttributesContainer {\n        this.name = attribute;\n        return this;\n    }\n\n    getParentModel(): Model {\n        return this.parentModel;\n    }\n\n    custom(attribute: Class<Attribute>) {\n        const model = this.getParentModel();\n        const args = Array.from(arguments);\n        args.shift();\n        model.setAttribute(this.name, new attribute(this.name, this, ...args));\n        return model.getAttribute(this.name);\n    }\n}\n\nexport default AttributesContainer;\n"]}