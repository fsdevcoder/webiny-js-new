{"version":3,"sources":["../src/attributeValue.js"],"names":["AttributeValue","constructor","attribute","current","dirty","set","state","loading","loaded","setCurrent","value","options","skipDifferenceCheck","forceSetAsDirty","isDifferentFrom","getCurrent","isDirty","isClean","clean","isSet","reset","isLoaded","isLoading"],"mappings":";;;;;AAIA,MAAMA,cAAN,CAAqB;;AAOjBC,gBAAYC,SAAZ,EAAkC;AAC9B,aAAKA,SAAL,GAAiBA,SAAjB;AACA,aAAKC,OAAL,GAAe,IAAf;AACA,aAAKC,KAAL,GAAa,KAAb;AACA,aAAKC,GAAL,GAAW,KAAX;AACA,aAAKC,KAAL,GAAa,EAAEC,SAAS,KAAX,EAAkBC,QAAQ,KAA1B,EAAb;AACH;;AAEDC,eAAWC,KAAX,EAAyBC,UAAkB,EAA3C,EAAqD;AACjD;AACA,aAAKN,GAAL,GAAW,IAAX;;AAEA,YAAIM,QAAQC,mBAAZ,EAAiC;AAC7B,gBAAID,QAAQE,eAAZ,EAA6B;AACzB,qBAAKT,KAAL,GAAa,IAAb;AACH;AACJ,SAJD,MAIO;AACH,gBAAI,CAAC,KAAKA,KAAN,IAAe,KAAKU,eAAL,CAAqBJ,KAArB,CAAnB,EAAgD;AAC5C,qBAAKN,KAAL,GAAa,IAAb;AACH;AACJ;;AAED,aAAKD,OAAL,GAAeO,KAAf;AACA,eAAO,IAAP;AACH;;AAEDK,iBAAoB;AAChB,eAAO,KAAKZ,OAAZ;AACH;;AAEDW,oBAAgBJ,KAAhB,EAAuC;AACnC,eAAO,KAAKP,OAAL,KAAiBO,KAAxB;AACH;;AAEDM,cAAmB;AACf,eAAO,KAAKZ,KAAZ;AACH;;AAEDa,cAAmB;AACf,eAAO,CAAC,KAAKD,OAAL,EAAR;AACH;;AAEDE,YAAc;AACV,aAAKd,KAAL,GAAa,KAAb;AACA,eAAO,IAAP;AACH;;AAEDe,YAAiB;AACb,eAAO,KAAKd,GAAZ;AACH;;AAEDe,YAAc;AACV,aAAKjB,OAAL,GAAe,IAAf;AACA,aAAKC,KAAL,GAAa,KAAb;AACA,aAAKC,GAAL,GAAW,KAAX;AACH;;AAEDgB,eAAW;AACP,eAAO,KAAKf,KAAL,CAAWE,MAAlB;AACH;;AAEDc,gBAAY;AACR,eAAO,KAAKhB,KAAL,CAAWC,OAAlB;AACH;AAtEgB;;kBAyENP,c","file":"attributeValue.js","sourcesContent":["// @flow\nimport type { Attribute } from \".\";\nimport type { AttributeValueState } from \"./../types\";\n\nclass AttributeValue {\n    attribute: Attribute;\n    current: mixed;\n    dirty: boolean;\n    set: boolean;\n    state: AttributeValueState;\n\n    constructor(attribute: Attribute) {\n        this.attribute = attribute;\n        this.current = null;\n        this.dirty = false;\n        this.set = false;\n        this.state = { loading: false, loaded: false };\n    }\n\n    setCurrent(value: mixed, options: Object = {}): this {\n        // If needed, implement skipMarkAsSet option (at the time of implementation, it was not needed).\n        this.set = true;\n\n        if (options.skipDifferenceCheck) {\n            if (options.forceSetAsDirty) {\n                this.dirty = true;\n            }\n        } else {\n            if (!this.dirty && this.isDifferentFrom(value)) {\n                this.dirty = true;\n            }\n        }\n\n        this.current = value;\n        return this;\n    }\n\n    getCurrent(): mixed {\n        return this.current;\n    }\n\n    isDifferentFrom(value: mixed): boolean {\n        return this.current !== value;\n    }\n\n    isDirty(): boolean {\n        return this.dirty;\n    }\n\n    isClean(): boolean {\n        return !this.isDirty();\n    }\n\n    clean(): this {\n        this.dirty = false;\n        return this;\n    }\n\n    isSet(): boolean {\n        return this.set;\n    }\n\n    reset(): void {\n        this.current = null;\n        this.dirty = false;\n        this.set = false;\n    }\n\n    isLoaded() {\n        return this.state.loaded;\n    }\n\n    isLoading() {\n        return this.state.loading;\n    }\n}\n\nexport default AttributeValue;\n"]}