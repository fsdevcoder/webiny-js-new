{"version":3,"sources":["../../src/attributes/modelAttribute.js"],"names":["ModelAttribute","constructor","name","attributesContainer","model","prototype","Error","modelClass","getModelClass","getModelInstance","setValue","value","canSetValue","newValue","isObject","populate","setCurrent","getJSONValue","getValue","getStorageValue","toStorage","setStorageValue","populateFromStorage","skipDifferenceCheck","validateType","expected","validateValue","currentValue","validate"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,cAAN,6BAAuC;;AAGnCC,gBAAYC,IAAZ,EAA0BC,mBAA1B,EAAoEC,KAApE,EAAyF;AACrF,cAAMF,IAAN,EAAYC,mBAAZ;;AAEA;AACA,YAAI,EAAEC,MAAMC,SAAN,2BAAF,CAAJ,EAAyC;AACrC,kBAAMC,MACD,sBAAqBJ,IAAK,8DADzB,CAAN;AAGH;;AAED,aAAKK,UAAL,GAAkBH,KAAlB;AACH;;AAEDI,oBAA8B;AAC1B,eAAO,KAAKD,UAAZ;AACH;;AAEDE,uBAAmB;AACf,cAAMF,aAAa,KAAKC,aAAL,EAAnB;AACA,eAAO,IAAID,UAAJ,EAAP;AACH;;AAEDG,aAASC,KAAT,EAAuB;AACnB,YAAI,CAAC,KAAKC,WAAL,EAAL,EAAyB;AACrB;AACH;;AAED,YAAIC,WAAW,IAAf;AACA,YAAIF,gCAAJ,EAA4B;AACxBE,uBAAWF,KAAX;AACH,SAFD,MAEO,IAAI,iBAAEG,QAAF,CAAWH,KAAX,CAAJ,EAAuB;AAC1BE,uBAAW,KAAKJ,gBAAL,EAAX;AACAI,qBAASE,QAAT,CAAkBJ,KAAlB;AACH,SAHM,MAGA;AACHE,uBAAWF,KAAX;AACH;;AAED,aAAKA,KAAL,CAAWK,UAAX,CAAsBH,QAAtB;AACH;;AAEKI,gBAAN,GAAqC;AAAA;;AAAA;AACjC,kBAAMN,QAAQ,MAAKO,QAAL,EAAd;AACA,gBAAIP,gCAAJ,EAA4B;AACxB,uBAAO,EAAP;AACH;AACD,mBAAOA,KAAP;AALiC;AAMpC;;AAEKQ,mBAAN,GAAwC;AAAA;;AAAA;AACpC,kBAAMR,QAAQ,MAAM,OAAKO,QAAL,EAApB;AACA,gBAAIP,gCAAJ,EAA4B;AACxB,uBAAO,MAAMA,MAAMS,SAAN,EAAb;AACH;AACD,mBAAOT,KAAP;AALoC;AAMvC;;AAEDU,oBAAgBV,KAAhB,EAAoC;AAChC,cAAME,WAAW,KAAKJ,gBAAL,GAAwBa,mBAAxB,CAA4CX,KAA5C,CAAjB;AACA,aAAKA,KAAL,CAAWK,UAAX,CAAsBH,QAAtB,EAAgC,EAAEU,qBAAqB,IAAvB,EAAhC;AACA,eAAO,IAAP;AACH;;AAED;;;AAGMC,gBAAN,CAAmBb,KAAnB,EAAiC;AAAA;;AAAA;AAC7B,gBAAIA,iBAAiB,OAAKH,aAAL,EAArB,EAA2C;AACvC;AACH;AACD,mBAAKiB,QAAL,CAAc,yBAAd,EAAyC,OAAOd,KAAhD;AAJ6B;AAKhC;;AAED;;;;;;AAMMe,iBAAN,CAAoBf,KAApB,EAAiD;AAAA;AAC7C,kBAAMgB,eAAiBhB,KAAvB;AACA,kBAAMgB,aAAaC,QAAb,EAAN;AAF6C;AAGhD;AApFkC;;kBAuFxB5B,c","file":"modelAttribute.js","sourcesContent":["// @flow\nimport Attribute from \"./../attribute\";\nimport Model from \"./../model\";\nimport _ from \"lodash\";\nimport { AttributesContainer } from \"../index\";\n\nclass ModelAttribute extends Attribute {\n    modelClass: Class<Model>;\n\n    constructor(name: string, attributesContainer: AttributesContainer, model: Class<Model>) {\n        super(name, attributesContainer);\n\n        // If provided class is not a subclass of Model, we must throw an error.\n        if (!(model.prototype instanceof Model)) {\n            throw Error(\n                `\"model\" attribute \"${name}\" received an invalid class (subclass of Model is required).`\n            );\n        }\n\n        this.modelClass = model;\n    }\n\n    getModelClass(): Class<Model> {\n        return this.modelClass;\n    }\n\n    getModelInstance() {\n        const modelClass = this.getModelClass();\n        return new modelClass();\n    }\n\n    setValue(value: mixed) {\n        if (!this.canSetValue()) {\n            return;\n        }\n\n        let newValue = null;\n        if (value instanceof Model) {\n            newValue = value;\n        } else if (_.isObject(value)) {\n            newValue = this.getModelInstance();\n            newValue.populate(value);\n        } else {\n            newValue = value;\n        }\n\n        this.value.setCurrent(newValue);\n    }\n\n    async getJSONValue(): Promise<mixed> {\n        const value = this.getValue();\n        if (value instanceof Model) {\n            return {};\n        }\n        return value;\n    }\n\n    async getStorageValue(): Promise<mixed> {\n        const value = await this.getValue();\n        if (value instanceof Model) {\n            return await value.toStorage();\n        }\n        return value;\n    }\n\n    setStorageValue(value: mixed): this {\n        const newValue = this.getModelInstance().populateFromStorage(value);\n        this.value.setCurrent(newValue, { skipDifferenceCheck: true });\n        return this;\n    }\n\n    /**\n     * If value is assigned (checked in the parent validate call), it must by an instance of Model.\n     */\n    async validateType(value: mixed) {\n        if (value instanceof this.getModelClass()) {\n            return;\n        }\n        this.expected(\"instance of Model class\", typeof value);\n    }\n\n    /**\n     * We can be sure that value is an instance of Model since otherwise this point would not be reached\n     * (because of the validateType method above).\n     * @param value\n     * @returns {Promise<void>}\n     */\n    async validateValue(value: mixed): Promise<void> {\n        const currentValue = ((value: any): Model);\n        await currentValue.validate();\n    }\n}\n\nexport default ModelAttribute;\n"]}