{"version":3,"sources":["../../src/attributes/modelsAttribute.js"],"names":["ModelsAttribute","constructor","name","attributesContainer","model","prototype","Error","value","current","modelClass","getModelClass","getModelInstance","setValue","values","canSetValue","set","Array","setCurrent","newValues","i","length","isPlainObject","newValue","populate","clone","push","getValue","getJSONValue","getCurrent","json","getStorageValue","data","toStorage","setStorageValue","isArray","forEach","item","populateFromStorage","skipDifferenceCheck","validateType","expected","validateValue","arrayValue","errors","code","INVALID_ATTRIBUTE","index","message","validate","e","isEmpty","items"],"mappings":"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","file":"modelsAttribute.js","sourcesContent":["// @flow\nimport Attribute from \"./../attribute\";\nimport _ from \"lodash\";\nimport Model from \"./../model\";\nimport ModelError from \"./../modelError\";\nimport { AttributesContainer } from \"../index\";\n\nclass ModelsAttribute extends Attribute {\n    modelClass: Class<Model>;\n\n    constructor(name: string, attributesContainer: AttributesContainer, model: Class<Model>) {\n        super(name, attributesContainer);\n\n        // If provided class is not a subclass of Model, we must throw an error.\n        if (!(model.prototype instanceof Model)) {\n            throw Error(\n                `\"models\" attribute \"${name}\" received an invalid class (subclass of Model is required).`\n            );\n        }\n\n        this.value.current = [];\n        this.modelClass = model;\n    }\n\n    getModelClass(): Class<Model> {\n        return this.modelClass;\n    }\n\n    getModelInstance() {\n        const modelClass = this.getModelClass();\n        return new modelClass();\n    }\n\n    setValue(values: mixed) {\n        if (!this.canSetValue()) {\n            return;\n        }\n\n        this.value.set = true;\n\n        // Even if the value is invalid (eg. a string), we allow it here, but calling validate() will fail.\n        if (!(values instanceof Array)) {\n            this.value.setCurrent(values);\n            return;\n        }\n\n        let newValues = [];\n        for (let i = 0; i < values.length; i++) {\n            if (_.isPlainObject(values[i])) {\n                const newValue = this.getModelInstance();\n                newValue.populate(_.clone(values[i]));\n                newValues.push(newValue);\n            } else {\n                newValues.push(values[i]);\n            }\n        }\n        this.value.setCurrent(newValues);\n    }\n\n    getValue(): Array<Model> | null {\n        return (super.getValue(): any);\n    }\n\n    async getJSONValue(): Promise<mixed> {\n        const value = this.value.getCurrent();\n        if (value instanceof Array) {\n            const json = [];\n            for (let i = 0; i < value.length; i++) {\n                json.push({});\n            }\n            return json;\n        }\n\n        return value;\n    }\n\n    async getStorageValue(): Promise<Array<Object>> {\n        const value = this.getValue();\n        if (value instanceof Array) {\n            const data = [];\n            for (let i = 0; i < value.length; i++) {\n                data.push(await value[i].toStorage());\n            }\n            return data;\n        }\n        return [];\n    }\n\n    setStorageValue(value: mixed): this {\n        const newValue = [];\n        if (Array.isArray(value)) {\n            value.forEach(item => {\n                newValue.push(this.getModelInstance().populateFromStorage(item));\n            });\n\n            this.value.setCurrent(newValue, { skipDifferenceCheck: true });\n        }\n        return this;\n    }\n\n    /**\n     * If value is assigned (checked in the parent validate call), it must by an instance of Model.\n     */\n    async validateType(value: mixed) {\n        if (value instanceof Array) {\n            return;\n        }\n        this.expected(\"array\", typeof value);\n    }\n\n    async validateValue(value: mixed) {\n        const arrayValue = ((value: any): Array<Model>);\n        // This validates on all of the model's levels.\n        const errors = [];\n\n        for (let i = 0; i < arrayValue.length; i++) {\n            const current = arrayValue[i];\n            if (!(current instanceof this.getModelClass())) {\n                errors.push({\n                    code: ModelError.INVALID_ATTRIBUTE,\n                    data: {\n                        index: i\n                    },\n                    message: `Validation failed, item at index ${i} not an instance of Model class.`\n                });\n                continue;\n            }\n            try {\n                await current.validate();\n            } catch (e) {\n                errors.push({\n                    code: e.code,\n                    data: { index: i, ...e.data },\n                    message: e.message\n                });\n            }\n        }\n\n        if (!_.isEmpty(errors)) {\n            throw new ModelError(\"Validation failed.\", ModelError.INVALID_ATTRIBUTE, {\n                items: errors\n            });\n        }\n    }\n}\n\nexport default ModelsAttribute;\n"]}