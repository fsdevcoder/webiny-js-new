{"version":3,"sources":["../../src/attributes/arrayAttribute.js"],"names":["ArrayAttribute","validateType","value","Array","isArray","expected","validateValue","currentValue","errors","i","length","current","__isPrimitiveValue","push","code","INVALID_ATTRIBUTE","data","index","message","isEmpty","items","isString","isNumber","isBoolean","isNull"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,cAAN,6BAAuC;AACnC;;;AAGMC,gBAAN,CAAmBC,KAAnB,EAAiC;AAAA;;AAAA;AAC7B,gBAAIC,MAAMC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACtB;AACH;AACD,kBAAKG,QAAL,CAAc,OAAd,EAAuB,OAAOH,KAA9B;AAJ6B;AAKhC;;AAED;;;AAGMI,iBAAN,CAAoBJ,KAApB,EAAiD;AAAA;;AAAA;AAC7C,kBAAMK,eAA8BL,KAApC;;AAEA,kBAAMM,SAAS,EAAf;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,aAAaG,MAAjC,EAAyCD,GAAzC,EAA8C;AAC1C,sBAAME,UAAUJ,aAAaE,CAAb,CAAhB;AACA,oBAAI,CAAC,OAAKG,kBAAL,CAAwBD,OAAxB,CAAL,EAAuC;AACnCH,2BAAOK,IAAP,CAAY;AACRC,8BAAM,qBAAWC,iBADT;AAERC,8BAAM;AACFC,mCAAOR;AADL,yBAFE;AAKRS,iCAAU,oCAAmCT,CAAE;AALvC,qBAAZ;AAOH;AACJ;;AAED,gBAAI,CAAC,iBAAEU,OAAF,CAAUX,MAAV,CAAL,EAAwB;AACpB,sBAAM,yBAAe,oBAAf,EAAqC,qBAAWO,iBAAhD,EAAmE;AACrEK,2BAAOZ;AAD8D,iBAAnE,CAAN;AAGH;AArB4C;AAsBhD;;AAEDI,uBAAmBV,KAAnB,EAAwC;AACpC,eAAO,iBAAEmB,QAAF,CAAWnB,KAAX,KAAqB,iBAAEoB,QAAF,CAAWpB,KAAX,CAArB,IAA0C,iBAAEqB,SAAF,CAAYrB,KAAZ,CAA1C,IAAgE,iBAAEsB,MAAF,CAAStB,KAAT,CAAvE;AACH;AAxCkC;kBA2CxBF,c","file":"arrayAttribute.js","sourcesContent":["// @flow\nimport Attribute from \"./../attribute\";\nimport _ from \"lodash\";\nimport ModelError from \"./../modelError\";\n\nclass ArrayAttribute extends Attribute {\n    /**\n     * If value is assigned (checked in the parent validate call), it must by an instance of array.\n     */\n    async validateType(value: mixed) {\n        if (Array.isArray(value)) {\n            return;\n        }\n        this.expected(\"array\", typeof value);\n    }\n\n    /**\n     * @returns {Promise<void>}\n     */\n    async validateValue(value: mixed): Promise<void> {\n        const currentValue: Array<mixed> = (value: any);\n\n        const errors = [];\n        for (let i = 0; i < currentValue.length; i++) {\n            const current = currentValue[i];\n            if (!this.__isPrimitiveValue(current)) {\n                errors.push({\n                    code: ModelError.INVALID_ATTRIBUTE,\n                    data: {\n                        index: i\n                    },\n                    message: `Validation failed, item at index ${i} not a primitive value.`\n                });\n            }\n        }\n\n        if (!_.isEmpty(errors)) {\n            throw new ModelError(\"Validation failed.\", ModelError.INVALID_ATTRIBUTE, {\n                items: errors\n            });\n        }\n    }\n\n    __isPrimitiveValue(value: any): boolean {\n        return _.isString(value) || _.isNumber(value) || _.isBoolean(value) || _.isNull(value);\n    }\n}\n\nexport default ArrayAttribute;\n"]}