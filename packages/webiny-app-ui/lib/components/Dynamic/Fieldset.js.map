{"version":3,"sources":["../../../src/components/Dynamic/Fieldset.jsx"],"names":["insertKey","data","model","object","i","$key","Fieldset","props","state","initialState","currentKey","rowTemplate","headerTemplate","emptyTemplate","actions","add","record","addData","remove","removeData","map","m","bind","setState","value","parseLayout","children","attachToForm","form","isSubmitDisabled","Children","child","onChange","splice","$index","name","newProps","__tabs","newValue","cloneElement","registerInputs","registerInput","render","call","Object","keys","length","key","Component","defaultProps","defaultValue","formComponent"],"mappings":"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","file":"Fieldset.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { createComponent, isElementOfType } from 'webiny-app';\nimport { FormComponent } from 'webiny-app-ui';\nimport Row from './Row';\nimport Header from './Header';\nimport Empty from './Empty';\n\nfunction insertKey(data) {\n    if (!data) {\n        data = [];\n    }\n\n    const model = {};\n    _.each(data, (object, i) => {\n        if (_.isArray(object)) {\n            object = {};\n        }\n        if (!_.has(object, '$key')) {\n            const $key = _.uniqueId('dynamic-fieldset-');\n            object['$key'] = $key;\n            model[$key] = object;\n        } else {\n            model[object['$key']] = object;\n        }\n        model[object['$key']]['$index'] = i;\n    });\n\n    return model;\n}\n\nclass Fieldset extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...props.initialState\n        };\n\n        this.currentKey = 0;\n        this.rowTemplate = null;\n        this.headerTemplate = _.noop;\n        this.emptyTemplate = null;\n\n        this.actions = {\n            add: (record = null) => () => this.addData(record),\n            remove: record => () => this.removeData(record)\n        };\n\n        ['parseLayout', 'registerInputs', 'registerInput', 'addData', 'removeData'].map(m => this[m] = this[m].bind(this));\n    }\n\n    componentWillMount() {\n        this.setState({ model: insertKey(_.cloneDeep(this.props.value)) });\n        this.parseLayout(this.props.children);\n    }\n\n    componentDidMount() {\n        if (this.props.attachToForm) {\n            this.props.attachToForm(this);\n        }\n    }\n\n    componentWillReceiveProps(props) {\n        if (props.form.isSubmitDisabled()) {\n            // prevent modifying model and updating keys if props are received during form submit\n            return;\n        }\n\n        this.setState({ model: insertKey(_.cloneDeep(props.value)) });\n        this.parseLayout(props.children);\n    }\n\n    parseLayout(children) {\n        if (typeof children !== 'object' || children === null) {\n            return children;\n        }\n\n        React.Children.map(children, child => {\n            if (isElementOfType(child, Row)) {\n                this.rowTemplate = child.props.children;\n            }\n\n            if (isElementOfType(child, Header)) {\n                this.headerTemplate = child.props.children;\n            }\n\n            if (isElementOfType(child, Empty)) {\n                this.emptyTemplate = child.props.children;\n            }\n        });\n    }\n\n    removeData(record) {\n        delete this.state.model[record.$key];\n        this.props.onChange(_.values(this.state.model));\n    }\n\n    addData(record = null) {\n        const $key = _.uniqueId('dynamic-fieldset-');\n        if (!record) {\n            this.state.model[$key] = { $key };\n            this.props.onChange(_.values(this.state.model));\n        } else {\n            const model = _.values(this.state.model);\n            model.splice(record.$index + 1, 0, { $key });\n            this.props.onChange(model);\n        }\n    }\n\n    registerInput(child) {\n        if (typeof child !== 'object' || child === null) {\n            return child;\n        }\n\n        if (child.props && child.props.name) {\n            const $key = this.currentKey;\n            const newProps = _.assign({}, child.props, {\n                __tabs: this.props.__tabs,\n                attachToForm: this.props.attachToForm,\n                form: this.props.form,\n                value: _.get(this.state.model, $key + '.' + child.props.name),\n                name: $key + '.' + child.props.name,\n                onChange: newValue => {\n                    _.set(this.state.model, $key + '.' + child.props.name, newValue);\n                    this.props.onChange(_.values(this.state.model));\n                }\n            });\n\n            return React.cloneElement(child, newProps);\n        }\n        return React.cloneElement(child, _.omit(child.props, ['key', 'ref']), this.registerInputs(child.props && child.props.children));\n    }\n\n    registerInputs(children) {\n        if (typeof children !== 'object' || children === null) {\n            return children;\n        }\n        return React.Children.map(children, this.registerInput);\n    }\n\n    render() {\n        if (this.props.render) {\n            return this.props.render.call(this);\n        }\n\n        const { model } = this.state;\n        if (Object.keys(model).length) {\n            return (\n                <div>\n                    {this.headerTemplate({ actions: this.actions })}\n                    {Object.keys(model).map(key => {\n                        const record = model[key];\n                        this.currentKey = key;\n                        return (\n                            <webiny-dynamic-fieldset-row key={key}>\n                                {this.registerInputs(this.rowTemplate({ data: record, actions: this.actions }))}\n                            </webiny-dynamic-fieldset-row>\n                        );\n                    })}\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                {this.registerInputs(this.emptyTemplate({ actions: this.actions }))}\n            </div>\n        );\n    }\n}\n\nFieldset.defaultProps = {\n    defaultValue: []\n};\n\nexport default createComponent([Fieldset, FormComponent], {formComponent: true});"]}