{"version":3,"sources":["../../../src/components/Form/FormComponent.js"],"names":["FormComponent","component","props","detachFromForm","validators","attachValidators","state","isValid","validate","call","disabledBy","model","form","getModel","falsy","startsWith","value","disabled","validateInput","then","onBlur","validationResult","Promise","resolve","$this","cloneElement","children","isDisabled","attachToForm","instance","initialState","validationMessage","validationResults","Component","defaultProps","name","label","placeholder","info","description","readOnly","defaultValidate","onChange","showValidationMessage","tooltip","formatValue","renderLabel","required","indexOf","renderValidationMessage","success","console","log","renderInfo","renderDescription"],"mappings":"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","file":"FormComponent.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport FormGroup from \"./../FormGroup\";\n\nclass FormComponent extends React.Component {\n    constructor() {\n        super();\n        this.component = null;\n    }\n\n    componentWillUnmount() {\n        if (this.props.detachFromForm && this.component) {\n            this.props.detachFromForm(this.component);\n        }\n    }\n\n    componentWillReceiveProps(props) {\n        if (!_.isEqual(props.validators, this.props.validators) && this.props.attachValidators) {\n            this.props.attachValidators(props);\n            if (this.component.state.isValid === false) {\n                this.validate.call(this);\n            }\n        }\n    }\n\n    isDisabled() {\n        let disabledBy = this.props.disabledBy;\n        if (_.isFunction(disabledBy)) {\n            return disabledBy({ model: this.props.form.getModel() });\n        }\n\n        if (_.isString(disabledBy)) {\n            const falsy = disabledBy.startsWith(\"!\");\n            disabledBy = _.trimStart(disabledBy, \"!\");\n            const value = !!this.props.form.getModel(disabledBy);\n            return falsy ? value === false : value === true;\n        }\n\n        return this.props.disabled;\n    }\n\n    /**\n     * Validate component.\n     * `this` is bound to the component instance.\n     * @returns {*}\n     */\n    validate(validateInput) {\n        if (validateInput) {\n            return validateInput(this).then(validationResult => {\n                if (this.props.onBlur) {\n                    this.props.onBlur.call(null, validationResult, this);\n                }\n                return validationResult;\n            });\n        }\n        return Promise.resolve(true);\n    }\n\n    render() {\n        const $this = this;\n        const props = { ...this.props };\n        return React.cloneElement(this.props.children, {\n            ..._.omit(props, [\"children\", \"validateInput\", \"detachFromForm\", \"attachValidators\"]),\n            isDisabled: () => this.isDisabled(),\n            // a generic validation function\n            validate: () => this.validate.call(this.component, $this.props.validateInput),\n            attachToForm(instance) {\n                $this.component = instance;\n                props.attachToForm && props.attachToForm(instance);\n            },\n            initialState: {\n                isValid: null,\n                validationMessage: null,\n                validationResults: {}\n            }\n        });\n    }\n}\n\nFormComponent.defaultProps = {\n    name: null,\n    disabled: false,\n    disabledBy: null,\n    label: null,\n    placeholder: null,\n    info: null,\n    description: null,\n    readOnly: false,\n    form: null,\n    defaultValidate: null,\n    value: null,\n    validators: null,\n    onChange: _.noop,\n    showValidationMessage: true,\n    tooltip: null,\n    formatValue: null,\n    renderLabel() {\n        let label = null;\n        if (this.props.label) {\n            let required = null;\n            if (this.props.validators && this.props.validators.indexOf(\"required\") > -1) {\n                required = <FormGroup.Required />;\n            }\n\n            label = (\n                <FormGroup.Label tooltip={this.props.tooltip}>\n                    {this.props.label} {required}\n                </FormGroup.Label>\n            );\n        }\n\n        return label;\n    },\n    renderValidationMessage() {\n        let success = false;\n        if (this.state.isValid === true || this.state.isValid === null) {\n            success = true;\n        }\n\n        if (!this.props.showValidationMessage) {\n            return null;\n        }\n\n        !this.props.name && console.log(this.props);\n\n        return (\n            <FormGroup.ValidationMessage show={!success}>\n                {this.state.validationMessage}\n            </FormGroup.ValidationMessage>\n        );\n    },\n\n    renderInfo() {\n        let info = this.props.info;\n        if (_.isFunction(info)) {\n            info = info(this);\n        }\n\n        if (!info) {\n            return null;\n        }\n\n        return <FormGroup.InfoMessage>{info}</FormGroup.InfoMessage>;\n    },\n    renderDescription() {\n        let description = this.props.description;\n        if (_.isFunction(description)) {\n            description = description(this);\n        }\n\n        if (!description) {\n            return null;\n        }\n\n        return <FormGroup.DescriptionMessage>{description}</FormGroup.DescriptionMessage>;\n    }\n};\n\nexport default FormComponent;\n"]}