{"version":3,"sources":["../../../src/components/Form/validation.js"],"names":["React","Validation","name","validator","getValidator","props","defaultValidators","validators","split","push","parseValidateProperty","validatorsArray","parsedValidators","forEach","vName","v","shift","elements","customMessages","Array","isArray","item","type","children","value","formData","results","keys","Object","i","funcValidator","args","inputs","parseArgs","unshift","message","Promise","resolve","then","result","Error","catch","e","length","formInputs","index","indexOf","inputName","component"],"mappings":"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","file":"validation.js","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport _ from \"lodash\";\nimport { validation } from \"webiny-validation\";\nimport type { Validator } from \"webiny-validation/types\";\nimport ValidationError from \"./ValidationError\";\n\nclass Validation {\n    getValidator(name: string): Validator {\n        const validator = validation.getValidator(name);\n        if (!validator) {\n            throw new ValidationError(\"Validator `\" + name + \"` does not exist!\", name);\n        }\n        return validator;\n    }\n\n    getValidatorsFromProps(props: Object) {\n        let { defaultValidators, validators } = props;\n        if (!validators) {\n            validators = [];\n        }\n\n        if (typeof validators === \"string\") {\n            validators = validators.split(\",\");\n        }\n\n        if (defaultValidators) {\n            validators.push(defaultValidators);\n        }\n\n        return this.parseValidateProperty(validators);\n    }\n\n    parseValidateProperty(validators: string | Array<any>): Object {\n        if (!validators) {\n            return {};\n        }\n\n        let validatorsArray = typeof validators === \"string\" ? validators.split(\",\") : validators;\n\n        const parsedValidators = {};\n        validatorsArray.forEach(v => {\n            let validator = null;\n            let vName = null;\n            if (typeof v === \"string\") {\n                validator = _.trim(v).split(\":\");\n                vName = validator.shift();\n            } else {\n                validator = v;\n                vName = _.uniqueId(\"validator\");\n            }\n            parsedValidators[vName] = validator;\n        });\n        return parsedValidators;\n    }\n\n    parseCustomValidationMessages(elements: React.Element<*> | Array<React.Element<*>>) {\n        const customMessages = {};\n\n        if (!elements) {\n            return customMessages;\n        }\n\n        if (!Array.isArray(elements)) {\n            elements = [elements];\n        }\n\n        elements.forEach(item => {\n            if (item.type === \"validator\" && item.props.children) {\n                customMessages[item.props.name] = item.props.children;\n            }\n        });\n\n        return customMessages;\n    }\n\n    async validate(value: any, validators: string | Object, formData: Object = {}): Promise<any> {\n        if (typeof validators === \"string\") {\n            validators = this.parseValidateProperty(validators);\n        }\n\n        const results = {};\n        const keys = Object.keys(validators);\n        for (let i = 0; i < keys.length; i++) {\n            const name = keys[i];\n\n            const funcValidator = typeof validators[name] === \"function\" ? validators[name] : false;\n            const args = funcValidator ? [] : _.clone(validators[name]);\n\n            if (formData.inputs) {\n                this.parseArgs(args, formData.inputs);\n            }\n\n            args.unshift(value);\n            args.push(formData);\n\n            let validator = null;\n            try {\n                validator = funcValidator\n                    ? funcValidator(...args)\n                    : this.getValidator(name)(...args);\n            } catch (e) {\n                throw new ValidationError(e.message, name, value);\n            }\n\n            await Promise.resolve(validator)\n                .then(result => {\n                    if (result instanceof Error) {\n                        throw result;\n                    }\n                    results[name] = result;\n                })\n                .catch(e => {\n                    throw new ValidationError(e.message, name, value);\n                });\n        }\n\n        return results;\n    }\n\n    /**\n     * Insert dynamic values into validator arguments\n     *\n     * @param args\n     * @param formInputs\n     */\n    parseArgs(args: Array<mixed>, formInputs: Object) {\n        _.each(args, (value, index) => {\n            if (value.indexOf(\"@\") === 0) {\n                const inputName = _.trimStart(value, \"@\");\n                args[index] = formInputs[inputName].component.props.value;\n            }\n        });\n    }\n}\n\nexport default new Validation();\n"]}