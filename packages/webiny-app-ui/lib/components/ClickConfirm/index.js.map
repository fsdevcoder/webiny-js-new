{"version":3,"sources":["../../../src/components/ClickConfirm/index.js"],"names":["t","namespace","ClickConfirm","props","message","realOnClick","dialogId","onClick","bind","onConfirm","onCancel","msg","renderDialog","setState","time","services","get","show","Children","toArray","children","hide","then","data","Promise","resolve","render","call","input","getInput","dialogProps","name","onComplete","Modal","dialog","cloneElement","Component","defaultProps","modules"],"mappings":"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","file":"index.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { app, createComponent, i18n } from \"webiny-app\";\n\n/**\n * If onClick function we are handling returns a function, the confirmation dialog will be hidden before executing the function.\n * This will prevent unwanted unmounts and execution of code on unmounted components.\n */\n\nconst t = i18n.namespace(\"Webiny.Ui.ClickConfirm\");\nclass ClickConfirm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.message = null;\n        this.realOnClick = _.noop;\n        this.dialogId = _.uniqueId(\"click-confirm-\");\n\n        this.onClick = this.onClick.bind(this);\n        this.onConfirm = this.onConfirm.bind(this);\n        this.onCancel = this.onCancel.bind(this);\n    }\n\n    onClick() {\n        let msg = this.props.message;\n        if (_.isFunction(msg)) {\n            msg = msg();\n        }\n\n        if (!msg && !this.props.renderDialog) {\n            this.realOnClick();\n            return;\n        }\n\n        this.message = msg;\n        this.setState({ time: _.now() }, () => {\n            app.services.get(\"modal\").show(this.dialogId);\n        });\n    }\n\n    getInput(props) {\n        return React.Children.toArray(props.children)[0];\n    }\n\n    onCancel() {\n        return app.services\n            .get(\"modal\")\n            .hide(this.dialogId)\n            .then(this.props.onCancel);\n    }\n\n    /**\n     * The `data` param can be used when creating a custom confirmation dialog (maybe even with a form).\n     * When calling `confirm` callback - whatever data is passed to it will be passed down to original `onClick` handler.\n     * That way you can dynamically handle the different scenarios of the confirmation dialog.\n     *\n     * @returns {Promise.<*>}\n     */\n    onConfirm(data = {}) {\n        return Promise.resolve(this.realOnClick(data, this));\n    }\n\n    render() {\n        if (this.props.render) {\n            return this.props.render.call(this);\n        }\n\n        // Input\n        const input = this.getInput(this.props);\n        this.realOnClick = input.props.onClick;\n        const props = _.omit(input.props, [\"onClick\"]);\n        props.onClick = this.onClick;\n\n        const dialogProps = {\n            name: this.dialogId,\n            message: this.message,\n            onConfirm: this.onConfirm,\n            onCancel: this.onCancel,\n            onComplete: this.props.onComplete\n        };\n\n        const { Modal } = this.props;\n        const dialog = _.isFunction(this.props.renderDialog) ? (\n            this.props.renderDialog()\n        ) : (\n            <Modal.Confirmation />\n        );\n\n        return (\n            <webiny-click-confirm>\n                {React.cloneElement(input, props)}\n                {React.cloneElement(dialog, dialogProps)}\n            </webiny-click-confirm>\n        );\n    }\n}\n\nClickConfirm.defaultProps = {\n    message: t`We need you to confirm your action.`,\n    onComplete: _.noop,\n    onCancel: _.noop,\n    renderDialog: null\n};\n\nexport default createComponent(ClickConfirm, { modules: [\"Modal\"] });\n"]}