{"version":3,"sources":["../../../src/components/CheckboxGroup/index.js"],"names":["CheckboxGroup","props","state","initialState","renderOptions","bind","onChange","attachToForm","key","newValue","option","options","newState","value","formatOptionValue","useDataAsValue","data","id","push","currentIndex","optValue","valueKey","opt","splice","validate","callback","Checkbox","map","item","checked","label","text","disabled","isDisabled","optionIndex","renderCheckbox","render","renderCheckboxLabel","labelRenderer","checkbox","call","FormGroup","styles","isValid","className","renderLabel","renderValidationMessage","Component","defaultProps","modules","formComponent"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { createComponent } from 'webiny-app';\nimport { OptionComponent } from \"webiny-app-ui\";\nimport styles from './styles.css';\n\nclass CheckboxGroup extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...props.initialState\n        };\n\n        this.renderOptions = this.renderOptions.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.attachToForm) {\n            this.props.attachToForm(this);\n        }\n    }\n\n    onChange(key, newValue) {\n        const option = this.props.options[key];\n        const newState = this.props.value || [];\n        if (newValue) {\n            newValue = this.props.formatOptionValue({ value: this.props.useDataAsValue ? option.data : option.id });\n            newState.push(newValue);\n        } else {\n            const currentIndex = _.findIndex(newState, opt => {\n                const optValue = this.props.valueKey ? _.get(opt, this.props.valueKey) : opt;\n                return optValue === option.id;\n            });\n\n            newState.splice(currentIndex, 1);\n        }\n        this.props.onChange(newState, this.validate);\n    }\n\n    /**\n     * Create options elements\n     *\n     * Callback parameter is used when you need to implement a custom renderer and optionally wrap each option element with custom markup\n     *\n     * @returns {Array}\n     */\n    renderOptions(callback = null) {\n        const { Checkbox } = this.props;\n        return this.props.options.map((item, key) => {\n            const checked = _.find(this.props.value, opt => {\n                if (_.isPlainObject(opt)) {\n                    return _.get(opt, this.props.valueKey) === item.id;\n                }\n                return opt === item.id;\n            });\n\n            const props = {\n                key, // React key\n                label: item.text,\n                disabled: this.props.isDisabled(),\n                value: checked, // true/false\n                onChange: this.onChange,\n                option: item,\n                optionIndex: key\n            };\n\n            if (_.isFunction(this.props.renderCheckbox)) {\n                props.render = this.props.renderCheckbox;\n            }\n\n            if (_.isFunction(this.props.renderCheckboxLabel)) {\n                props.labelRenderer = this.props.renderCheckboxLabel;\n            }\n            const checkbox = <Checkbox {...props}/>;\n\n            if (callback) {\n                return callback(checkbox, key);\n            }\n\n            return checkbox;\n        });\n    }\n\n    render() {\n        if (this.props.render) {\n            return this.props.render.call(this);\n        }\n\n        const { FormGroup, styles } = this.props;\n\n        return (\n            <FormGroup valid={this.state.isValid} className={this.props.className}>\n                {this.props.renderLabel.call(this)}\n                <div className=\"clearfix\"/>\n                <div className={'inputGroup ' + (this.props.disabled && styles.disabled)}>\n                    {this.renderOptions()}\n                </div>\n                {this.props.renderValidationMessage.call(this)}\n            </FormGroup>\n        );\n    }\n}\n\nCheckboxGroup.defaultProps = {\n    renderCheckbox: null,\n    renderCheckboxLabel: null,\n    formatOptionValue: ({ value }) => value\n};\n\nexport default createComponent([CheckboxGroup, OptionComponent], {\n    modules: ['Checkbox', 'FormGroup'],\n    formComponent: true,\n    styles\n});"]}