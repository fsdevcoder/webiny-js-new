{"version":3,"sources":["../../../src/components/Option/OptionComponent.js"],"names":["OptionComponent","props","state","options","loading","mounted","cancelRequest","loadOptions","bind","normalizeOptions","setFilters","applyFilter","filterBy","name","filter","loadIfEmpty","filterName","filterField","filterLoadIfEmpty","unwatch","form","watch","newValue","value","getModel","pick","oldProps","newProps","api","setState","onChange","config","filters","id","defaults","params","key","push","text","query","filteredByValue","request","cancelToken","CancelToken","cancel","then","data","apiResponse","Array","isArray","list","prepareLoadedData","catch","isCancel","err","console","log","uiElement","children","Children","map","child","type","renderOptionText","option","valueAttr","optionRenderer","isValidElement","textAttr","cloneElement","Component","defaultProps","useDataAsValue","valueKey"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AACA;;AACA;;;;;;IAEMA,e;;;AACF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,oJACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,qBAAS,EADA;AAETC,qBAAS;AAFA,SAAb;;AAKA,cAAKC,OAAL,GAAe,KAAf;AACA,cAAKC,aAAL,GAAqB,IAArB;;AAEA,cAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AACA,cAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;AACA,cAAKE,UAAL,GAAkB,MAAKA,UAAL,CAAgBF,IAAhB,OAAlB;AACA,cAAKG,WAAL,GAAmB,MAAKA,WAAL,CAAiBH,IAAjB,OAAnB;;AAEA,YAAI,MAAKP,KAAL,CAAWW,QAAf,EAAyB;AACrB;AACA,gBAAIC,OAAO,MAAKZ,KAAL,CAAWW,QAAtB;AACA,gBAAIE,SAAS,MAAKb,KAAL,CAAWW,QAAxB;AACA,gBAAIG,cAAc,KAAlB;;AAEA;AACA,gBAAI,uBAAU,MAAKd,KAAL,CAAWW,QAArB,CAAJ,EAAoC;AAChCC,uBAAO,MAAKZ,KAAL,CAAWW,QAAX,CAAoB,CAApB,CAAP;AACAE,yBAAS,MAAKb,KAAL,CAAWW,QAAX,CAAoB,CAApB,CAAT;AACH;;AAED;AACA,gBAAI,6BAAgB,MAAKX,KAAL,CAAWW,QAA3B,CAAJ,EAA0C;AACtCC,uBAAO,MAAKZ,KAAL,CAAWW,QAAX,CAAoBC,IAA3B;AACAC,yBAAS,MAAKb,KAAL,CAAWW,QAAX,CAAoBE,MAA7B;AACAC,8BAAc,mBAAM,MAAKd,KAAL,CAAWW,QAAjB,EAA2B,aAA3B,EAA0CG,WAA1C,CAAd;AACH;;AAED,kBAAKC,UAAL,GAAkBH,IAAlB;AACA,kBAAKI,WAAL,GAAmBH,MAAnB;AACA,kBAAKI,iBAAL,GAAyBH,WAAzB;;AAEA,kBAAKI,OAAL,GAAe,MAAKlB,KAAL,CAAWmB,IAAX,CAAgBC,KAAhB,CAAsBR,IAAtB,EAA4B;AAAA,uBACvC,MAAKF,WAAL,CAAiBW,QAAjB,EAA2BT,IAA3B,EAAiCC,MAAjC,EAAyCC,WAAzC,CADuC;AAAA,aAA5B,CAAf;AAGH;AA1Cc;AA2ClB;;;;4CAEmB;AAChB,iBAAKV,OAAL,GAAe,IAAf;AACA,gBACI,CAAC,KAAKJ,KAAL,CAAWW,QAAZ,IACA,KAAKX,KAAL,CAAWsB,KAAX,KAAqB,IADrB,IAEC,KAAKP,UAAL,IAAmB,KAAKf,KAAL,CAAWmB,IAAX,CAAgBI,QAAhB,CAAyB,KAAKR,UAA9B,CAHxB,EAIE;AACE,qBAAKT,WAAL,CAAiB,KAAKN,KAAtB;AACH;AACJ;;;kDAEyBA,K,EAAO;AAC7B,gBAAMwB,OAAO,CAAC,SAAD,EAAY,UAAZ,CAAb;AACA,gBAAMC,WAAW,oBAAO,KAAKzB,KAAZ,EAAmBwB,IAAnB,CAAjB;AACA,gBAAME,WAAW,oBAAO1B,KAAP,EAAcwB,IAAd,CAAjB;AACA,gBAAI,CAAC,uBAAUE,QAAV,EAAoBD,QAApB,CAAD,IAAkC,CAAC,KAAKzB,KAAL,CAAW2B,GAAlD,EAAuD;AACnD,qBAAKrB,WAAL,CAAiBN,KAAjB;AACH;AACJ;;;+CAEsB;AACnB,iBAAKI,OAAL,GAAe,KAAf;;AAEA,gBAAI,KAAKc,OAAT,EAAkB;AACd,qBAAKA,OAAL;AACH;;AAED,gBAAI,KAAKb,aAAT,EAAwB;AACpB,qBAAKA,aAAL;AACH;AACJ;;;oCAEWgB,Q,EAAUT,I,EAAMC,M,EAAQC,W,EAAa;AAC7C,gBAAIO,aAAa,IAAb,IAAqB,CAACP,WAA1B,EAAuC;AACnC,qBAAKc,QAAL,CAAc,EAAE1B,SAAS,EAAX,EAAd;AACA,qBAAKF,KAAL,CAAW6B,QAAX,CAAoB,IAApB;AACA;AACH;;AAED;AACA,gBAAI,0BAAahB,MAAb,CAAJ,EAA0B;AACtB,oBAAMiB,SAASjB,OAAOQ,QAAP,EAAiB,KAAKrB,KAAL,CAAW2B,GAA5B,CAAf;AACA,oBAAI,6BAAgBG,MAAhB,CAAJ,EAA6B;AACzB,yBAAKrB,UAAL,CAAgBqB,MAAhB;AACH,iBAFD,MAEO;AACH,yBAAKxB,WAAL;AACH;AACJ,aAPD,MAOO;AACH;AACA,oBAAMyB,UAAU,EAAhB;AACAA,wBAAQlB,MAAR,IAAkB,wBAAWQ,QAAX,IAAuBA,SAASW,EAAhC,GAAqCX,QAAvD;AACA,qBAAKZ,UAAL,CAAgBsB,OAAhB;AACH;AACJ;;;mCAEUA,O,EAAS;AAChB,iBAAK/B,KAAL,CAAW2B,GAAX,CAAeM,QAAf,CAAwBC,MAAxB,qBAAsC,KAAKlC,KAAL,CAAW2B,GAAX,CAAeM,QAAf,CAAwBC,MAA9D,EAAyEH,OAAzE;AACA,iBAAKzB,WAAL;AACA,mBAAO,IAAP;AACH;;;sCAEyB;AAAA;;AAAA,gBAAdN,KAAc,uEAAN,IAAM;;AACtB,gBAAIE,UAAU,EAAd;AACA,gBAAI,CAACF,KAAL,EAAY;AACRA,wBAAQ,KAAKA,KAAb;AACH;;AAED,gBAAIA,MAAME,OAAV,EAAmB;AACf,oBAAI,6BAAgBF,MAAME,OAAtB,CAAJ,EAAoC;AAChC,wCAAOF,MAAME,OAAb,EAAsB,UAACoB,KAAD,EAAQa,GAAR,EAAgB;AAClCjC,gCAAQkC,IAAR,CAAa;AACTJ,gCAAIG,GADK;AAETE,kCAAMf;AAFG,yBAAb;AAIH,qBALD;AAMH;;AAED,oBAAI,uBAAUtB,MAAME,OAAhB,CAAJ,EAA8B;AAC1BA,8BAAU,KAAKM,gBAAL,CAAsBR,KAAtB,EAA6BA,MAAME,OAAnC,CAAV;AACH;;AAED,uBAAO,KAAK0B,QAAL,CAAc,EAAE1B,gBAAF,EAAd,CAAP;AACH;;AAED,gBAAI,KAAKF,KAAL,CAAW2B,GAAf,EAAoB;AAChB,oBAAMW,QAAQ,EAAd;AACA,oBAAI,KAAKtC,KAAL,CAAWW,QAAf,EAAyB;AACrB;AACA,wBAAIE,SAAS,IAAb;AACA,wBAAM0B,kBAAkB,KAAKvC,KAAL,CAAWmB,IAAX,CAAgBI,QAAhB,CAAyB,KAAKR,UAA9B,CAAxB;;AAEA;AACA,wBAAI,CAACwB,eAAD,IAAoBA,oBAAoB,KAAxC,IAAiD,CAAC,KAAKtB,iBAA3D,EAA8E;AAC1E,+BAAO,IAAP;AACH;;AAED,wBAAI,0BAAa,KAAKD,WAAlB,CAAJ,EAAoC;AAChCH,iCAAS,KAAKG,WAAL,CAAiBuB,eAAjB,EAAkC,KAAKvC,KAAL,CAAW2B,GAA7C,CAAT;AACA,4BAAI,6BAAgBd,MAAhB,CAAJ,EAA6B;AACzB,iDAAQyB,KAAR,EAAezB,MAAf;AACH;AACJ;;AAED,wBAAI,wBAAW,KAAKG,WAAhB,CAAJ,EAAkC;AAC9BsB,8BAAM,KAAKtB,WAAX,IAA0BuB,eAA1B;AACH;;AAED,yBAAKvC,KAAL,CAAW2B,GAAX,CAAeM,QAAf,CAAwBC,MAAxB,qBAAsC,KAAKlC,KAAL,CAAW2B,GAAX,CAAeM,QAAf,CAAwBC,MAA9D,EAAyEI,KAAzE;AACH;;AAED,qBAAKV,QAAL,CAAc,EAAEzB,SAAS,IAAX,EAAd;AACA,qBAAKqC,OAAL,GAAe,KAAKxC,KAAL,CAAW2B,GAAX,CACVa,OADU,CACF;AACLC,iCAAa,IAAI,gBAAMC,WAAV,CAAsB,kBAAU;AACzC,+BAAKrC,aAAL,GAAqBsC,MAArB;AACH,qBAFY;AADR,iBADE,EAMVC,IANU,CAML,uBAAe;AACjB,2BAAKJ,OAAL,GAAe,IAAf;AACA,2BAAKnC,aAAL,GAAqB,IAArB;;AAFiB,wBAIXwC,IAJW,GAIFC,YAAYD,IAJV,CAIXA,IAJW;;AAKjB,wBAAI,6BAAgBA,IAAhB,KAAyBE,MAAMC,OAAN,CAAcH,KAAKI,IAAnB,CAA7B,EAAuD;AACnDJ,+BAAOA,KAAKI,IAAZ;AACH;;AAED,wBAAI,OAAKjD,KAAL,CAAWkD,iBAAf,EAAkC;AAC9BL,+BAAO,OAAK7C,KAAL,CAAWkD,iBAAX,CAA6B,EAAEL,UAAF,EAA7B,CAAP;AACH;;AAED,2BAAKjB,QAAL,CAAc,EAAE1B,SAAS,OAAKM,gBAAL,CAAsBR,KAAtB,EAA6B6C,IAA7B,CAAX,EAA+C1C,SAAS,KAAxD,EAAd;AACH,iBApBU,EAqBVgD,KArBU,CAqBJ,eAAO;AACV,wBAAI,gBAAMC,QAAN,CAAeC,GAAf,CAAJ,EAAyB;AACrB,+BAAO,OAAKjD,OAAL,GAAe,OAAKwB,QAAL,CAAc,EAAEzB,SAAS,KAAX,EAAd,CAAf,GAAmD,IAA1D;AACH;AACDmD,4BAAQC,GAAR,CAAYF,GAAZ;AACH,iBA1BU,CAAf;;AA4BA,uBAAO,KAAKb,OAAZ;AACH;;AAED;;;;;;;;;;;;AAYA,gBAAMgB,YAAYxD,MAAMyD,QAAxB;;AAEA,gBAAID,UAAUxD,KAAV,CAAgByD,QAApB,EAA8B;AAC1B,gCAAMC,QAAN,CAAeC,GAAf,CAAmBH,UAAUxD,KAAV,CAAgByD,QAAnC,EAA6C,iBAAS;AAClD,wBAAIG,MAAMC,IAAN,KAAe,QAAnB,EAA6B;AACzB3D,gCAAQkC,IAAR,CAAa;AACTJ,gCAAI4B,MAAM5D,KAAN,CAAYsB,KADP;AAETe,kCAAM,OAAKyB,gBAAL,CAAsBN,UAAUxD,KAAhC,EAAuC4D,MAAM5D,KAAN,CAAYyD,QAAnD;AAFG,yBAAb;AAIH;AACJ,iBAPD;AAQA,uBAAO,KAAK7B,QAAL,CAAc,EAAE1B,gBAAF,EAAd,CAAP;AACH;AACJ;;;yCAEgBF,K,EAAO6C,I,EAAM;AAAA;;AAC1B,gBAAM3C,UAAU,EAAhB;AACA,gCAAO2C,IAAP,EAAa,UAACkB,MAAD,EAAS5B,GAAT,EAAiB;AAC1B,oBAAI,wBAAWA,GAAX,MAAoB,wBAAW4B,MAAX,KAAsB,wBAAWA,MAAX,CAA1C,CAAJ,EAAmE;AAC/D7D,4BAAQkC,IAAR,CAAa,EAAEJ,IAAIG,GAAN,EAAWE,MAAM,KAAK0B,MAAtB,EAA8BlB,MAAM,IAApC,EAAb;AACA;AACH;;AAED,oBAAMb,KAAK,6BAAgB+B,MAAhB,IAA0BA,OAAO/D,MAAMgE,SAAN,IAAmB,IAA1B,CAA1B,GAA4D,KAAKD,MAA5E;AACA,oBAAM1B,OAAO,OAAKyB,gBAAL,CAAsB9D,KAAtB,EAA6B+D,MAA7B,CAAb;AACA;AACA7D,wBAAQkC,IAAR,CAAa,EAAEJ,MAAF,EAAMK,UAAN,EAAYQ,MAAMkB,MAAlB,EAAb;AACH,aAVD;;AAYA,mBAAO7D,OAAP;AACH;;;yCAEgBF,K,EAAO+D,M,EAAQ;AAC5B,gBAAI/D,MAAMiE,cAAV,EAA0B;AACtB,uBAAOjE,MAAMiE,cAAN,CAAqB,EAAEF,QAAQ,EAAElB,MAAMkB,MAAR,EAAV,EAArB,CAAP;AACH,aAFD,MAEO,IAAI,6BAAgBA,MAAhB,KAA2B,CAAC,gBAAMG,cAAN,CAAqBH,MAArB,CAAhC,EAA8D;AACjE,uBAAO,mBAAMA,MAAN,EAAc/D,MAAMmE,QAApB,CAAP;AACH,aAFM,MAEA,IAAI,wBAAWJ,MAAX,CAAJ,EAAwB;AAC3B,uBAAOA,MAAP;AACH;AACD,mBAAO,uBAAUA,MAAV,IAAoBA,OAAO,CAAP,CAApB,GAAgCA,MAAvC;AACH;;;iCAEQ;AACL,mBAAO,gBAAMK,YAAN,CAAmB,KAAKpE,KAAL,CAAWyD,QAA9B,oBACA,oBAAO,KAAKzD,KAAZ,EAAmB,CAAC,UAAD,CAAnB,CADA;AAEHE,yBAAS,KAAKD,KAAL,CAAWC;AAFjB,eAAP;AAIH;;;EAxPyB,gBAAMmE,S;;AA2PpCtE,gBAAgBuE,YAAhB,GAA+B;AAC3BN,eAAW,IADgB,EACV;AACjBG,cAAU,MAFiB,EAET;AAClBI,oBAAgB,KAHW,EAGJ;AACvBC,cAAU,IAJiB,EAIX;AAChB7D,cAAU,IALiB;AAM3BuC,uBAAmB;AANQ,CAA/B;;kBASe,gCAAgB,CAACnD,eAAD,sDAAhB,C","file":"OptionComponent.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { createComponent, ApiComponent } from \"webiny-app\";\nimport { FormComponent } from \"webiny-app-ui\";\nimport axios from \"axios\";\n\nclass OptionComponent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: [],\n            loading: false\n        };\n\n        this.mounted = false;\n        this.cancelRequest = null;\n\n        this.loadOptions = this.loadOptions.bind(this);\n        this.normalizeOptions = this.normalizeOptions.bind(this);\n        this.setFilters = this.setFilters.bind(this);\n        this.applyFilter = this.applyFilter.bind(this);\n\n        if (this.props.filterBy) {\n            // Assume the most basic form of filtering (single string)\n            let name = this.props.filterBy;\n            let filter = this.props.filterBy;\n            let loadIfEmpty = false;\n\n            // Check if filterBy is defined as array (0 => name of the input to watch, 1 => filter by field)\n            if (_.isArray(this.props.filterBy)) {\n                name = this.props.filterBy[0];\n                filter = this.props.filterBy[1];\n            }\n\n            // Check if filterBy is defined as object\n            if (_.isPlainObject(this.props.filterBy)) {\n                name = this.props.filterBy.name;\n                filter = this.props.filterBy.filter;\n                loadIfEmpty = _.get(this.props.filterBy, \"loadIfEmpty\", loadIfEmpty);\n            }\n\n            this.filterName = name;\n            this.filterField = filter;\n            this.filterLoadIfEmpty = loadIfEmpty;\n\n            this.unwatch = this.props.form.watch(name, newValue =>\n                this.applyFilter(newValue, name, filter, loadIfEmpty)\n            );\n        }\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        if (\n            !this.props.filterBy ||\n            this.props.value !== null ||\n            (this.filterName && this.props.form.getModel(this.filterName))\n        ) {\n            this.loadOptions(this.props);\n        }\n    }\n\n    componentWillReceiveProps(props) {\n        const pick = [\"options\", \"children\"];\n        const oldProps = _.pick(this.props, pick);\n        const newProps = _.pick(props, pick);\n        if (!_.isEqual(newProps, oldProps) && !this.props.api) {\n            this.loadOptions(props);\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n\n        if (this.unwatch) {\n            this.unwatch();\n        }\n\n        if (this.cancelRequest) {\n            this.cancelRequest();\n        }\n    }\n\n    applyFilter(newValue, name, filter, loadIfEmpty) {\n        if (newValue === null && !loadIfEmpty) {\n            this.setState({ options: [] });\n            this.props.onChange(null);\n            return;\n        }\n\n        // If filter is a function, it needs to return a config for api created using new value\n        if (_.isFunction(filter)) {\n            const config = filter(newValue, this.props.api);\n            if (_.isPlainObject(config)) {\n                this.setFilters(config);\n            } else {\n                this.loadOptions();\n            }\n        } else {\n            // If filter is a string, create a filter object using that string as field name\n            const filters = {};\n            filters[filter] = _.isObject(newValue) ? newValue.id : newValue;\n            this.setFilters(filters);\n        }\n    }\n\n    setFilters(filters) {\n        this.props.api.defaults.params = { ...this.props.api.defaults.params, ...filters };\n        this.loadOptions();\n        return this;\n    }\n\n    loadOptions(props = null) {\n        let options = [];\n        if (!props) {\n            props = this.props;\n        }\n\n        if (props.options) {\n            if (_.isPlainObject(props.options)) {\n                _.each(props.options, (value, key) => {\n                    options.push({\n                        id: key,\n                        text: value\n                    });\n                });\n            }\n\n            if (_.isArray(props.options)) {\n                options = this.normalizeOptions(props, props.options);\n            }\n\n            return this.setState({ options });\n        }\n\n        if (this.props.api) {\n            const query = {};\n            if (this.props.filterBy) {\n                // Get current value of the field that filters current field\n                let filter = null;\n                const filteredByValue = this.props.form.getModel(this.filterName);\n\n                // Do not load options if `loadIfEmpty` is not defined\n                if (!filteredByValue && filteredByValue !== false && !this.filterLoadIfEmpty) {\n                    return null;\n                }\n\n                if (_.isFunction(this.filterField)) {\n                    filter = this.filterField(filteredByValue, this.props.api);\n                    if (_.isPlainObject(filter)) {\n                        _.merge(query, filter);\n                    }\n                }\n\n                if (_.isString(this.filterField)) {\n                    query[this.filterField] = filteredByValue;\n                }\n\n                this.props.api.defaults.params = { ...this.props.api.defaults.params, ...query };\n            }\n\n            this.setState({ loading: true });\n            this.request = this.props.api\n                .request({\n                    cancelToken: new axios.CancelToken(cancel => {\n                        this.cancelRequest = cancel;\n                    })\n                })\n                .then(apiResponse => {\n                    this.request = null;\n                    this.cancelRequest = null;\n\n                    let { data } = apiResponse.data;\n                    if (_.isPlainObject(data) && Array.isArray(data.list)) {\n                        data = data.list;\n                    }\n\n                    if (this.props.prepareLoadedData) {\n                        data = this.props.prepareLoadedData({ data });\n                    }\n\n                    this.setState({ options: this.normalizeOptions(props, data), loading: false });\n                })\n                .catch(err => {\n                    if (axios.isCancel(err)) {\n                        return this.mounted ? this.setState({ loading: false }) : null;\n                    }\n                    console.log(err);\n                });\n\n            return this.request;\n        }\n\n        /**\n         * Check options defined using <option> element.\n         * Since this is a HOC, we need to access the actual UI component's children.\n         * As a reminder, the structure looks like this:\n         *\n         * <OptionComponent> <-- this is where we currently are\n         *     <Select>\n         *         <option value={x}>Label X</option>\n         *         <option value={y}>Label Y</option>\n         *     </Select>\n         * </OptionComponent>\n         */\n        const uiElement = props.children;\n\n        if (uiElement.props.children) {\n            React.Children.map(uiElement.props.children, child => {\n                if (child.type === \"option\") {\n                    options.push({\n                        id: child.props.value,\n                        text: this.renderOptionText(uiElement.props, child.props.children)\n                    });\n                }\n            });\n            return this.setState({ options });\n        }\n    }\n\n    normalizeOptions(props, data) {\n        const options = [];\n        _.each(data, (option, key) => {\n            if (_.isString(key) && (_.isString(option) || _.isNumber(option))) {\n                options.push({ id: key, text: \"\" + option, data: null });\n                return;\n            }\n\n            const id = _.isPlainObject(option) ? option[props.valueAttr || \"id\"] : \"\" + option;\n            const text = this.renderOptionText(props, option);\n            // Add data to option so we can run it through selectedRenderer when item selection changes\n            options.push({ id, text, data: option });\n        });\n\n        return options;\n    }\n\n    renderOptionText(props, option) {\n        if (props.optionRenderer) {\n            return props.optionRenderer({ option: { data: option } });\n        } else if (_.isPlainObject(option) && !React.isValidElement(option)) {\n            return _.get(option, props.textAttr);\n        } else if (_.isString(option)) {\n            return option;\n        }\n        return _.isArray(option) ? option[0] : option;\n    }\n\n    render() {\n        return React.cloneElement(this.props.children, {\n            ..._.omit(this.props, [\"children\"]),\n            options: this.state.options\n        });\n    }\n}\n\nOptionComponent.defaultProps = {\n    valueAttr: \"id\", // Attribute to use as option value (when option is a an object, usually used with API)\n    textAttr: \"name\", // Attribute to use as option text (when option is a an object, usually used with API)\n    useDataAsValue: false, // Will assign selected/checked value in form of data (usually from API)\n    valueKey: null, // used only for rendering to map complex options to model values (only used when component value is an object)\n    filterBy: null,\n    prepareLoadedData: null\n};\n\nexport default createComponent([OptionComponent, ApiComponent, FormComponent]);\n"]}