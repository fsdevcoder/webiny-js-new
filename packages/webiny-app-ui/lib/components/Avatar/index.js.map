{"version":3,"sources":["../../../src/components/Avatar/index.js"],"names":["t","namespace","Avatar","props","lastId","map","m","bind","state","initialState","error","cropImage","actualWidth","actualHeight","attachToForm","newImage","onChange","then","setState","file","id","cropper","value","e","stopPropagation","reader","getFiles","Cropper","inline","title","action","onCropperHidden","applyCropping","config","preventDefault","dragOver","evt","persist","readFiles","dataTransfer","files","render","call","getCropper","model","Alert","Button","FileReader","styles","imageSrc","defaultImage","data","src","imageAction","uploadBtn","onDrop","onDragLeave","onDragOver","onClick","className","avatar","message","placeholder","image","empty","smallText","sizeLimit","accept","fileChanged","Component","defaultProps","modules","formComponent"],"mappings":"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","file":"index.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { i18n, createComponent } from \"webiny-app\";\nimport { FormComponent } from \"webiny-app-ui\";\nimport styles from \"./styles.css\";\n\nconst t = i18n.namespace(\"Webiny.Ui.Avatar\");\nclass Avatar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.lastId = null;\n\n        [\n            \"applyCropping\",\n            \"onCropperHidden\",\n            \"fileChanged\",\n            \"editFile\",\n            \"removeFile\",\n            \"getFiles\",\n            \"getCropper\",\n            \"onDrop\",\n            \"onDragOver\",\n            \"onDragLeave\"\n        ].map(m => {\n            this[m] = this[m].bind(this);\n        });\n\n        this.state = {\n            ...props.initialState,\n            error: null,\n            cropImage: null,\n            actualWidth: 0,\n            actualHeight: 0\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.attachToForm) {\n            this.props.attachToForm(this);\n        }\n    }\n\n    applyCropping(newImage) {\n        this.props.onChange(newImage).then(() => this.setState({ cropImage: null }));\n    }\n\n    onCropperHidden() {\n        this.setState({ cropImage: null });\n    }\n\n    fileChanged(file, error) {\n        if (error) {\n            this.setState({ error });\n            return;\n        }\n\n        if (_.has(file, \"data\")) {\n            file.id = _.get(this.props, \"value.id\", this.lastId);\n            if (this.props.cropper) {\n                this.setState({ cropImage: file });\n            } else {\n                this.props.onChange(file);\n            }\n        }\n    }\n\n    editFile() {\n        this.setState({\n            cropImage: this.props.value\n        });\n    }\n\n    removeFile(e) {\n        if (e && e.stopPropagation) {\n            e.stopPropagation();\n        }\n        this.lastId = (this.props.value && this.props.value.id) || null;\n        this.props.onChange(null);\n    }\n\n    getFiles(e) {\n        this.setState({ error: null });\n        if (e && e.stopPropagation) {\n            e.stopPropagation();\n        }\n        this.reader.getFiles();\n    }\n\n    getCropper() {\n        const { cropper, Cropper } = this.props;\n\n        if (!cropper) {\n            return null;\n        }\n\n        if (cropper.inline) {\n            return (\n                <Cropper.Inline\n                    title={cropper.title}\n                    action={cropper.action}\n                    onHidden={this.onCropperHidden}\n                    onCrop={this.applyCropping}\n                    config={cropper.config}\n                    image={this.state.cropImage}\n                />\n            );\n        }\n\n        return (\n            <Cropper.Modal\n                title={cropper.title}\n                action={cropper.action}\n                onHidden={this.onCropperHidden}\n                onCrop={this.applyCropping}\n                config={cropper.config}\n                image={this.state.cropImage}\n            />\n        );\n    }\n\n    onDragOver(e) {\n        e.preventDefault();\n        this.setState({\n            dragOver: true\n        });\n    }\n\n    onDragLeave() {\n        this.setState({\n            dragOver: false\n        });\n    }\n\n    onDrop(evt) {\n        evt.preventDefault();\n        evt.persist();\n\n        this.setState({\n            dragOver: false\n        });\n\n        this.reader.readFiles(evt.dataTransfer.files);\n    }\n\n    render() {\n        if (this.props.render) {\n            return this.props.render.call(this);\n        }\n\n        // If inline cropper is used - render only the cropper component\n        if (this.state.cropImage && _.get(this.props, \"cropper.inline\", false)) {\n            return this.getCropper();\n        }\n\n        const model = this.props.value;\n        const { Alert, Button, FileReader, styles } = this.props;\n\n        let imageSrc = this.props.defaultImage;\n        if (model) {\n            imageSrc = model.data || model.src;\n        }\n\n        const imageAction = (\n            <Button\n                type=\"primary\"\n                icon=\"fa-upload\"\n                onClick={this.getFiles}\n                className={styles.uploadBtn}\n            >\n                {t`Upload`}\n            </Button>\n        );\n\n        const props = {\n            onDrop: this.onDrop,\n            onDragLeave: this.onDragLeave,\n            onDragOver: this.onDragOver,\n            onClick: this.getFiles,\n            className: styles.avatar\n        };\n\n        return (\n            <div>\n                <div {...props}>\n                    {this.state.error && (\n                        <Alert type=\"error\" icon={null}>\n                            {this.state.error.message}\n                        </Alert>\n                    )}\n                    <span className={styles.placeholder}>\n                        {imageSrc ? (\n                            <img src={imageSrc} className={styles.image} height=\"157\" width=\"157\" />\n                        ) : (\n                            this.props.empty\n                        )}\n                    </span>\n                    {imageAction}\n                    <span className={styles.smallText}>{t`JPG, PNG, GIF`}</span>\n                    <FileReader\n                        onReady={reader => (this.reader = reader)}\n                        sizeLimit={this.props.sizeLimit}\n                        accept={this.props.accept}\n                        onChange={this.fileChanged}\n                    />\n                    {this.getCropper()}\n                </div>\n            </div>\n        );\n    }\n}\n\nAvatar.defaultProps = {\n    accept: [\"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/png\"],\n    cropper: false,\n    defaultImage: null,\n    empty: \"x\",\n    sizeLimit: 2485760\n};\n\nexport default createComponent([Avatar, FormComponent], {\n    modules: [\"Alert\", \"FileReader\", \"Cropper\", \"Button\"],\n    formComponent: true,\n    styles\n});\n"]}