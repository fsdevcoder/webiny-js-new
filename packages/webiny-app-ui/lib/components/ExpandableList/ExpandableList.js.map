{"version":3,"sources":["../../../src/components/ExpandableList/ExpandableList.jsx"],"names":["ExpandableList","props","state","zIndex","renderHeader","bind","header","i","className","width","name","render","call","data","length","showEmpty","headers","actionSet","children","row","isValidElement","val","push","key","map","rows","rowDetails","Component","defaultProps","type"],"mappings":"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","file":"ExpandableList.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { createComponent, isElementOfType } from 'webiny-app';\nimport Empty from './Empty';\nimport Row from './Row';\nimport Field from './Field';\nimport ActionSet from './ActionSet';\nimport './styles.scss';\n\nclass ExpandableList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            zIndex: 1000\n        };\n\n        this.renderHeader = this.renderHeader.bind(this);\n    }\n\n    renderHeader(header, i) {\n        let className = '';\n\n        if (_.get(header, 'className', false)) {\n            className = header.className;\n        }\n\n        return (\n            <div className={className + ' expandable-list__header__field flex-cell flex-width-' + header.width} key={i}>\n                {header.name}\n            </div>\n        );\n    }\n\n    render() {\n        if (this.props.render) {\n            return this.props.render.call(this);\n        }\n\n        if (!this.props.data || !this.props.data.length && this.props.showEmpty) {\n            return <Empty/>;\n        }\n\n        // get row and extract the header info\n        let headers = [];\n        let actionSet = false;\n        _.forEach(this.props.children, row => {\n            if (isElementOfType(row, Row)) {\n                if (React.isValidElement(row)) {\n                    _.forEach(row.props.children, val => {\n                        if (isElementOfType(val, ActionSet)) {\n                            actionSet = true;\n                        }\n\n                        if (isElementOfType(val, Field) && _.get(val.props, 'name', false)) {\n                            headers.push(_.omit(val.props, ['children', 'renderer']));\n                        }\n                    });\n\n                    if (headers.length > 0) {\n                        if (actionSet) {\n                            headers.push({ key: 99, width: 2 });\n                        }\n                        headers =\n                            <div className=\"expandable-list__header flex-row\">{headers.map(this.renderHeader)}</div>;\n                        return false; // exit foreach\n                    }\n                }\n            }\n        });\n\n        // get rows\n        const rows = [];\n        _.forEach(this.props.children, row => {\n            if (isElementOfType(row, Row)) {\n                rows.push(row);\n            } else if (_.isArray(row)) {\n                _.forEach(row, rowDetails => {\n                    if (isElementOfType(rowDetails, Row)) {\n                        rows.push(rowDetails);\n                    }\n                });\n                return false;\n            }\n        });\n\n        return (\n            <div className=\"expandable-list\">\n                {headers}\n                <div className=\"expandable-list__content\">\n                    {rows}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nExpandableList.defaultProps = {\n    data: [],\n    type: 'simple'\n};\n\nexport default createComponent(ExpandableList);"]}