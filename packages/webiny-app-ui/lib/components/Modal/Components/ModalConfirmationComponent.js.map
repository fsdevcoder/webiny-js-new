{"version":3,"sources":["../../../../src/components/Modal/Components/ModalConfirmationComponent.js"],"names":["ModalConfirmationComponent","props","state","loading","onCancel","bind","onConfirm","showLoading","hideLoading","setState","animating","hide","data","Promise","resolve","dialog","then","autoHide","result","onComplete","children","cloneElement","Component","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AACA;;;;IAEMA,0B;;;AACF,wCAAYC,KAAZ,EAAmB;AAAA;;AAAA,0KACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,qBAAS;AADA,SAAb;;AAIA,cAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,cAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,OAAjB;AACA,cAAKE,WAAL,GAAmB,MAAKA,WAAL,CAAiBF,IAAjB,OAAnB;AACA,cAAKG,WAAL,GAAmB,MAAKA,WAAL,CAAiBH,IAAjB,OAAnB;AAVe;AAWlB;;;;sCAEa;AACV,iBAAKI,QAAL,CAAc,EAAEN,SAAS,IAAX,EAAd;AACH;;;sCAEa;AACV,iBAAKM,QAAL,CAAc,EAAEN,SAAS,KAAX,EAAd;AACH;;;mCAEU;AACP,gBAAI,CAAC,KAAKF,KAAL,CAAWS,SAAhB,EAA2B;AACvB,oBAAI,0BAAa,KAAKT,KAAL,CAAWG,QAAxB,CAAJ,EAAuC;AACnC,2BAAO,KAAKH,KAAL,CAAWG,QAAX,CAAoB,IAApB,CAAP;AACH;AACD,uBAAO,KAAKH,KAAL,CAAWU,IAAX,EAAP;AACH;AACJ;;AAED;;;;;;;;;;;;;;;oCAYuB;AAAA;;AAAA,gBAAbC,IAAa,uEAAN,IAAM;;AACnB,gBAAI,CAAC,KAAKX,KAAL,CAAWS,SAAZ,IAAyB,0BAAa,KAAKT,KAAL,CAAWK,SAAxB,CAA7B,EAAiE;AAC7D,qBAAKC,WAAL;AACAK,uBAAO,6BAAgBA,IAAhB,IAAwBA,IAAxB,GAA+B,KAAKX,KAAL,CAAWW,IAAjD;AACA,uBAAOC,QAAQC,OAAR,CAAgB,KAAKb,KAAL,CAAWK,SAAX,CAAqB,EAAEM,UAAF,EAAQG,QAAQ,IAAhB,EAArB,CAAhB,EAA8DC,IAA9D,CAAmE,kBAAU;AAChF,2BAAKR,WAAL;AACA,wBAAI,OAAKP,KAAL,CAAWgB,QAAf,EAAyB;AACrB,+BAAO,OAAKhB,KAAL,CAAWU,IAAX,GAAkBK,IAAlB,CAAuB,YAAM;AAChC;AACA;AACA;AACA,gCAAI,0BAAaE,MAAb,CAAJ,EAA0B;AACtB;AACAA,yCAASA,QAAT;AACH;AACD,mCAAKjB,KAAL,CAAWkB,UAAX,CAAsB,EAAEP,MAAMM,MAAR,EAAtB;AACH,yBATM,CAAP;AAUH;AACJ,iBAdM,CAAP;AAeH;AACJ;;;iCAEQ;AAAA,yBAC0B,KAAKjB,KAD/B;AAAA,gBACGmB,QADH,UACGA,QADH;AAAA,gBACgBnB,KADhB;;;AAGL,mBAAO,gBAAMoB,YAAN,CAAmBD,QAAnB,oBACAnB,KADA;AAEHE,yBAAS,KAAKD,KAAL,CAAWC,OAFjB;AAGHG,2BAAW,KAAKA,SAHb;AAIHF,0BAAU,KAAKA;AAJZ,eAAP;AAMH;;;EA1EoC,gBAAMkB,S;;AA6E/CtB,2BAA2BuB,YAA3B,GAA0C;AACtCjB,6BADsC;AAEtCa,8BAFsC;AAGtCf,cAAU,IAH4B;AAItCa,cAAU,IAJ4B;AAKtCL,UAAM;AALgC,CAA1C;;kBAQe,gCAAgB,CAACZ,0BAAD,8BAAhB,C","file":"ModalConfirmationComponent.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { createComponent } from \"webiny-app\";\nimport { ModalComponent } from \"webiny-app-ui\";\n\nclass ModalConfirmationComponent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: false\n        };\n\n        this.onCancel = this.onCancel.bind(this);\n        this.onConfirm = this.onConfirm.bind(this);\n        this.showLoading = this.showLoading.bind(this);\n        this.hideLoading = this.hideLoading.bind(this);\n    }\n\n    showLoading() {\n        this.setState({ loading: true });\n    }\n\n    hideLoading() {\n        this.setState({ loading: false });\n    }\n\n    onCancel() {\n        if (!this.props.animating) {\n            if (_.isFunction(this.props.onCancel)) {\n                return this.props.onCancel(this);\n            }\n            return this.props.hide();\n        }\n    }\n\n    /**\n     * This function is executed when dialog is confirmed, it handles all the maintenance stuff and executes `onConfirm` callback\n     * passed through props and also passes optional `data` object to that callback.\n     *\n     * It can receive a `data` object containing arbitrary data from your custom form, for example.\n     *\n     * If no `data` is passed - ModalConfirmationComponent dialog will check if `data` prop is defined and use that as data payload for `onConfirm`\n     * callbacks.\n     *\n     * @param data\n     * @returns {Promise.<TResult>}\n     */\n    onConfirm(data = null) {\n        if (!this.props.animating && _.isFunction(this.props.onConfirm)) {\n            this.showLoading();\n            data = _.isPlainObject(data) ? data : this.props.data;\n            return Promise.resolve(this.props.onConfirm({ data, dialog: this })).then(result => {\n                this.hideLoading();\n                if (this.props.autoHide) {\n                    return this.props.hide().then(() => {\n                        // If the result of confirmation is a function, it means we need to hide the dialog before executing it.\n                        // This is often necessary if the function will set a new state in the view - it will re-render itself and the modal\n                        // animation will be aborted (most common case is delete confirmation).\n                        if (_.isFunction(result)) {\n                            // The result of the function will be passed to `onComplete` and not the function itself\n                            result = result();\n                        }\n                        this.props.onComplete({ data: result });\n                    });\n                }\n            });\n        }\n    }\n\n    render() {\n        const { children, ...props } = this.props;\n\n        return React.cloneElement(children, {\n            ...props,\n            loading: this.state.loading,\n            onConfirm: this.onConfirm,\n            onCancel: this.onCancel\n        });\n    }\n}\n\nModalConfirmationComponent.defaultProps = {\n    onConfirm: _.noop,\n    onComplete: _.noop,\n    onCancel: null,\n    autoHide: true,\n    data: null\n};\n\nexport default createComponent([ModalConfirmationComponent, ModalComponent]);\n"]}