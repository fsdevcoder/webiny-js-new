{"version":3,"sources":["../../../src/components/Cropper/BaseCropper.jsx"],"names":["t","namespace","BaseCropper","props","state","width","height","id","map","m","bind","options","viewMode","dragMode","aspectRatio","NaN","data","preview","responsive","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","minContainerWidth","minContainerHeight","ready","cropstart","cropmove","cropend","crop","zoom","destroyCropper","element","Cropper","config","setState","Math","floor","e","detail","cropper","setCropBoxData","destroy","cacheBust","image","modifiedOn","Date","getTime","onCrop","getImageModel","model","canvas","getCroppedCanvas","toDataURL","type","cloneElement","children","initCropper","getCacheBust","applyCropping","Component","defaultProps","action","modules"],"mappings":"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","file":"BaseCropper.js","sourcesContent":["import React from \"react\";\nimport _ from 'lodash';\nimport { createComponent, i18n } from 'webiny-app';\n\nconst t = i18n.namespace(\"Webiny.Ui.Cropper.BaseCropper\");\nclass BaseCropper extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 0,\n            height: 0\n        };\n\n        this.id = _.uniqueId('img-cropper-');\n\n        [\n            'initCropper',\n            'destroyCropper',\n            'getImageModel',\n            'getCacheBust',\n            'applyCropping'\n        ].map(m => this[m] = this[m].bind(this));\n\n        this.options = {\n            // Define the view mode of the cropper\n            viewMode: 1, // 0, 1, 2, 3\n\n            // Define the dragging mode of the cropper\n            dragMode: 'crop', // 'crop', 'move' or 'none'\n\n            // Define the aspect ratio of the crop box\n            aspectRatio: NaN,\n\n            // An object with the previous cropping result data\n            data: null,\n\n            // A selector for adding extra containers to preview\n            preview: '',\n\n            // Re-render the cropper when resize the window\n            responsive: true,\n\n            // Restore the cropped area after resize the window\n            restore: true,\n\n            // Check if the current image is a cross-origin image\n            checkCrossOrigin: true,\n\n            // Check the current image's Exif Orientation information\n            checkOrientation: true,\n\n            // Show the black modal\n            modal: true,\n\n            // Show the dashed lines for guiding\n            guides: false,\n\n            // Show the center indicator for guiding\n            center: true,\n\n            // Show the white modal to highlight the crop box\n            highlight: true,\n\n            // Show the grid background\n            background: true,\n\n            // Enable to crop the image automatically when initialize\n            autoCrop: true,\n\n            // Define the percentage of automatic cropping area when initializes\n            autoCropArea: 0.8,\n\n            // Enable to move the image\n            movable: true,\n\n            // Enable to rotate the image\n            rotatable: true,\n\n            // Enable to scale the image\n            scalable: true,\n\n            // Enable to zoom the image\n            zoomable: true,\n\n            // Enable to zoom the image by dragging touch\n            zoomOnTouch: true,\n\n            // Enable to zoom the image by wheeling mouse\n            zoomOnWheel: true,\n\n            // Define zoom ratio when zoom the image by wheeling mouse\n            wheelZoomRatio: 0.1,\n\n            // Enable to move the crop box\n            cropBoxMovable: true,\n\n            // Enable to resize the crop box\n            cropBoxResizable: true,\n\n            // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n            toggleDragModeOnDblclick: true,\n\n            // Size limitation\n            minCanvasWidth: 0,\n            minCanvasHeight: 0,\n            minCropBoxWidth: 0,\n            minCropBoxHeight: 0,\n            minContainerWidth: 200,\n            minContainerHeight: 100,\n\n            // Shortcuts of events\n            ready: null,\n            cropstart: null,\n            cropmove: null,\n            cropend: null,\n            crop: null,\n            zoom: null\n        };\n    }\n\n    componentWillUnmount() {\n        this.destroyCropper();\n    }\n\n    initCropper(element) {\n        const { Cropper } = this.props;\n        const data = _.merge({}, this.options, this.props.config);\n        data.crop = e => {\n            this.setState({ width: Math.floor(e.detail.width), height: Math.floor(e.detail.height) });\n        };\n        data.ready = () => {\n            if (data.width && data.height) {\n                this.cropper.setCropBoxData({\n                    width: data.width,\n                    height: data.height\n                });\n            }\n        };\n\n        this.cropper = new Cropper(element, data);\n    }\n\n    destroyCropper() {\n        if (this.cropper) {\n            this.cropper.destroy();\n            this.cropper = null;\n        }\n    }\n\n    getCacheBust() {\n        let cacheBust = '';\n        if (this.props.image && this.props.image.modifiedOn && !this.props.image.data) {\n            cacheBust = '?ts=' + new Date(this.props.image.modifiedOn).getTime();\n        }\n        return cacheBust;\n    }\n\n    applyCropping() {\n        this.props.onCrop(this.getImageModel());\n    }\n\n    getImageModel() {\n        const model = _.clone(this.props.image);\n        let options = {};\n        let canvas = null;\n\n        if (this.props.config.getCroppedCanvas) {\n            canvas = this.props.config.getCroppedCanvas({ cropper: this.cropper, props: this.props });\n        } else {\n            if (this.props.config.width) {\n                options.width = this.props.config.width;\n            }\n\n            if (this.props.config.height) {\n                options.height = this.props.config.height;\n            }\n\n            canvas = this.cropper.getCroppedCanvas(options);\n        }\n\n        model.data = canvas.toDataURL(model.type);\n        return model;\n    }\n\n    render() {\n        return React.cloneElement(this.props.children, {\n            ..._.omit(this.props, ['children']),\n            width: this.state.width,\n            height: this.state.height,\n            initCropper: this.initCropper.bind(this),\n            getCacheBust: this.getCacheBust.bind(this),\n            applyCropping: this.applyCropping.bind(this),\n            destroyCropper: this.destroyCropper.bind(this),\n            getImageModel: this.getImageModel.bind(this)\n        });\n    }\n}\n\nBaseCropper.defaultProps = {\n    config: {},\n    onCrop: _.noop,\n    action: t`Apply cropping`\n};\n\nexport default createComponent(BaseCropper, { modules: [{ Cropper: 'Vendor.Cropper' }] });"]}