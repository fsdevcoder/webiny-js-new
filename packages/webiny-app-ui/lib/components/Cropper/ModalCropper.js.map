{"version":3,"sources":["../../../src/components/Cropper/ModalCropper.jsx"],"names":["t","namespace","ModalCropper","dialogId","hide","bind","show","applyCropping","prevProps","image","props","nextProps","nextState","width","height","state","model","getImageModel","then","onCrop","services","get","Modal","Button","modalProps","name","onShown","onHide","destroyCropper","onHidden","closeOnClick","config","className","title","children","initCropper","e","currentTarget","data","src","getCacheBust","maxWidth","size","action","Component","defaultProps","modules"],"mappings":"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","file":"ModalCropper.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { app, createComponent, i18n } from 'webiny-app';\nimport { ModalComponent } from 'webiny-app-ui';\nimport BaseCropper from './BaseCropper';\nimport CropperDialog from \"./CropperDialog\";\n\nconst t = i18n.namespace(\"Webiny.Ui.Cropper.ModalCropper\");\nclass ModalCropper extends React.Component {\n    constructor() {\n        super();\n        this.dialogId = _.uniqueId('modal-cropper-');\n        this.hide = this.hide.bind(this);\n        this.show = this.show.bind(this);\n        this.applyCropping = this.applyCropping.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.image && this.props.image) {\n            return this.show();\n        }\n\n        if (prevProps.image && !this.props.image) {\n            return this.hide();\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return !_.isEqual(nextProps.image, this.props.image)\n            || !_.isEqual(nextProps.width, this.props.width)\n            || !_.isEqual(nextProps.height, this.props.height)\n            || !_.isEqual(nextState, this.state);\n    }\n\n    applyCropping() {\n        const model = this.props.getImageModel();\n        this.hide().then(() => {\n            this.props.onCrop(model);\n        });\n    }\n\n    hide() {\n        return app.services.get('modal').hide(this.dialogId);\n    }\n\n    show() {\n        return app.services.get('modal').show(this.dialogId);\n    }\n\n    render() {\n        const { Modal, Button, ...props } = this.props;\n\n        const modalProps = {\n            name: this.dialogId,\n            onShown: props.onShown,\n            onHide: props.destroyCropper,\n            onHidden: props.onHidden,\n            closeOnClick: props.config.closeOnClick || props.closeOnClick,\n            className: '',\n        };\n\n        return (\n            <CropperDialog {...modalProps}>\n                <Modal.Content>\n                    <Modal.Header title={props.title} onClose={this.hide}/>\n                    <Modal.Body>\n                        {props.children}\n                        <div className=\"modalCrop\">\n                            <img\n                                onLoad={e => props.initCropper(e.currentTarget)}\n                                width=\"100%\"\n                                src={props.image && (props.image.data || props.image.src) + props.getCacheBust()}\n                                style={{ maxWidth: '100%' }}/>\n                            <div className=\"clearfix\"/>\n                            {t`Cropped image size: {size}`({size: <strong>{props.width}x{props.height}</strong>})}\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button type=\"primary\" className=\"pull-right ml5\" onClick={this.applyCropping}>\n                            {props.action}\n                        </Button>\n                    </Modal.Footer>\n                </Modal.Content>\n            </CropperDialog>\n        );\n    }\n}\n\n\nModalCropper.defaultProps = {\n    config: {},\n    title: t`Crop image`,\n    closeOnClick: false,\n    onCrop: _.noop,\n    onShown: _.noop,\n    onHidden: _.noop\n};\n\nexport default createComponent([ModalCropper, BaseCropper], {\n    modules: ['Modal', 'Button']\n});"]}