{"version":3,"sources":["../../../src/components/MarkdownEditor/index.js"],"names":["MarkdownEditor","props","state","initialState","mdEditor","options","textarea","map","m","bind","attachToForm","mdConfig","autoDownloadFontAwesome","element","getTextareaElement","renderingConfig","codeSyntaxHighlighting","hideIcons","indentWithTabs","tabSize","window","sme","codemirror","on","onChange","getValue","originalRenderer","previewRender","html","plainText","customParsers","p","value","setValue","render","call","ref","Component","defaultProps","formComponent","styles"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport { createComponent } from 'webiny-app';\nimport { FormComponent } from 'webiny-app-ui';\nimport SimpleMDE from 'simplemde';\nimport styles from './styles.scss';\n\nclass MarkdownEditor extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...props.initialState\n        };\n\n\n        this.mdEditor = null;\n        this.options = null;\n        this.textarea = null;\n\n        ['getTextareaElement', 'setValue', 'getEditor', 'getHtml'].map(m => this[m] = this[m].bind(this));\n    }\n\n    componentDidMount() {\n        if (this.props.attachToForm) {\n            this.props.attachToForm(this);\n        }\n\n        const mdConfig = {\n            autoDownloadFontAwesome: false,\n            element: this.getTextareaElement(),\n            renderingConfig: {\n                codeSyntaxHighlighting: true\n            },\n            hideIcons: ['side-by-side', 'fullscreen'],\n            indentWithTabs: true,\n            tabSize: 4\n        };\n\n        this.mdEditor = new SimpleMDE(mdConfig);\n        window.sme = this.mdEditor;\n\n        this.mdEditor.codemirror.on('change', () => {\n            this.props.onChange(this.mdEditor.codemirror.getValue());\n        });\n\n        // Store original previewRenderer\n        this.originalRenderer = this.mdEditor.options.previewRender.bind(this.mdEditor.options);\n\n        // Set new renderer that will use the original renderer first, then apply custom renderers\n        this.mdEditor.options.previewRender = plainText => {\n            let html = this.originalRenderer(plainText);\n            _.each(this.props.customParsers, p => html = p(html));\n            return html;\n        };\n    }\n\n    componentWillReceiveProps(props) {\n        if (this.mdEditor.codemirror.getValue() !== props.value && !_.isNull(props.value)) {\n            // the \"+ ''\" sort a strange with splitLines method within CodeMirror\n            this.mdEditor.codemirror.setValue(props.value + '');\n        }\n    }\n\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    setValue(value) {\n        this.mdEditor.codemirror.setValue(value);\n    }\n\n    getEditor() {\n        return this.mdEditor;\n    }\n\n    getTextareaElement() {\n        return this.textarea;\n    }\n\n    getHtml() {\n        return this.mdEditor.options.previewRender(this.mdEditor.codemirror.getValue());\n    }\n\n    render() {\n        if (this.props.render) {\n            return this.props.render.call(this);\n        }\n\n        return (\n            <div className=\"smde\">\n                <textarea ref={ref => this.textarea = ref}/>\n            </div>\n        );\n    }\n}\n\nMarkdownEditor.defaultProps = {\n    onChange: _.noop,\n    customParsers: []\n};\n\nexport default createComponent([MarkdownEditor, FormComponent], { formComponent: true, styles });\n"]}