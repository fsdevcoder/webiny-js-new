{"version":3,"sources":["../src/entity.js"],"names":["Entity","constructor","proxy","Proxy","set","instance","key","value","attr","getModel","getAttribute","setValue","get","includes","getValue","modelClass","getDriver","getModelClass","MODEL_MISSING","model","setParentEntity","listeners","existing","processing","date","boolean","setDefaultValue","on","deleted","id","CANNOT_DELETE_NO_ID","onEntityConstruct","char","driver","getEntityPool","pool","setExisting","flag","isExisting","name","getAttributesContainer","getAttributes","path","defaultValue","toJSON","merge","toStorage","validate","emit","populate","data","populateFromStorage","getClassName","isId","params","cloneDeep","save","logs","events","validation","beforeSave","savedOn","Date","updatedOn","beforeUpdate","createdOn","beforeCreate","afterSave","afterUpdate","afterCreate","clean","add","e","delete","soft","beforeDelete","permanent","afterDelete","remove","findById","pooled","newParams","query","findOne","findByIds","ids","find","prepared","__prepareParams","queryResult","result","getResult","isObject","entity","entityCollection","setParams","setMeta","getMeta","Array","i","length","push","count","callback","eventHandler","getName","execute","clone","classId","crud"],"mappings":"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","file":"entity.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport { Attribute } from \"webiny-model\";\nimport Driver from \"./driver\";\nimport EntityPool from \"./entityPool\";\nimport EventHandler from \"./eventHandler\";\nimport EntityCollection from \"./entityCollection\";\nimport EntityModel from \"./entityModel\";\nimport EntityAttributesContainer from \"./entityAttributesContainer\";\nimport QueryResult from \"./queryResult\";\nimport { EntityError } from \"./index\";\n\nclass Entity {\n    static classId: ?string;\n    static driver: Driver;\n    static pool: EntityPool;\n    static crud: {\n        logs?: boolean,\n        delete?: {\n            soft?: boolean\n        }\n    };\n    static listeners: {};\n\n    model: EntityModel;\n    listeners: {};\n    existing: boolean;\n    processing: ?string;\n    createdOn: ?Date;\n    updatedOn: ?Date;\n    savedOn: ?Date;\n    deleted: ?boolean;\n\n    constructor(): Entity {\n        const proxy = new Proxy((this: Object), {\n            set: (instance, key, value) => {\n                const attr: ?Attribute = instance.getModel().getAttribute(key);\n                if (attr) {\n                    attr.setValue(value);\n                    return true;\n                }\n\n                instance[key] = value;\n                return true;\n            },\n            get: (instance, key) => {\n                if ([\"classId\", \"driver\"].includes(key)) {\n                    return instance.constructor[key];\n                }\n\n                const attr: ?Attribute = instance.getModel().getAttribute(key);\n                if (attr) {\n                    return attr.getValue();\n                }\n\n                return instance[key];\n            }\n        });\n\n        const modelClass = this.getDriver().getModelClass();\n        if (!modelClass) {\n            throw new EntityError(\"Entity model is missing.\", EntityError.MODEL_MISSING);\n        }\n\n        this.model = new modelClass().setParentEntity(proxy);\n\n        this.listeners = {};\n        this.existing = false;\n        this.processing = null;\n\n        if (_.get(this, \"constructor.crud.logs\")) {\n            this.attr(\"savedOn\").date();\n            this.attr(\"createdOn\").date();\n            this.attr(\"updatedOn\").date();\n        }\n\n        if (_.get(this, \"constructor.crud.delete.soft\")) {\n            this.attr(\"deleted\")\n                .boolean()\n                .setDefaultValue(false);\n\n            this.on(\"beforeDelete\", () => (proxy.deleted = true));\n        }\n\n        this.on(\"delete\", () => {\n            if (!proxy.id) {\n                throw new EntityError(\n                    \"Entity cannot be deleted because it was not previously saved.\",\n                    EntityError.CANNOT_DELETE_NO_ID\n                );\n            }\n        });\n\n        this.getDriver().onEntityConstruct(proxy);\n\n        if (!this.getAttribute(\"id\")) {\n            this.attr(\"id\").char();\n        }\n\n        return proxy;\n    }\n\n    /**\n     * Returns instance of entity's model.\n     */\n    getModel(): EntityModel {\n        return this.model;\n    }\n\n    /**\n     * Returns instance of used driver.\n     */\n    static getDriver(): Driver {\n        return this.driver;\n    }\n\n    /**\n     * Returns instance of used driver.\n     */\n    getDriver(): Driver {\n        return this.constructor.driver;\n    }\n\n    /**\n     * Returns instance of used entity pool.\n     */\n    static getEntityPool(): EntityPool {\n        return this.pool;\n    }\n\n    /**\n     * Returns instance of used entity pool.\n     */\n    getEntityPool(): EntityPool {\n        return this.constructor.pool;\n    }\n\n    /**\n     * Sets whether entity is existing or not.\n     */\n    setExisting(flag: boolean = true): this {\n        this.existing = flag;\n        return this;\n    }\n\n    /**\n     * Returns true if entity exists or in other words, is already saved in storage. Otherwise returns false.\n     */\n    isExisting(): boolean {\n        return this.existing;\n    }\n\n    /**\n     * Creates new attribute with name.\n     */\n    attr(name: string): EntityAttributesContainer {\n        return this.getModel()\n            .getAttributesContainer()\n            .attr(name);\n    }\n\n    /**\n     * Returns single attribute by given name.\n     */\n    getAttribute(name: string): Attribute {\n        return this.getModel().getAttribute(name);\n    }\n\n    /**\n     * Returns all entity's attributes.\n     */\n    getAttributes(): { [string]: Attribute } {\n        return this.getModel().getAttributes();\n    }\n\n    async get(path: string | Array<string> = \"\", defaultValue?: mixed) {\n        return this.getModel().get(path, defaultValue);\n    }\n\n    async set(path: string, value: mixed) {\n        return this.getModel().set(path, value);\n    }\n\n    /**\n     * Returns entity's JSON representation.\n     */\n    async toJSON(path: ?string): Promise<JSON> {\n        return _.merge(\n            { id: this.getAttribute(\"id\").getValue() },\n            await this.getModel().toJSON(path)\n        );\n    }\n\n    /**\n     * Returns data suitable for storage.\n     */\n    async toStorage(): Promise<{}> {\n        return this.getModel().toStorage();\n    }\n\n    /**\n     * Validates current entity and throws exception that contains all invalid attributes.\n     */\n    async validate(): Promise<void> {\n        await this.emit(\"beforeValidate\");\n        await this.getModel().validate();\n        await this.emit(\"afterValidate\");\n    }\n\n    /**\n     * Used to populate entity with given data.\n     */\n    populate(data: Object): this {\n        this.getModel().populate(data);\n        return this;\n    }\n\n    /**\n     * Used when populating entity with data from storage.\n     * @param data\n     */\n    populateFromStorage(data: Object): this {\n        this.getModel().populateFromStorage(data);\n        return this;\n    }\n\n    /**\n     * Returns class name.\n     */\n    getClassName(): string {\n        return this.constructor.name;\n    }\n\n    /**\n     * Returns class name.\n     */\n    static getClassName(): string {\n        return this.name;\n    }\n\n    /**\n     * Tells us whether a given ID is valid or not.\n     * @param id\n     * @param params\n     */\n    isId(id: mixed, params: Object = {}): boolean {\n        return this.getDriver().isId(this, id, _.cloneDeep(params));\n    }\n\n    /**\n     * Tells us whether a given ID is valid or not.\n     * @param id\n     * @param params\n     */\n    static isId(id: mixed, params: Object = {}): boolean {\n        return this.getDriver().isId(this, id, _.cloneDeep(params));\n    }\n\n    /**\n     * Saves current and all linked entities (if autoSave on the attribute was enabled).\n     * @param params\n     */\n    async save(params: ?Object): Promise<void> {\n        if (this.processing) {\n            return;\n        }\n\n        this.processing = \"save\";\n        const existing = this.isExisting();\n        const logs = _.get(this, \"constructor.crud.logs\");\n\n        if (!params) {\n            params = {};\n        }\n\n        try {\n            const events = params.events || {};\n            events.save !== false && (await this.emit(\"save\"));\n\n            params.validation !== false && (await this.validate());\n\n            events.beforeSave !== false && (await this.emit(\"beforeSave\"));\n\n            if (existing) {\n                if (logs) {\n                    this.savedOn = new Date();\n                    this.updatedOn = new Date();\n                }\n                events.beforeUpdate !== false && (await this.emit(\"beforeUpdate\"));\n            } else {\n                if (logs) {\n                    this.savedOn = new Date();\n                    this.createdOn = new Date();\n                }\n                events.beforeCreate !== false && (await this.emit(\"beforeCreate\"));\n            }\n\n            await this.getDriver().save(this, params);\n            this.setExisting();\n\n            events.afterSave !== false && (await this.emit(\"afterSave\"));\n            if (existing) {\n                events.afterUpdate !== false && (await this.emit(\"afterUpdate\"));\n            } else {\n                events.afterCreate !== false && (await this.emit(\"afterCreate\"));\n            }\n\n            this.getModel().clean();\n\n            this.getEntityPool().add(this);\n        } catch (e) {\n            throw e;\n        } finally {\n            this.processing = null;\n        }\n    }\n\n    /**\n     * Deletes current and all linked entities (if autoDelete on the attribute was enabled).\n     * @param params\n     */\n    async delete(params: ?Object): Promise<void> {\n        if (this.processing) {\n            return;\n        }\n\n        this.processing = \"delete\";\n\n        const soft = _.get(this, \"constructor.crud.delete.soft\");\n\n        if (!params) {\n            params = {};\n        }\n\n        try {\n            const events = params.events || {};\n            events.delete !== false && (await this.emit(\"delete\"));\n\n            params.validation !== false && (await this.validate());\n\n            events.beforeDelete !== false && (await this.emit(\"beforeDelete\"));\n\n            if (soft && params.permanent !== true) {\n                await this.getDriver().save(this, params);\n            } else {\n                await this.getDriver().delete(this, params);\n            }\n            events.afterDelete !== false && (await this.emit(\"afterDelete\"));\n\n            this.getEntityPool().remove(this);\n        } catch (e) {\n            throw e;\n        } finally {\n            this.processing = null;\n        }\n    }\n\n    /**\n     * Finds a single entity matched by given ID.\n     * @param id\n     * @param params\n     */\n    static async findById(id: mixed, params: ?Object): Promise<null | Entity> {\n        if (!id) {\n            return null;\n        }\n\n        const pooled = this.getEntityPool().get(this, id);\n        if (pooled) {\n            return pooled;\n        }\n\n        if (!params) {\n            params = {};\n        }\n\n        const newParams = _.merge(_.cloneDeep(params), { query: { id } });\n        return await this.findOne(newParams);\n    }\n\n    /**\n     * Finds one or more entities matched by given IDs.\n     * @param ids\n     * @param params\n     */\n    static async findByIds(ids: Array<mixed>, params: ?Object): Promise<EntityCollection> {\n        if (!params) {\n            params = {};\n        }\n        return await this.find(_.merge(_.cloneDeep(params), { query: { id: ids } }));\n    }\n\n    /**\n     * Finds one entity matched by given query parameters.\n     * @param params\n     */\n    static async findOne(params: ?Object): Promise<null | Entity> {\n        if (!params) {\n            params = {};\n        }\n\n        const prepared = this.__prepareParams(params);\n        await this.emit(\"query\", prepared);\n\n        const queryResult = await this.getDriver().findOne(this, prepared);\n        const result = queryResult.getResult();\n        if (_.isObject(result)) {\n            const pooled = this.getEntityPool().get(this, result.id);\n            if (pooled) {\n                return pooled;\n            }\n\n            const entity = new this().setExisting().populateFromStorage(((result: any): Object));\n            this.getEntityPool().add(entity);\n            return entity;\n        }\n        return null;\n    }\n\n    /**\n     * Finds one or more entities matched by given query parameters.\n     * @param params\n     */\n    static async find(params: ?Object): Promise<EntityCollection> {\n        if (!params) {\n            params = {};\n        }\n\n        const prepared = this.__prepareParams(params);\n        await this.emit(\"query\", prepared);\n\n        const queryResult: QueryResult = await this.getDriver().find(this, prepared);\n        const entityCollection = new EntityCollection()\n            .setParams(prepared)\n            .setMeta(queryResult.getMeta());\n        const result: Array<Object> = (queryResult.getResult(): any);\n        if (result instanceof Array) {\n            for (let i = 0; i < result.length; i++) {\n                const pooled = this.getEntityPool().get(this, result[i].id);\n                if (pooled) {\n                    entityCollection.push(pooled);\n                } else {\n                    const entity = new this().setExisting().populateFromStorage(result[i]);\n                    this.getEntityPool().add(entity);\n                    entityCollection.push(entity);\n                }\n            }\n        }\n\n        return entityCollection;\n    }\n\n    /**\n     * Counts total number of entities matched by given query parameters.\n     * @param params\n     */\n    static async count(params: ?Object): Promise<number> {\n        if (!params) {\n            params = {};\n        }\n\n        const prepared = this.__prepareParams(params);\n        await this.emit(\"query\", prepared);\n\n        const queryResult: QueryResult = await this.getDriver().count(this, prepared);\n        return ((queryResult.getResult(): any): number);\n    }\n\n    /**\n     * Registers a listener that will be triggered only on current entity instance.\n     * @param name\n     * @param callback\n     */\n    on(name: string, callback: Function): EventHandler {\n        const eventHandler = new EventHandler(name, callback);\n        if (!this.listeners[eventHandler.getName()]) {\n            this.listeners[eventHandler.getName()] = [];\n        }\n        this.listeners[eventHandler.getName()].push(eventHandler);\n        return eventHandler;\n    }\n\n    /**\n     * Registers a listener that will be triggered on all entity instances of current class.\n     * @param name\n     * @param callback\n     */\n    static on(name: string, callback: Function): EventHandler {\n        if (!this.listeners) {\n            this.listeners = {};\n        }\n\n        const eventHandler = new EventHandler(name, callback);\n        if (!this.listeners[eventHandler.getName()]) {\n            this.listeners[eventHandler.getName()] = [];\n        }\n        this.listeners[eventHandler.getName()].push(eventHandler);\n        return eventHandler;\n    }\n\n    /**\n     * Emits an event, which will trigger both static and instance listeners.\n     * @param name\n     * @param data\n     */\n    async emit(name: string, data: Object = {}): Promise<this> {\n        if (this.listeners[name]) {\n            for (let i = 0; i < this.listeners[name].length; i++) {\n                await this.listeners[name][i].execute({ ...data, entity: this });\n            }\n        }\n\n        if (this.constructor.listeners) {\n            if (this.constructor.listeners[name]) {\n                for (let i = 0; i < this.constructor.listeners[name].length; i++) {\n                    await this.constructor.listeners[name][i].execute({ ...data, entity: this });\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Emits an event, which will trigger static event listeners.\n     * @param name\n     * @param data\n     */\n    static async emit(name: string, data: Object = {}): Promise<void> {\n        if (_.get(this, \"listeners.\" + name)) {\n            for (let i = 0; i < this.listeners[name].length; i++) {\n                await this.listeners[name][i].execute({ ...data, entity: this });\n            }\n        }\n    }\n\n    /**\n     * Creates a clone of given params first.\n     * If soft delete functionality is enabled, this will append \"deleted = false\" filter, meaning only non-deleted\n     * entities can be taken into consideration. If \"deleted\" flag was already set from the outside, it won't take any action.\n     * @param params\n     * @private\n     */\n    static __prepareParams(params: Object) {\n        const clone = _.cloneDeep(params);\n        if (_.get(this, \"crud.delete.soft\") === true) {\n            _.set(clone, \"query.deleted\", _.get(clone, \"query.deleted\", false));\n        }\n        return clone;\n    }\n}\n\nEntity.classId = null;\nEntity.driver = new Driver();\nEntity.pool = new EntityPool();\nEntity.crud = {\n    logs: false,\n    delete: {\n        soft: false\n    }\n};\n\nexport default Entity;\n"]}