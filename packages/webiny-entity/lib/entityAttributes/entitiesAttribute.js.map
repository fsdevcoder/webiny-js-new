{"version":3,"sources":["../../src/entityAttributes/entitiesAttribute.js"],"names":["EntitiesAttribute","constructor","name","attributesContainer","entity","attributeName","async","classes","parent","getParentModel","getParentEntity","entities","class","attribute","using","camelCase","auto","save","delete","toStorage","parentEntity","on","mustManage","value","isDirty","isLoading","load","normalizeSetValues","getUsingClass","manageCurrentLinks","manageCurrent","isLoaded","getAutoSave","getCurrentLinks","i","length","current","validation","getCurrent","getAutoDelete","deleteInitialLinks","deleteInitial","syncInitial","syncInitialLinks","getEntitiesClass","emit","events","getAttributeValueClass","entitiesClass","getEntitiesAttribute","getUsingAttribute","setUsing","entityClass","entityAttribute","setAutoSave","autoSave","setAutoDelete","autoDelete","getValue","isClean","setValue","canSetValue","finalValue","onSetCallback","setCurrent","skipDifferenceCheck","forceSetAsDirty","setStorageValue","setCurrentLinks","setInitialLinks","setInitial","getStorageValue","isArray","storageValue","id","get","isId","push","validateType","Array","expected","getValidationValue","validateValue","errors","correctClass","currentEntity","code","INVALID_ATTRIBUTE","data","index","message","validate","e","isEmpty","items","mustValidate","hasValidators","valueValidation","isEmptyValue","validateAttribute","getJSONValue","toJSON","findById","Object","populate"],"mappings":"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","file":"entitiesAttribute.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport { ModelError, Attribute } from \"webiny-model\";\nimport EntityCollection from \"./../entityCollection\";\nimport Entity from \"./../entity\";\nimport EntitiesAttributeValue from \"./entitiesAttributeValue\";\nimport EntityAttributesContainer from \"../entityAttributesContainer\";\n\nclass EntitiesAttribute extends Attribute {\n    value: EntitiesAttributeValue;\n\n    constructor(\n        name: string,\n        attributesContainer: EntityAttributesContainer,\n        entity: Class<Entity>,\n        attributeName: ?string\n    ) {\n        super(name, attributesContainer, entity);\n\n        // This attribute is async because we need to load entities both on set and get calls.\n        this.async = true;\n\n        this.classes = {\n            parent: this.getParentModel().getParentEntity().constructor.name,\n            entities: { class: entity, attribute: attributeName },\n            using: { class: null, attribute: null }\n        };\n\n        // We will use the same value here to (when loading entities without a middle aggregation entity).\n        if (!this.classes.entities.attribute) {\n            this.classes.entities.attribute = _.camelCase(this.classes.parent);\n        }\n\n        /**\n         * Auto save and delete are both enabled by default.\n         * @type {{save: boolean, delete: boolean}}\n         */\n        this.auto = { save: true, delete: true };\n\n        /**\n         * By default, we don't want to have links stored in entity attribute directly.\n         * @var bool\n         */\n        this.toStorage = false;\n\n        const parentEntity = this.getParentModel().getParentEntity();\n\n        parentEntity.on(\"save\", async () => {\n            // If loading is in progress, wait until loaded.\n            const mustManage = this.value.isDirty() || this.value.isLoading();\n            if (!mustManage) {\n                return;\n            }\n\n            await this.value.load();\n\n            await this.normalizeSetValues();\n\n            if (this.getUsingClass()) {\n                // Do we have to manage entities?\n                // If so, this will ensure that newly set or unset entities and its link entities are synced.\n                // \"syncCurrentEntitiesAndLinks\" method must be called on this event because link entities must be ready\n                // before the validation of data happens. When validation happens and when link class is set,\n                // validation is triggered on link (aggregation) entity, not on entity end (linked) entity.\n                await this.value.manageCurrentLinks();\n            } else {\n                await this.value.manageCurrent();\n            }\n        });\n\n        /**\n         * Same as in EntityAttribute, entities present here were already validated when parent entity called the validate method.\n         * At this point, entities are ready to be saved (only loaded entities).\n         */\n        parentEntity.on(\"afterSave\", async () => {\n            // We don't have to do the following check here:\n            // this.value.isLoading() && (await this.value.load());\n\n            // ...it was already made in the 'save' handler above. Now we only check if not loaded.\n            if (!this.value.isLoaded()) {\n                return;\n            }\n\n            if (this.getAutoSave()) {\n                // If we are using an link class, we only need to save links, and child entities will be automatically\n                // saved if they were loaded.\n                if (this.getUsingClass()) {\n                    const entities = this.value.getCurrentLinks();\n                    for (let i = 0; i < entities.length; i++) {\n                        const current = ((entities[i]: any): Entity);\n                        await current.save({ validation: false });\n                    }\n                } else {\n                    const entities = await this.value.getCurrent();\n                    for (let i = 0; i < entities.length; i++) {\n                        await entities[i].save({ validation: false });\n                    }\n                }\n\n                if (this.getAutoDelete()) {\n                    this.getUsingClass()\n                        ? await this.value.deleteInitialLinks()\n                        : await this.value.deleteInitial();\n                }\n            }\n\n            // Set current entities as new initial values.\n            this.value.syncInitial();\n            if (this.getUsingClass()) {\n                this.value.syncInitialLinks();\n            }\n        });\n\n        parentEntity.on(\"delete\", async () => {\n            if (this.getAutoDelete()) {\n                await this.value.load();\n                const entities = {\n                    current: this.getUsingClass()\n                        ? this.value.getCurrentLinks()\n                        : this.value.getCurrent(),\n                    class: this.getUsingClass() || this.getEntitiesClass()\n                };\n                for (let i = 0; i < entities.current.length; i++) {\n                    if (entities.current[i] instanceof entities.class) {\n                        await entities.current[i].emit(\"delete\");\n                    }\n                }\n            }\n        });\n\n        parentEntity.on(\"beforeDelete\", async () => {\n            if (this.getAutoDelete()) {\n                await this.value.load();\n                const entities = {\n                    current: this.getUsingClass()\n                        ? this.value.getCurrentLinks()\n                        : this.value.getCurrent(),\n                    class: this.getUsingClass() || this.getEntitiesClass()\n                };\n\n                for (let i = 0; i < entities.current.length; i++) {\n                    if (entities.current[i] instanceof entities.class) {\n                        await entities.current[i].delete({ events: { delete: false } });\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns AttributeValue class to be used on construct.\n     * @returns {AttributeValue}\n     */\n    getAttributeValueClass() {\n        return EntitiesAttributeValue;\n    }\n\n    getEntitiesClass(): ?Class<Entity> {\n        return this.classes.entities.class;\n    }\n\n    getUsingClass(): ?Class<Entity> {\n        const entitiesClass = this.classes.using.class;\n        if (!entitiesClass) {\n            return null;\n        }\n\n        if (entitiesClass.name) {\n            return entitiesClass;\n        }\n\n        return entitiesClass();\n    }\n\n    getEntitiesAttribute(): string {\n        return this.classes.entities.attribute;\n    }\n\n    getUsingAttribute(): string {\n        return this.classes.using.attribute;\n    }\n\n    setUsing(entityClass: Class<Entity>, entityAttribute: ?string) {\n        this.classes.using.class = entityClass;\n        if (typeof entityAttribute === \"undefined\") {\n            this.classes.using.attribute = _.camelCase(this.classes.entities.class.name);\n        } else {\n            this.classes.using.attribute = entityAttribute;\n        }\n\n        return this;\n    }\n\n    /**\n     * Should linked entities be automatically saved once parent entity is saved? By default, linked entities will be automatically saved,\n     * before main entity was saved. Can be disabled, although not recommended since manual saving needs to be done in that case.\n     * @param autoSave\n     * @returns {EntityAttribute}\n     */\n    setAutoSave(autoSave: boolean = true) {\n        this.auto.save = autoSave;\n        return this;\n    }\n\n    /**\n     * Returns true if auto save is enabled, otherwise false.\n     * @returns {boolean}\n     */\n    getAutoSave(): boolean {\n        return this.auto.save;\n    }\n\n    /**\n     * Should linked entity be automatically deleted once parent entity is deleted? By default, linked entities will be automatically\n     * deleted, before main entity was deleted. Can be disabled, although not recommended since manual deletion needs to be done in that case.\n     * @param autoDelete\n     * @returns {EntityAttribute}\n     */\n    setAutoDelete(autoDelete: boolean = true) {\n        this.auto.delete = autoDelete;\n        return this;\n    }\n\n    /**\n     * Returns true if auto delete is enabled, otherwise false.\n     * @returns {boolean}\n     */\n    getAutoDelete(): boolean {\n        return this.auto.delete;\n    }\n\n    /**\n     * Loads current entity if needed and returns it.\n     * @returns {Promise<void>}\n     */\n    async getValue(): Promise<mixed> {\n        if (this.value.isClean()) {\n            await this.value.load();\n        }\n\n        await this.normalizeSetValues();\n\n        return this.value.getCurrent();\n    }\n\n    /**\n     * Only allowing EntityCollection or plain arrays\n     * @param value\n     * @returns {Promise<void>}\n     */\n    setValue(value: mixed): void {\n        if (!this.canSetValue()) {\n            return;\n        }\n\n        const finalValue = this.onSetCallback(value);\n        this.value.setCurrent(finalValue, {\n            skipDifferenceCheck: true,\n            forceSetAsDirty: true\n        });\n    }\n\n    /**\n     * Sets value received from storage.\n     * @param value\n     * @returns {EntityAttribute}\n     */\n    setStorageValue(value: Array<mixed>) {\n        if (this.classes.using.class) {\n            this.value.setCurrentLinks(value, { skipDifferenceCheck: true });\n            this.value.setInitialLinks(value);\n        } else {\n            this.value.setCurrent(value, { skipDifferenceCheck: true });\n            this.value.setInitial(value);\n        }\n        return this;\n    }\n\n    /**\n     * Will not get triggered if setToStorage is set to false, that's why we don't have to do any additional checks here.\n     * It will return only valid IDs, other values will be ignored because they must not enter storage.\n     * @returns {Promise<*>}\n     */\n    async getStorageValue(): Promise<mixed> {\n        if (_.isArray(this.value.getCurrent())) {\n            // Not using getValue method because it would load the entity without need.\n            const storageValue = [];\n            for (let i = 0; i < this.value.getCurrent().length; i++) {\n                const value = this.value.getCurrent()[i];\n                const id = _.get(value, \"id\", value);\n                this.getParentModel()\n                    .getParentEntity()\n                    .isId(id) && storageValue.push(id);\n            }\n\n            return storageValue;\n        }\n\n        return [];\n    }\n\n    /**\n     * Validates current value - if it's not an instance of EntityCollection, an error will be thrown.\n     */\n    async validateType(value: mixed) {\n        if (Array.isArray(value)) {\n            return;\n        }\n        this.expected(\"instance of Array or EntityCollection\", typeof value);\n    }\n\n    async getValidationValue() {\n        await this.normalizeSetValues();\n        return this.getUsingClass() ? this.value.getCurrentLinks() : this.value.getCurrent();\n    }\n\n    async validateValue(value: mixed) {\n        const errors = [];\n        const correctClass = this.getUsingClass() || this.getEntitiesClass();\n\n        if (!Array.isArray(value)) {\n            return;\n        }\n\n        for (let i = 0; i < value.length; i++) {\n            const currentEntity = value[i];\n            if (!(currentEntity instanceof correctClass)) {\n                errors.push({\n                    code: ModelError.INVALID_ATTRIBUTE,\n                    data: {\n                        index: i\n                    },\n                    message: `Validation failed, item at index ${i} not an instance of correct Entity class.`\n                });\n                continue;\n            }\n\n            try {\n                await currentEntity.validate();\n            } catch (e) {\n                errors.push({\n                    code: e.code,\n                    data: { index: i, ...e.data },\n                    message: e.message\n                });\n            }\n        }\n\n        if (!_.isEmpty(errors)) {\n            throw new ModelError(\"Validation failed.\", ModelError.INVALID_ATTRIBUTE, {\n                items: errors\n            });\n        }\n    }\n\n    /**\n     * Validates on attribute level and then on entity level (its attributes recursively).\n     * If attribute has validators, we must unfortunately always load the attribute value. For example, if we had a 'required'\n     * validator, and entity not loaded, we cannot know if there is a value or not, and thus if the validator should fail.\n     * @returns {Promise<void>}\n     */\n    async validate() {\n        // If attribute has validators or loading is in progress, wait until loaded.\n        const mustValidate = this.value.isDirty() || this.hasValidators() || this.value.isLoading();\n        if (!mustValidate) {\n            return;\n        }\n\n        await this.value.load();\n\n        const value = await this.getValidationValue();\n        const valueValidation = !Attribute.isEmptyValue(value);\n\n        valueValidation && (await this.validateType(value));\n        await this.validateAttribute(value);\n        valueValidation && (await this.validateValue(value));\n    }\n\n    async getJSONValue(): mixed | Promise<Array<mixed>> {\n        const value = await this.getValue();\n        if (value instanceof EntityCollection) {\n            return value.toJSON();\n        }\n\n        return value;\n    }\n\n    async normalizeSetValues() {\n        // Before returning, let's load all values.\n        const entities = this.value.getCurrent();\n\n        if (!Array.isArray(entities)) {\n            return;\n        }\n\n        for (let i = 0; i < entities.length; i++) {\n            let current = entities[i];\n\n            // \"Instance of Entity\" check is enough at this point.\n            if (current instanceof Entity) {\n                continue;\n            }\n\n            const entityClass = this.getEntitiesClass();\n            if (!entityClass) {\n                continue;\n            }\n\n            const id = _.get(current, \"id\", current);\n            if (\n                this.getParentModel()\n                    .getParentEntity()\n                    .isId(id)\n            ) {\n                const entity = await entityClass.findById(id);\n                if (entity) {\n                    // If we initially had object with other data set, we must populate entity with it, otherwise\n                    // just set loaded entity (because only an ID was received, without additional data).\n                    if (current instanceof Object) {\n                        entity.populate(current);\n                    }\n                    entities[i] = entity;\n                }\n                continue;\n            }\n\n            if (current instanceof Object) {\n                entities[i] = new entityClass().populate(current);\n            }\n        }\n    }\n}\n\nexport default EntitiesAttribute;\n"]}