{"version":3,"sources":["../../src/entityAttributes/entitiesAttributeValue.js"],"names":["EntitiesAttributeValue","constructor","attribute","current","initial","links","dirty","set","state","loading","loaded","queue","load","isLoading","push","resolve","isLoaded","classes","getParentModel","getParentEntity","isExisting","getToStorage","using","class","hasInitialLinks","findByIds","i","length","hasInitial","entities","id","getAttribute","getStorageValue","find","query","isClean","getInitial","initialLinks","getInitialLinks","Array","isArray","setCurrent","skipDifferenceCheck","setCurrentLinks","__executeQueue","setInitial","value","hasCurrent","getCurrent","deleteInitial","currentEntitiesIds","map","entity","currentInitial","includes","delete","syncInitial","manageCurrent","setInitialLinks","getCurrentLinks","hasCurrentLinks","options","isDifferentFrom","deleteInitialLinks","currentLinksIds","syncInitialLinks","manageCurrentLinks","currentLinks","currentEntity","link","j","linkedEntity","getUsingAttribute","getUsingClass","getEntitiesAttribute","clean"],"mappings":"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","file":"entitiesAttributeValue.js","sourcesContent":["// @flow\nimport { AttributeValue } from \"webiny-model\";\nimport type { Attribute } from \"webiny-model\";\n\nimport Entity from \"./../entity\";\nimport EntityCollection from \"./../entityCollection\";\n\nclass EntitiesAttributeValue extends AttributeValue {\n    initial: Array<mixed> | EntityCollection;\n\n    constructor(attribute: Attribute) {\n        super(attribute);\n\n        this.current = new EntityCollection();\n        this.initial = new EntityCollection();\n\n        this.links = {\n            dirty: false,\n            set: false,\n            current: new EntityCollection(),\n            initial: new EntityCollection()\n        };\n\n        this.state = {\n            loading: false,\n            loaded: false\n        };\n\n        this.queue = [];\n    }\n\n    /**\n     * Ensures data is loaded correctly, and in the end returns current value.\n     * @returns {Promise<*>}\n     */\n    async load() {\n        if (this.isLoading()) {\n            return new Promise(resolve => this.queue.push(resolve));\n        }\n\n        if (this.isLoaded()) {\n            return;\n        }\n\n        const classes = this.attribute.classes;\n\n        this.state.loading = true;\n\n        if (\n            this.attribute\n                .getParentModel()\n                .getParentEntity()\n                .isExisting()\n        ) {\n            if (this.attribute.getToStorage()) {\n                if (classes.using.class) {\n                    if (this.hasInitialLinks()) {\n                        this.links.initial = await classes.using.class.findByIds(\n                            this.links.initial\n                        );\n\n                        this.initial = new EntityCollection();\n                        for (let i = 0; i < this.links.initial.length; i++) {\n                            this.initial.push(await this.links.initial[i][classes.using.attribute]);\n                        }\n                    }\n                } else {\n                    if (this.hasInitial()) {\n                        this.initial = await classes.entities.class.findByIds(this.initial);\n                    }\n                }\n            } else {\n                let id = await this.attribute\n                    .getParentModel()\n                    .getAttribute(\"id\")\n                    .getStorageValue();\n\n                if (classes.using.class) {\n                    this.links.initial = await classes.using.class.find({\n                        query: { [classes.entities.attribute]: id }\n                    });\n\n                    this.initial = new EntityCollection();\n                    for (let i = 0; i < this.links.initial.length; i++) {\n                        this.initial.push(await this.links.initial[i][classes.using.attribute]);\n                    }\n                } else {\n                    this.initial = await classes.entities.class.find({\n                        query: { [classes.entities.attribute]: id }\n                    });\n                }\n            }\n\n            if (this.isClean()) {\n                const initial = this.getInitial();\n                const initialLinks = this.getInitialLinks();\n                if (Array.isArray(initial) && Array.isArray(initialLinks)) {\n                    this.setCurrent(new EntityCollection(initial), { skipDifferenceCheck: true });\n                    if (classes.using.class) {\n                        this.setCurrentLinks(new EntityCollection(initialLinks), {\n                            skipDifferenceCheck: true\n                        });\n                    }\n                }\n            }\n        }\n\n        this.state.loading = false;\n        this.state.loaded = true;\n\n        await this.__executeQueue();\n\n        return this.current;\n    }\n\n    setInitial(value: Array<mixed> | EntityCollection): this {\n        this.initial = value;\n        return this;\n    }\n\n    getInitial(): Array<mixed> | EntityCollection {\n        return this.initial;\n    }\n\n    hasInitial(): boolean {\n        return this.getInitial().length > 0;\n    }\n\n    hasCurrent(): boolean {\n        return this.getCurrent().length > 0;\n    }\n\n    async deleteInitial(): Promise<void> {\n        // If initial is empty, that means nothing was ever loaded (attribute was not accessed) and there is nothing to do.\n        // Otherwise, deleteInitial method will internally delete only entities that are not needed anymore.\n        if (!this.hasInitial()) {\n            return;\n        }\n\n        const initial = this.getInitial(),\n            currentEntitiesIds = this.getCurrent().map(entity => entity.id);\n\n        for (let i = 0; i < initial.length; i++) {\n            const currentInitial: mixed = initial[i];\n            if (currentInitial instanceof Entity) {\n                if (!currentEntitiesIds.includes(currentInitial.id)) {\n                    await currentInitial.delete();\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates a new array that contains all currently loaded entities.\n     */\n    syncInitial(): void {\n        this.initial = this.getCurrent().map(entity => entity);\n    }\n\n    async manageCurrent() {\n        const current = this.getCurrent();\n\n        for (let i = 0; i < current.length; i++) {\n            const entity = current[i];\n            await entity.set(\n                this.attribute.classes.entities.attribute,\n                this.attribute.getParentModel().getParentEntity()\n            );\n        }\n    }\n\n    getInitialLinks(): Array<mixed> | EntityCollection {\n        return this.links.initial;\n    }\n\n    hasInitialLinks(): boolean {\n        return this.getInitialLinks().length > 0;\n    }\n\n    setInitialLinks(value: mixed): this {\n        this.links.initial = value;\n        return this;\n    }\n\n    getCurrentLinks(): EntityCollection {\n        return this.links.current;\n    }\n\n    hasCurrentLinks(): boolean {\n        return this.getCurrentLinks().length > 0;\n    }\n\n    setCurrentLinks(value: mixed, options: Object = {}): this {\n        this.links.set = true;\n\n        if (!options.skipDifferenceCheck) {\n            if (this.isDifferentFrom(value)) {\n                this.links.dirty = true;\n            }\n        }\n\n        this.links.current = value;\n        return this;\n    }\n\n    async deleteInitialLinks(): Promise<void> {\n        // If initial is empty, that means nothing was ever loaded (attribute was not accessed) and there is nothing to do.\n        // Otherwise, deleteInitial method will internally delete only entities that are not needed anymore.\n        if (!this.hasInitialLinks()) {\n            return;\n        }\n\n        const initialLinks = this.getInitialLinks(),\n            // $FlowIgnore\n            currentLinksIds = this.getCurrentLinks().map(entity => entity.id);\n\n        for (let i = 0; i < initialLinks.length; i++) {\n            const initial = initialLinks[i];\n            // $FlowIgnore\n            if (!currentLinksIds.includes(initial.id)) {\n                initial instanceof Entity && (await initial.delete());\n            }\n        }\n    }\n\n    /**\n     * Creates a new array that contains all currently loaded entities.\n     */\n    syncInitialLinks(): void {\n        this.links.initial = this.getCurrentLinks().map(entity => entity);\n    }\n\n    async manageCurrentLinks(): Promise<void> {\n        const links = [],\n            current = this.getCurrent(),\n            currentLinks = this.getCurrentLinks();\n\n        for (let i = 0; i < current.length; i++) {\n            const currentEntity = current[i];\n\n            // Following chunk actually represents: \"_.find(currentLinks, link => link.group === current);\".\n            // \"for\" loop used because of async operations.\n            let link = null;\n            for (let j = 0; j < currentLinks.length; j++) {\n                // $FlowIgnore\n                const linkedEntity = await currentLinks[j][this.attribute.getUsingAttribute()];\n                if (linkedEntity === currentEntity) {\n                    link = currentLinks[j];\n                    break;\n                }\n            }\n\n            // If entity has an already existing link instance, it will be used. Otherwise a new instance will be created.\n            // Links array cannot contain two same instances.\n            if (link && !links.includes(link)) {\n                links.push(link);\n            } else {\n                const entity = new (this.attribute.getUsingClass())();\n                await entity.set(this.attribute.getUsingAttribute(), currentEntity);\n                await entity.set(\n                    this.attribute.getEntitiesAttribute(),\n                    this.attribute.getParentModel().getParentEntity()\n                );\n                links.push(entity);\n            }\n        }\n\n        this.setCurrentLinks(links);\n    }\n\n    /**\n     * Value cannot be set as clean if ID is missing in one of the entities.\n     * @returns {this}\n     */\n    clean(): this {\n        const current = this.getCurrent();\n        for (let i = 0; i < current.length; i++) {\n            if (current[i] instanceof Entity) {\n                if (!current[i].id) {\n                    return this;\n                }\n            }\n        }\n\n        return super.clean();\n    }\n\n    async __executeQueue() {\n        if (this.queue.length) {\n            for (let i = 0; i < this.queue.length; i++) {\n                await this.queue[i]();\n            }\n            this.queue = [];\n        }\n    }\n}\n\nexport default EntitiesAttributeValue;\n"]}