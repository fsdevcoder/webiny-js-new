{"version":3,"sources":["../src/sync.js"],"names":["Sync","constructor","options","logClass","log","execute","tables","length","logWarning","message","tags","logInfo","errors","count","i","table","getName","data","sql","drop","returnSQL","create","sync","preview","logSuccess","e","logError","error","getLog","getLogClass","getTables","params","paramsClone","push","__log"],"mappings":"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","file":"sync.js","sourcesContent":["// @flow\nimport Log from \"./log\";\nimport type { SyncOptions, LogOptions } from \"../types\";\nimport type { Table } from \"webiny-sql-table\";\n\nclass Sync {\n    options: SyncOptions;\n    log: Array<Log>;\n\n    constructor(options: SyncOptions = {}) {\n        this.options = options;\n        if (!this.options.logClass) {\n            this.options.logClass = Log;\n        }\n        this.log = [];\n    }\n\n    async execute() {\n        const tables = this.options.tables;\n        if (!tables || !tables.length) {\n            this.logWarning({\n                message: \"No tables provided.\",\n                tags: [\"noTables\"]\n            });\n            return;\n        }\n\n        this.logInfo({\n            message: `Sync process started, received ${tables.length} table(s) in total.`,\n            tags: [\"sync\", \"start\"]\n        });\n\n        let errors = {\n            count: 0\n        };\n\n        for (let i = 0; i < this.options.tables.length; i++) {\n            const table = new this.options.tables[i]();\n\n            this.logInfo({\n                message: `[${i + 1}/${this.options.tables.length}] Table \"${table.getName()}\".`,\n                data: { table },\n                tags: [\"table\", \"start\"]\n            });\n\n            try {\n                let sql = null;\n                if (this.options.drop) {\n                    sql = await table.drop({ returnSQL: true });\n                    sql += \"\\n\";\n                    sql += await table.create({ returnSQL: true });\n                } else {\n                    sql = await table.sync({ returnSQL: true });\n                }\n\n                if (sql) {\n                    this.logInfo({\n                        message: sql,\n                        tags: [\"table\", \"sql\", \"generated\"],\n                        data: { sql }\n                    });\n                } else {\n                    this.logInfo({\n                        message: `Received empty SQL, proceeding.`,\n                        tags: [\"table\", \"sql\", \"generated\", \"empty\"]\n                    });\n                    continue;\n                }\n\n                if (!this.options.preview) {\n                    this.logInfo({\n                        message: `Syncing table structure...`,\n                        tags: [\"table\", \"sql\", \"execute\"]\n                    });\n\n                    if (this.options.drop) {\n                        await table.drop();\n                        await table.create();\n                    } else {\n                        await table.sync();\n                    }\n                    this.logSuccess({\n                        message: \"Sync complete.\",\n                        tags: [\"table\", \"finish\"]\n                    });\n                }\n            } catch (e) {\n                errors.count++;\n                this.logError({\n                    message: \"Sync error: \" + e,\n                    data: { error: e }\n                });\n            }\n        }\n\n        if (!errors.count) {\n            this.logSuccess({\n                message: `Sync complete!`,\n                tags: [\"sync\", \"finish\"]\n            });\n        } else {\n            this.logError({\n                message: `Sync completed with ${errors.count} error(s).`,\n                data: { errors },\n                tags: [\"sync\", \"finish\"]\n            });\n        }\n    }\n\n    getLog(): Array<Log> {\n        return this.log;\n    }\n\n    getLogClass(): Class<Log> {\n        return this.options.logClass;\n    }\n\n    getTables(): Array<Table> {\n        return this.options.tables;\n    }\n\n    logInfo(params: LogOptions = {}) {\n        const paramsClone = { ...params };\n        if (paramsClone.tags) {\n            paramsClone.tags.push(\"info\");\n        } else {\n            paramsClone.tags = [\"info\"];\n        }\n        this.__log(paramsClone);\n    }\n\n    logWarning(params: LogOptions = {}) {\n        const paramsClone = { ...params };\n        if (paramsClone.tags) {\n            paramsClone.tags.push(\"warning\");\n        } else {\n            paramsClone.tags = [\"warning\"];\n        }\n        this.__log(paramsClone);\n    }\n\n    logError(params: LogOptions = {}) {\n        const paramsClone = { ...params };\n        if (paramsClone.tags) {\n            paramsClone.tags.push(\"error\");\n        } else {\n            paramsClone.tags = [\"error\"];\n        }\n        this.__log(paramsClone);\n    }\n\n    logSuccess(params: LogOptions = {}) {\n        const paramsClone = { ...params };\n        if (paramsClone.tags) {\n            paramsClone.tags.push(\"success\");\n        } else {\n            paramsClone.tags = [\"success\"];\n        }\n        this.__log(paramsClone);\n    }\n\n    __log(params: LogOptions = {}): Sync {\n        const logClass = this.getLogClass();\n        const log = new logClass(params.message, { ...params.data, sync: this }, params.tags);\n        this.log.push(log);\n        return this;\n    }\n}\n\nexport default Sync;\n"]}