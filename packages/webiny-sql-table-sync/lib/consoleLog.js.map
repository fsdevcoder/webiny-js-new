{"version":3,"sources":["../src/consoleLog.js"],"names":["ConsoleLog","constructor","message","data","tags","output","type","__getTypeFromTags","color","__getColorFromType","includes","console","log","blue","__outputHorizontalLine","COLOR_ERROR","COLOR_WARNING","COLOR_SUCCESS","COLOR_INFO","COLOR_DEFAULT","i"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,UAAN,uBAA6B;AACzBC,gBAAYC,OAAZ,EAA6BC,IAA7B,EAAuCC,IAAvC,EAA4D;AACxD,cAAMF,OAAN,EAAeC,IAAf,EAAqBC,IAArB;AACAJ,mBAAWK,MAAX,CAAkBH,OAAlB,EAA2BC,IAA3B,EAAiCC,IAAjC;AACH;;AAED;AACA;AACA,WAAOC,MAAP,CAAcH,OAAd,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AAC/B,cAAME,OAAON,WAAWO,iBAAX,CAA6BH,IAA7B,CAAb;AACA,YAAII,QAAQR,WAAWS,kBAAX,CAA8BH,IAA9B,CAAZ;;AAEA,YAAIF,KAAKM,QAAL,CAAc,OAAd,KAA0BN,KAAKM,QAAL,CAAc,OAAd,CAA9B,EAAsD;AAClDC,oBAAQC,GAAR,CAAY,gBAAMC,IAAN,CAAWb,WAAWc,sBAAX,EAAX,CAAZ;AACH;;AAED,YAAIV,KAAKM,QAAL,CAAc,MAAd,KAAyBN,KAAKM,QAAL,CAAc,QAAd,CAA7B,EAAsD;AAClDC,oBAAQC,GAAR,CAAY,gBAAMC,IAAN,CAAWb,WAAWc,sBAAX,EAAX,CAAZ;AACH;;AAED,YAAIV,KAAKM,QAAL,CAAc,WAAd,KAA8BN,KAAKM,QAAL,CAAc,KAAd,CAAlC,EAAwD;AACpDF,oBAAQ,SAAR;AACH;;AAEDG,gBAAQC,GAAR,CAAY,gBAAMJ,KAAN,EAAaN,OAAb,CAAZ;;AAEA,YAAIE,KAAKM,QAAL,CAAc,OAAd,KAA0BN,KAAKM,QAAL,CAAc,OAAd,CAA9B,EAAsD;AAClDC,oBAAQC,GAAR,CAAY,gBAAMC,IAAN,CAAWb,WAAWc,sBAAX,EAAX,CAAZ;AACH;AACJ;;AAED,WAAOL,kBAAP,CAA0BH,IAA1B,EAAwC;AACpC,gBAAQA,IAAR;AACI,iBAAK,OAAL;AACI,uBAAON,WAAWe,WAAlB;AACJ,iBAAK,SAAL;AACI,uBAAOf,WAAWgB,aAAlB;AACJ,iBAAK,SAAL;AACI,uBAAOhB,WAAWiB,aAAlB;AACJ,iBAAK,MAAL;AACI,uBAAOjB,WAAWkB,UAAlB;AACJ;AACI,uBAAOlB,WAAWmB,aAAlB;AAVR;AAYH;;AAED,WAAOZ,iBAAP,CAAyBH,IAAzB,EAAuD;AACnD,gBAAQ,IAAR;AACI,iBAAKA,KAAKM,QAAL,CAAc,OAAd,CAAL;AACI,uBAAO,OAAP;AACJ,iBAAKN,KAAKM,QAAL,CAAc,SAAd,CAAL;AACI,uBAAO,SAAP;AACJ,iBAAKN,KAAKM,QAAL,CAAc,SAAd,CAAL;AACI,uBAAO,SAAP;AACJ,iBAAKN,KAAKM,QAAL,CAAc,MAAd,CAAL;AACI,uBAAO,MAAP;AACJ;AACI,uBAAO,IAAP;AAVR;AAYH;;AAED,WAAOI,sBAAP,GAAgC;AAC5B,YAAIT,SAAS,EAAb;AACA,aAAK,IAAIe,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AACzBf,sBAAU,QAAV;AACH;AACD,eAAOA,MAAP;AACH;AAnEwB;;AAsE7BL,WAAWe,WAAX,GAAyB,KAAzB;AACAf,WAAWgB,aAAX,GAA2B,QAA3B;AACAhB,WAAWiB,aAAX,GAA2B,OAA3B;AACAjB,WAAWkB,UAAX,GAAwB,MAAxB;AACAlB,WAAWmB,aAAX,GAA2B,SAA3B;;kBAEenB,U","file":"consoleLog.js","sourcesContent":["import chalk from \"chalk\";\nimport Log from \"./log\";\n\nclass ConsoleLog extends Log {\n    constructor(message: string, data: {}, tags: Array<string>) {\n        super(message, data, tags);\n        ConsoleLog.output(message, data, tags);\n    }\n\n    // TODO: complete tests!\n    // Not completely tested because formatting could maybe still change - once finished, update tests too!\n    static output(message, data, tags) {\n        const type = ConsoleLog.__getTypeFromTags(tags);\n        let color = ConsoleLog.__getColorFromType(type);\n\n        if (tags.includes(\"start\") && tags.includes(\"table\")) {\n            console.log(chalk.blue(ConsoleLog.__outputHorizontalLine()));\n        }\n\n        if (tags.includes(\"sync\") && tags.includes(\"finish\")) {\n            console.log(chalk.blue(ConsoleLog.__outputHorizontalLine()));\n        }\n\n        if (tags.includes(\"generated\") && tags.includes(\"sql\")) {\n            color = \"default\";\n        }\n\n        console.log(chalk[color](message));\n\n        if (tags.includes(\"start\") && tags.includes(\"table\")) {\n            console.log(chalk.blue(ConsoleLog.__outputHorizontalLine()));\n        }\n    }\n\n    static __getColorFromType(type): string {\n        switch (type) {\n            case \"error\":\n                return ConsoleLog.COLOR_ERROR;\n            case \"warning\":\n                return ConsoleLog.COLOR_WARNING;\n            case \"success\":\n                return ConsoleLog.COLOR_SUCCESS;\n            case \"info\":\n                return ConsoleLog.COLOR_INFO;\n            default:\n                return ConsoleLog.COLOR_DEFAULT;\n        }\n    }\n\n    static __getTypeFromTags(tags: Array<string>): ?string {\n        switch (true) {\n            case tags.includes(\"error\"):\n                return \"error\";\n            case tags.includes(\"warning\"):\n                return \"warning\";\n            case tags.includes(\"success\"):\n                return \"success\";\n            case tags.includes(\"info\"):\n                return \"info\";\n            default:\n                return null;\n        }\n    }\n\n    static __outputHorizontalLine() {\n        let output = \"\";\n        for (let i = 0; i < 60; i++) {\n            output += \"\\u2500\";\n        }\n        return output;\n    }\n}\n\nConsoleLog.COLOR_ERROR = \"red\";\nConsoleLog.COLOR_WARNING = \"yellow\";\nConsoleLog.COLOR_SUCCESS = \"green\";\nConsoleLog.COLOR_INFO = \"blue\";\nConsoleLog.COLOR_DEFAULT = \"default\";\n\nexport default ConsoleLog;\n"]}