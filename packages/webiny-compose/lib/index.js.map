{"version":3,"sources":["../src/index.js"],"names":["functions","params","length","resolve","chain","parentResolve","parentReject","next","fn","shift","reject","e","then","catch"],"mappings":";;;;;;;;;;;;;;kBAQe,UAASA,YAA6B,EAAtC,EAAoD;AAC/D,WAAO,UAASC,MAAT,EAAwC;AAC3C,YAAI,CAACD,UAAUE,MAAf,EAAuB;AACnB,mBAAO,kBAAQC,OAAR,EAAP;AACH;;AAED;AACA,cAAMC,QAAQ,CAAC,GAAGJ,SAAJ,CAAd;AACA,eAAO,sBAAY,CAACK,aAAD,EAAgBC,YAAhB,KAAiC;AAChD,kBAAMC;AAAA,2DAAO,aAAY;AACrB,0BAAMC,KAAKJ,MAAMK,KAAN,EAAX;AACA,wBAAI,CAACD,EAAL,EAAS;AACL,+BAAO,kBAAQL,OAAR,EAAP;AACH;AACD,2BAAO;AAAA,oEAAY,WAAOA,OAAP,EAAgBO,MAAhB,EAA2B;AAC1C,gCAAI;AACA,sCAAMF,GAAGP,MAAH,EAAWE,OAAX,EAAoBE,aAApB,CAAN;AACH,6BAFD,CAEE,OAAOM,CAAP,EAAU;AACRD,uCAAOC,CAAP;AACH;AACJ,yBANM;;AAAA;AAAA;AAAA;AAAA,0BAOFC,IAPE,CAOG,YAAM;AACR,+BAAOL,MAAP;AACH,qBATE,EAUFK,IAVE,CAUG,YAAM;AACRP;AACH,qBAZE,EAaFQ,KAbE,CAaI,aAAK;AACRP,qCAAaK,CAAb;AACH,qBAfE,CAAP;AAgBH,iBArBK;;AAAA;AAAA;AAAA;AAAA,gBAAN;;AAuBA,mBAAOJ,MAAP;AACH,SAzBM,CAAP;AA0BH,KAjCD;AAkCH,C","file":"index.js","sourcesContent":["// @flow\n\n/**\n * Compose a single middleware from the array of middleware functions\n *\n * @param {Array<Function>} functions functions\n * @return {Function}\n */\nexport default function(functions: Array<Function> = []): Function {\n    return function(params: mixed): Promise<mixed> {\n        if (!functions.length) {\n            return Promise.resolve();\n        }\n\n        // Create a clone of function chain to prevent modifying the original array with `shift()`\n        const chain = [...functions];\n        return new Promise((parentResolve, parentReject) => {\n            const next = async () => {\n                const fn = chain.shift();\n                if (!fn) {\n                    return Promise.resolve();\n                }\n                return new Promise(async (resolve, reject) => {\n                    try {\n                        await fn(params, resolve, parentResolve);\n                    } catch (e) {\n                        reject(e);\n                    }\n                })\n                    .then(() => {\n                        return next();\n                    })\n                    .then(() => {\n                        parentResolve();\n                    })\n                    .catch(e => {\n                        parentReject(e);\n                    });\n            };\n\n            return next();\n        });\n    };\n}\n"]}