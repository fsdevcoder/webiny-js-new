{"version":3,"sources":["../src/index.js"],"names":["config","apiVersions","s3","S3StorageDriver","constructor","S3","omit","directory","trim","getFile","key","options","params","Bucket","bucket","Key","undefined","reject","getObject","promise","then","data","body","Body","meta","setFile","file","newKey","createDatePrefix","regex","RegExp","test","format","Date","now","prefix","startsWith","Metadata","putObject","getMeta","headObject","setMeta","merge","resolve","exists","catch","getKeys","filter","keys","result","newResult","continuationToken","__listBucketContent","concat","items","forEach","item","match","push","delete","deleteObject","rename","sourceKey","targetKey","copyObject","CopySource","getURL","publicUrl","endpoint","trimEnd","getSize","ContentLength","getTimeModified","date","LastModified","getTime","getContentType","ContentType","getAbsolutePath","FetchOwner","MaxKeys","Prefix","ContinuationToken","listObjectsV2","Contents","IsTruncated","NextContinuationToken"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport AWS from \"aws-sdk\";\nimport fecha from \"fecha\";\nimport { StorageError } from \"webiny-file-storage\";\nimport type { IFileData, IFileStorageDriver } from \"webiny-file-storage/types\";\nimport type { S3StorageDriverConfig } from \"../types\";\n\n// lock down AWS API versions\nAWS.config.apiVersions = {\n    s3: \"2006-03-01\"\n};\n\n/**\n * S3StorageDriver class instance is the AWS S3 driver for webiny-file-storage.\n *\n * @class S3StorageDriver\n * @example\n * import S3StorageDriver from \"webiny-file-storage-s3\";\n * import type { S3StorageDriverConfig } from \"webiny-file-storage-s3\";\n *\n * const params: S3StorageDriverConfig = {\n *     bucket: \"TestBucket\",\n *     accessKeyId: \"AWS_AccessKeyId\",\n *     secretAccessKey: \"AWS_SecretAccessKey\",\n *     region: \"us-east-2\",\n *     endpoint: \"s3.us-east-2.amazonaws.com\"\n * };\n *\n * const s3Storage = new S3StorageDriver(S3StorageDriverConfig);\n * s3Storage.getFile(\"fileKey\");\n */\nclass S3StorageDriver implements IFileStorageDriver {\n    config: S3StorageDriverConfig;\n    s3: AWS.S3;\n\n    constructor(config: S3StorageDriverConfig) {\n        this.s3 = new AWS.S3(_.omit(config, [\"createDatePrefix\", \"directory\", \"publicUrl\"]));\n        this.config = { ...config };\n        if (this.config.directory) {\n            this.config.directory = _.trim(this.config.directory, \"/\");\n        }\n    }\n\n    /**\n     * Returns the file and its content.\n     * @param key This is the file identifier under which the file is stored.\n     * @param options This is the list of additional parameters - defined by IFileStorageDriver, but not used in case of this driver.\n     * @returns {Promise<IFileData>} `IFileData` object.\n     */\n    getFile(key: string, options?: Object): Promise<IFileData> {\n        const params = {\n            Bucket: this.config.bucket,\n            Key: key\n        };\n\n        if (options !== null && options !== undefined) {\n            return Promise.reject(\n                new StorageError(\"S3 driver doesn't support the options parameter.\")\n            );\n        }\n\n        return this.s3\n            .getObject(params)\n            .promise()\n            .then(data => {\n                return { body: data.Body, meta: _.omit(data, [\"Body\"]) };\n            });\n    }\n\n    /**\n     * Writes the given file and returns final file key.\n     * @param key This is the file identifier under which the file will be stored.\n     * @param file This is the `IFileData` object containing the content and meta information.\n     * @returns {Promise<string>} The final key under which the file is stored.\n     */\n    setFile(key: string, file: IFileData): Promise<string> {\n        if (file.body === null) {\n            return Promise.reject(new StorageError(\"File body must be a string or a Buffer\"));\n        }\n\n        let newKey = key;\n\n        // date prepend\n        if (this.config.createDatePrefix) {\n            // eslint-disable-next-line\n            const regex = new RegExp(`^${this.config.directory}\\/\\\\d{4}\\/\\\\d{2}\\/\\\\d{2}\\/`);\n            if (!regex.test(newKey)) {\n                newKey = fecha.format(Date.now(), \"YYYY/MM/DD\") + \"/\" + key;\n            }\n        }\n\n        // directory prepend\n        const prefix = this.config.directory + \"/\";\n        if (this.config.directory !== \"\" && !newKey.startsWith(prefix)) {\n            newKey = prefix + newKey;\n        }\n\n        // check if file metadata is set\n        let meta = {};\n        if (file.meta) {\n            meta = file.meta;\n        }\n\n        // save to s3\n        const params = {\n            Body: file.body,\n            Bucket: this.config.bucket,\n            Key: newKey,\n            Metadata: meta\n        };\n        return this.s3\n            .putObject(params)\n            .promise()\n            .then(() => {\n                return newKey;\n            });\n    }\n\n    /**\n     * Returns file meta information.\n     * @param key This is the file identifier under which the file is stored.\n     * @returns {Promise<Object>} Object containing the file meta information.\n     */\n    getMeta(key: string): Promise<?Object> {\n        const params = {\n            Bucket: this.config.bucket,\n            Key: key\n        };\n\n        return this.s3\n            .headObject(params)\n            .promise()\n            .then((data: Object) => {\n                return data;\n            });\n    }\n\n    /**\n     * Sets file meta information. Tne new meta information is merged with the existing meta information.\n     * @param key This is the file identifier under which the file is stored.\n     * @param meta This is the object containing the new meta information that will be added to the file.\n     * @returns {Promise<boolean>} Returns `true` if meta has been set successfully, otherwise `false`.\n     */\n    setMeta(key: string, meta: Object): Promise<boolean> {\n        return this.getFile(key).then((file: IFileData) => {\n            return this.setFile(key, { body: file.body, meta: _.merge(file.meta, meta) }).then(\n                () => {\n                    return Promise.resolve(true);\n                }\n            );\n        });\n    }\n\n    /**\n     * Returns `true` if the file exists, otherwise false.\n     * @param key This is the file identifier under which the file is stored.\n     * @returns {Promise<boolean>}\n     */\n    exists(key: string): Promise<boolean> {\n        return this.getMeta(key)\n            .then(() => {\n                return Promise.resolve(true);\n            })\n            .catch(() => Promise.resolve(false));\n    }\n\n    /**\n     * Returns an array of all keys.\n     * In case of S3, the `key`  parameter is used as a `Prefix` filter. Once the results matching this filter have\n     * been retrieved a regex match with `filter` param is applied and then all matching files are returned.\n     *\n     * @param key       This is the \"Prefix\" filter.\n     * @param filter    (Optional) Additional regex filter that will be applied\n     * @returns {Promise<Array>} Array of file keys that match the given filters.\n     */\n    async getKeys(key?: string, filter?: string): Promise<Array<string>> {\n        let keys = [];\n        let result = [];\n        let newResult = {};\n        let continuationToken = \"\";\n\n        if (typeof key !== \"string\") {\n            return Promise.reject(\n                new StorageError(\"S3 driver requires that the key parameter is present.\")\n            );\n        }\n\n        // get all objects matching the prefix\n        do {\n            newResult = await this.__listBucketContent(key, continuationToken);\n            result = _.concat(result, newResult.items || []);\n\n            continuationToken = newResult.continuationToken;\n        } while (newResult.continuationToken);\n\n        // filter the objects before returning\n        if (typeof filter === \"string\") {\n            const regex = new RegExp(filter, \"g\");\n            result.forEach(item => {\n                if (item.Key.match(regex) !== null) {\n                    keys.push(item.Key);\n                }\n            });\n        } else {\n            result.forEach(item => {\n                keys.push(item.Key);\n            });\n        }\n\n        return keys;\n    }\n\n    /**\n     * Delete the file.\n     * @param key This is the file identifier under which the file is stored.\n     * @returns {Promise<boolean>} `true` if the file is deleted successfully, otherwise `false`.\n     */\n    delete(key: string): Promise<boolean> {\n        const params = {\n            Bucket: this.config.bucket,\n            Key: key\n        };\n        return this.s3\n            .deleteObject(params)\n            .promise()\n            .then(() => {\n                return true;\n            });\n    }\n\n    /**\n     * Rename the file.\n     * @param sourceKey This is the new file key.\n     * @param targetKey This is the current file identifier under which the file is stored.\n     * @returns {Promise<boolean>} `true` if the file is renamed successfully, otherwise `false`.\n     */\n    rename(sourceKey: string, targetKey: string): Promise<boolean> {\n        // Copy the object to a new location\n        return this.s3\n            .copyObject({\n                Bucket: this.config.bucket,\n                Key: targetKey,\n                CopySource: \"/\" + this.config.bucket + \"/\" + sourceKey\n            })\n            .promise()\n            .then(() => {\n                // Delete the old object\n                return this.s3\n                    .deleteObject({\n                        Bucket: this.config.bucket,\n                        Key: sourceKey\n                    })\n                    .promise()\n                    .then(() => {\n                        return true;\n                    });\n            });\n    }\n\n    /**\n     * Returns the public file url.\n     * In case the `publicUrl` param is defined in the `S3StorageDriverConfig` the public url will return `publicUrl+key`.\n     * In case the `publicUrl` param is not defined, the method uses the `endpoint` and `bucket` param to form the\n     * public url.\n     *\n     * @param key This is the file identifier under which the file is stored.\n     * @returns {string} Public URL.\n     */\n    getURL(key: string): string {\n        if (!this.config.publicUrl) {\n            return \"https://\" + this.config.endpoint + \"/\" + this.config.bucket + \"/\" + key;\n        }\n\n        return _.trimEnd(this.config.publicUrl, \"/\") + \"/\" + key;\n    }\n\n    /**\n     * Get file size in bytes.\n     *\n     * @param key This is the file identifier under which the file is stored.\n     * @returns {Promise<number>} Number of bytes.\n     */\n    getSize(key: string): Promise<?number> {\n        return this.getMeta(key).then(data => {\n            if (\n                data === undefined ||\n                data === null ||\n                !(\"ContentLength\" in data) ||\n                typeof data.ContentLength !== \"number\"\n            ) {\n                return Promise.reject(new StorageError(\"Unable to determine object size.\"));\n            } else {\n                return data.ContentLength;\n            }\n        });\n    }\n\n    /**\n     * Get file last modified time.\n     *\n     * @param key This is the file identifier under which the file is stored.\n     * @returns {Promise<number>} Unix timestamp.\n     */\n    getTimeModified(key: string): Promise<?number> {\n        return this.getMeta(key).then(data => {\n            if (data === undefined || data === null || !(\"LastModified\" in data)) {\n                return Promise.reject(\n                    new StorageError(\"Unable to determine object last modified time.\")\n                );\n            } else {\n                const date = new Date(data.LastModified);\n                return date.getTime();\n            }\n        });\n    }\n\n    /**\n     * Get file content type.\n     *\n     * @param key This is the file identifier under which the file is stored.\n     * @returns {Promise<string>} File content type.\n     */\n    getContentType(key: string): Promise<?string> {\n        return this.getMeta(key).then(data => {\n            if (data === undefined || data === null || \"ContentType\" in data !== true) {\n                return Promise.reject(new StorageError(\"Unable to determine object size.\"));\n            } else {\n                return data.ContentType;\n            }\n        });\n    }\n\n    /**\n     * Get absolute file path.\n     * @param key This is the file identifier under which the file is stored.\n     * @returns {Promise<string>} In case of S3, the same `key` that is provided is returned.\n     */\n    getAbsolutePath(key: string): Promise<string> {\n        return Promise.resolve(key);\n    }\n\n    /**\n     * Returns a list of files matching the given prefix.\n     * @param prefix\n     * @param continuationToken\n     * @returns {PromiseLike<T> | Promise<T>}\n     * @private\n     */\n    __listBucketContent(prefix: string, continuationToken?: string): Promise<Object> {\n        let params: {\n            Bucket: string,\n            FetchOwner: boolean,\n            MaxKeys: number,\n            Prefix?: string,\n            ContinuationToken?: boolean | string\n        } = {\n            Bucket: this.config.bucket,\n            FetchOwner: false,\n            MaxKeys: 1000\n        };\n\n        params.Prefix = prefix;\n\n        if (continuationToken) {\n            params.ContinuationToken = continuationToken;\n        }\n\n        return this.s3\n            .listObjectsV2(params)\n            .promise()\n            .then(data => {\n                const result = {};\n                result.items = data.Contents;\n\n                // in case it's truncated, we also return the continuationToken\n                if (data.IsTruncated) {\n                    result.continuationToken = data.NextContinuationToken;\n                } else {\n                    result.continuationToken = false;\n                }\n\n                return result;\n            });\n    }\n}\n\nexport default S3StorageDriver;\n"]}