{"version":3,"sources":["../src/index.js"],"names":["LocalStorageDriver","constructor","config","publicUrl","trimEnd","getFile","key","options","filePath","join","directory","opts","encoding","resolve","reject","readFile","err","data","message","body","setFile","file","newKey","createDatePrefix","test","format","Date","now","trimStart","content","outputFile","then","getMeta","setMeta","meta","exists","pathExists","getKeys","filter","pattern","cwd","root","arr","map","replace","getTimeModified","stat","stats","mtime","getTime","delete","remove","rename","sourceKey","targetKey","source","target","move","getURL","getSize","size","getContentType","lookup","getAbsolutePath"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport fecha from \"fecha\";\nimport fs from \"fs-extra\";\nimport path from \"path\";\nimport globby from \"globby\";\nimport mime from \"mime-types\";\nimport { StorageError } from \"webiny-file-storage\";\nimport type { IFileData, IFileStorageDriver } from \"webiny-file-storage/types\";\n\ndeclare type LocalStorageDriverConfig = {\n    createDatePrefix: boolean,\n    publicUrl: string,\n    directory: string\n};\n\nclass LocalStorageDriver implements IFileStorageDriver {\n    config: LocalStorageDriverConfig;\n\n    constructor(config: LocalStorageDriverConfig) {\n        if (config.publicUrl) {\n            config.publicUrl = _.trimEnd(config.publicUrl, \"/\");\n        }\n\n        this.config = config;\n    }\n\n    /**\n     * Reads the contents of the file\n     */\n    getFile(key: string, options?: Object): Promise<IFileData> {\n        const filePath = path.join(this.config.directory, key);\n\n        const opts: { encoding?: string, flag?: string } = {};\n        if (options && options.encoding) {\n            opts.encoding = (options.encoding: string);\n        }\n\n        return new Promise((resolve, reject) => {\n            fs.readFile(filePath, opts, (err: ?ErrnoError, data: string | Buffer) => {\n                if (err) {\n                    return reject(new StorageError(err.message));\n                }\n\n                resolve({ body: data });\n            });\n        });\n    }\n\n    /**\n     * Writes the given File\n     */\n    setFile(key: string, file: IFileData): Promise<string> {\n        if (file.body === null) {\n            return Promise.reject(new StorageError(\"File body must be a string or a Buffer\"));\n        }\n\n        let newKey = key;\n        if (this.config.createDatePrefix) {\n            if (!/^\\d{4}\\/\\d{2}\\/\\d{2}\\//.test(newKey)) {\n                newKey = path.join(fecha.format(Date.now(), \"YYYY/MM/DD\"), key);\n            }\n        }\n\n        newKey = _.trimStart(newKey, \"/\");\n\n        const filePath = path.join(this.config.directory, newKey);\n        const content: string | Buffer = file.body;\n        return fs.outputFile(filePath, content).then(() => newKey);\n    }\n\n    /**\n     * Get meta data\n     */\n    // eslint-disable-next-line\n    getMeta(key: string): Promise<?Object> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * Set meta data\n     */\n    // eslint-disable-next-line\n    setMeta(key: string, meta: Object): Promise<boolean> {\n        return Promise.resolve(true);\n    }\n\n    /**\n     * Checks whether the file exists\n     */\n    exists(key: string): Promise<boolean> {\n        return fs.pathExists(path.join(this.config.directory, key));\n    }\n\n    /**\n     * Returns an array of all keys (files and directories)\n     *\n     * For storage that doesn't support directories, both parameters are irrelevant.\n     *\n     * @param key       (Optional) Key of a directory to get keys from. If not set - keys will be read from the storage root.\n     * @param filter    (Optional) Glob pattern to filter returned file keys\n     */\n    getKeys(key?: string, filter?: string): Promise<Array<string>> {\n        const pattern = path.join(key || \"\", filter || \"*\");\n\n        const options = {\n            cwd: this.config.directory,\n            root: this.config.directory\n        };\n\n        return globby(pattern, options).then(arr => {\n            return arr.map(file => _.trimStart(file.replace(this.config.directory, \"\"), \"/\"));\n        });\n    }\n\n    /**\n     * Returns the last modified time\n     */\n    getTimeModified(key: string): Promise<?number> {\n        const filePath = path.join(this.config.directory, key);\n        return new Promise((resolve, reject) => {\n            fs.stat(filePath, (err, stats) => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(stats.mtime.getTime());\n            });\n        });\n    }\n\n    /**\n     * Deletes the file\n     */\n    delete(key: string): Promise<boolean> {\n        const filePath = path.join(this.config.directory, key);\n        return fs.remove(filePath).then(() => true);\n    }\n\n    /**\n     * Renames a file\n     */\n    async rename(sourceKey: string, targetKey: string): Promise<boolean> {\n        const source = path.join(this.config.directory, sourceKey);\n        const target = path.join(this.config.directory, targetKey);\n        return fs.move(source, target).then(() => true);\n    }\n\n    /**\n     * Returns public file URL\n     */\n    getURL(key: string): string {\n        if (!this.config.publicUrl) {\n            return key;\n        }\n\n        return this.config.publicUrl + key;\n    }\n\n    /**\n     * Get file size (if supported)\n     */\n    getSize(key: string): Promise<?number> {\n        const filePath = path.join(this.config.directory, key);\n        return new Promise((resolve, reject) => {\n            fs.stat(filePath, (err, stats) => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(stats.size);\n            });\n        });\n    }\n\n    getContentType(key: string): Promise<?string> {\n        const filePath = path.join(this.config.directory, key);\n        return Promise.resolve(mime.lookup(filePath));\n    }\n\n    /**\n     * Get absolute file path (if supported).\n     * Return original file key if not supported.\n     */\n    getAbsolutePath(key: string): Promise<string> {\n        return Promise.resolve(path.join(this.config.directory, key));\n    }\n}\n\nexport default LocalStorageDriver;\n"]}