{"version":3,"sources":["../src/index.js"],"names":["params","image","transformations","img","read","AUTO","i","length","action","width","height","x","y","resize","crop","quality","getBuffer","err","buffer","resolve"],"mappings":";;;;;;;;;;;;;;;;;;AACA;;;;;;kBAEe,MAAM;AACjB;AAAA,mDAAO,WAAOA,MAAP,EAAsF;AACzF,kBAAM,EAAEC,KAAF,EAASC,eAAT,KAA6BF,MAAnC;AACA,gBAAIG,MAAM,MAAM,eAAKC,IAAL,CAAUH,KAAV,CAAhB;AACA,kBAAMI,OAAO,eAAKA,IAAlB;;AAEA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,gBAAgBK,MAApC,EAA4CD,GAA5C,EAAiD;AAC7C,2CAA8BJ,gBAAgBI,CAAhB,CAA9B;AAAA,sBAAM,EAAEE,MAAF,EAAN;AAAA,sBAAmBR,MAAnB;AACA,oBAAI,EAAES,KAAF,EAASC,MAAT,EAAiBC,CAAjB,EAAoBC,CAApB,KAA0BZ,MAA9B;;AAEA,wBAAQQ,MAAR;AACI,yBAAK,QAAL;AACIL,8BAAM,MAAMA,IAAIU,MAAJ,CAAWJ,SAASJ,IAApB,EAA0BK,UAAUL,IAApC,CAAZ;AACA;AACJ,yBAAK,MAAL;AACIF,8BAAM,MAAMA,IAAIW,IAAJ,CAASH,KAAKN,IAAd,EAAoBO,KAAKP,IAAzB,EAA+BI,SAASJ,IAAxC,EAA8CK,UAAUL,IAAxD,CAAZ;AACA;AACJ,yBAAK,SAAL;AACI,8BAAMF,IAAIY,OAAJ,CAAYf,OAAOe,OAAnB,CAAN;AACA;AATR;AAWH;;AAED,mBAAO,sBAAY,mBAAW;AAC1B,uBAAOZ,IAAIa,SAAJ,CAAcX,IAAd,EAAoB,UAACY,GAAD,EAAMC,MAAN,EAAiB;AACxCC,4BAAQD,MAAR;AACH,iBAFM,CAAP;AAGH,aAJM,CAAP;AAKH,SA3BD;;AAAA;AAAA;AAAA;AAAA;AA4BH,C","file":"index.js","sourcesContent":["// @flow\nimport jimp from \"jimp\";\n\nexport default () => {\n    return async (params: { image: Buffer, transformations: Array<Object> }): Promise<Buffer> => {\n        const { image, transformations } = params;\n        let img = await jimp.read(image);\n        const AUTO = jimp.AUTO;\n\n        for (let i = 0; i < transformations.length; i++) {\n            const { action, ...params } = transformations[i];\n            let { width, height, x, y } = params;\n\n            switch (action) {\n                case \"resize\":\n                    img = await img.resize(width || AUTO, height || AUTO);\n                    break;\n                case \"crop\":\n                    img = await img.crop(x || AUTO, y || AUTO, width || AUTO, height || AUTO);\n                    break;\n                case \"quality\":\n                    await img.quality(params.quality);\n                    break;\n            }\n        }\n\n        return new Promise(resolve => {\n            return img.getBuffer(AUTO, (err, buffer) => {\n                resolve(buffer);\n            });\n        });\n    };\n};\n"]}