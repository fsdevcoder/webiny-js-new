{"version":3,"sources":["../../src/i18n/index.js"],"names":["I18n","groups","list","locales","current","defaultFormats","date","time","datetime","price","symbol","format","decimal","thousand","precision","number","cacheKey","translations","component","modifiers","registerModifiers","translate","base","variables","options","key","getTextKey","namespace","Object","getOwnPropertyNames","prototype","map","method","bind","Config","enabled","locale","setLocale","setCacheKey","IndexedDB","get","i18nCache","allJsApps","Apps","neededJsApps","getCacheKey","getLocale","forEach","jsApp","push","length","api","Api","Endpoint","jsApps","response","getData","app","set","mergeTranslations","Cookies","expires","Http","addRequestInterceptor","http","addHeader","remove","location","reload","textKey","output","getTranslation","replaceVariables","value","outputFormat","inputFormat","getDateFormat","parse","convertPhpToJsDateTimeFormat","e","getTimeFormat","getDatetimeFormat","getPriceFormat","replace","formatMoney","getNumberFormat","formatNumber","translation","query","_fields","modifier","getName","registerModifier","name","i","part","values","split","variable","isValidElement","Error","parameters","shift","execute","text","stringOutput","parts","reduce","carry","processTextPart","index","element","elementHasFlag","props","createElement"],"mappings":"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","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport md5 from 'blueimp-md5';\nimport Webiny from 'webiny';\nimport React from 'react';\nimport I18nComponent from './I18n';\nimport fecha from 'fecha';\nimport accounting from 'accounting';\n\nimport modifiers from './Modifiers';\nimport PhpJsMap from './PhpJsMap';\n\n/**\n * Main class used for all I18n needs.\n */\nclass I18n {\n    constructor() {\n        this.groups = {list: []};\n        this.locales = {current: null, list: []};\n\n        /**\n         * If we fail to fetch formats for currently selected locale, these default formats will be used.\n         * @type {{date: string, time: string, datetime: string, number: string}}\n         */\n        this.defaultFormats = {\n            date: 'd/m/Y',\n            time: 'h:i',\n            datetime: 'd/m/Y H:i',\n            price: {\n                symbol: '',\n                format: '{symbol}{amount}',\n                decimal: '.',\n                thousand: ',',\n                precision: 2\n            },\n            number: {\n                decimal: '.',\n                thousand: ', ',\n                precision: 2\n            }\n        };\n\n        /**\n         * Cache key, received from server side.\n         * @type {null}\n         */\n        this.cacheKey = null;\n\n        /**\n         * All currently-loaded translations, for easier (synchronous) access.\n         * @type {{}}\n         */\n        this.translations = {};\n\n        /**\n         * Current React component used to render texts in the UI.\n         * @type {component}\n         */\n        this.component = I18nComponent;\n\n        /**\n         * All registered modifiers.\n         * Default built-in modifiers are registered immediately below.\n         * @type {{}}\n         */\n        this.modifiers = {};\n        this.registerModifiers(modifiers);\n\n        /**\n         * When users call Webiny.I18n(...), we won't to give them the translate method by default (for convenience sake).\n         * @param base\n         * @param variables\n         * @param options\n         * @returns {*}\n         */\n        const translate = (base, variables = {}, options = {}) => {\n            if (_.isString(base) && _.isString(variables)) {\n                const key = this.getTextKey(base, variables);\n                return this.translate(variables, options, key);\n            }\n\n            const key = this.getTextKey(options.namespace, base);\n            return this.translate(base, variables, key);\n        };\n\n        Object.getOwnPropertyNames(I18n.prototype).map(method => {\n            if (method !== 'constructor') {\n                translate[method] = this[method].bind(this);\n            }\n        });\n\n        return translate;\n    }\n\n    /**\n     * Initializes i18n with given locale and current locale cache key.\n     * @returns {*}\n     */\n    async init() {\n        if (!Webiny.Config.I18n.enabled || !Webiny.Config.I18n.locale) {\n            return this;\n        }\n\n        this.setLocale(Webiny.Config.I18n.locale).setCacheKey(Webiny.Config.I18n.locale.cacheKey);\n\n        // Cached I18N translations from previous sessions.\n        let i18nCache = await Webiny.IndexedDB.get('Webiny.I18n');\n\n        const allJsApps = _.keys(Webiny.Apps);\n        let neededJsApps = [];\n\n        // If we have the same cache key and the same locale, that means we have latest translations - we can safely read from local storage.\n        if (i18nCache && i18nCache.cacheKey === this.getCacheKey() && i18nCache.locale === this.getLocale().key) {\n            // Oh yeah, we have the same cache key, but let's still check if we have a JS app which we didn't cache before maybe.\n            allJsApps.forEach(jsApp => {\n                if (!i18nCache.translations[jsApp]) {\n                    neededJsApps.push(jsApp);\n                }\n            });\n        } else {\n            // If no cache, we must reset cache and fetch translations for all loaded JS apps.\n            neededJsApps = allJsApps;\n            i18nCache = null;\n        }\n\n        // If there are new apps to be added to the existing list of translations, let's load and update the cache.\n        if (neededJsApps.length > 0) {\n            const api = new Webiny.Api.Endpoint('/entities/webiny/i18n-texts');\n            const response = await api.get('translations/locales/' + this.getLocale().key, {jsApps: neededJsApps});\n\n            // If we have a valid cache, let's just update translations in it.\n            if (i18nCache) {\n                _.each(response.getData('translations'), (translations, jsApp) => i18nCache.translations[jsApp] = translations);\n            } else {\n                // Otherwise, define it directly with data received in response.\n                i18nCache = response.getData();\n            }\n\n            // Finally, let's do data normalization - put empty objects for JS apps that don't\n            // have any translations yet, and thus weren't returned in response from the server.\n            allJsApps.forEach(app => {\n                if (!i18nCache.translations[app]) {\n                    i18nCache.translations[app] = {};\n                }\n            });\n\n            // Update the cache.\n            await Webiny.IndexedDB.set('Webiny.I18n', i18nCache);\n        }\n\n        // Let's store all keys/translations into I18N - data is flatten, meaning we don't have structure received from server anymore).\n        _.each(i18nCache.translations, jsApps => {\n            _.each(jsApps, translations => this.mergeTranslations(translations))\n        });\n\n        // Finally, let's set i18n cookie, this constantly prolongs cookie expiration.\n        Webiny.Cookies.set('webiny-i18n', this.getLocale().key, {expires: 30});\n        Webiny.Http.addRequestInterceptor(http => {\n            http.addHeader('X-Webiny-I18n', this.getLocale().key);\n        });\n\n        return this;\n    }\n\n    /**\n     * Changes current locale and refreshes the page so that I18N can be reinitialized and new translations immediately loaded.\n     * @param locale\n     */\n    setLocaleAndReload(locale) {\n        Webiny.IndexedDB.remove('Webiny.I18n');\n        Webiny.Cookies.set('webiny-i18n', locale, {expires: 30});\n        location.reload();\n    }\n\n    /**\n     * Returns full translation for given base text and optionally variables. If text key is not found, base text will be returned.\n     * @param base\n     * @param variables\n     * @param textKey\n     * @returns {*}\n     */\n    translate(base, variables = {}, textKey) {\n        let output = this.getTranslation(textKey) || base;\n        return this.replaceVariables(output, variables);\n    }\n\n    /**\n     * Formats and outputs date.\n     * It will try to load format from currently selected locale's settings. If not defined, default formats will be used.\n     * @param value\n     * @param outputFormat\n     * @param inputFormat\n     */\n    date(value, outputFormat = null, inputFormat = 'Y-m-dTH:i:sO') {\n        if (!outputFormat) {\n            outputFormat = this.getDateFormat();\n        }\n\n        if (!_.isDate(value)) {\n            try {\n                value = fecha.parse(value, this.convertPhpToJsDateTimeFormat(inputFormat));\n            } catch (e) {\n                value = fecha.parse(value, 'X');\n            }\n        }\n\n        return fecha.format(value, this.convertPhpToJsDateTimeFormat(outputFormat));\n    }\n\n    /**\n     * Formats and outputs time.\n     * It will try to load format from currently selected locale's settings. If not defined, default formats will be used.\n     * @param value\n     * @param outputFormat\n     * @param inputFormat\n     */\n    time(value, outputFormat = null, inputFormat = 'Y-m-dTH:i:sO') {\n        if (!outputFormat) {\n            outputFormat = this.getTimeFormat();\n        }\n\n        if (!_.isDate(value)) {\n            try {\n                value = fecha.parse(value, this.convertPhpToJsDateTimeFormat(inputFormat));\n            } catch (e) {\n                value = fecha.parse(value, 'X');\n            }\n        }\n\n        return fecha.format(value, this.convertPhpToJsDateTimeFormat(outputFormat));\n    }\n\n    /**\n     * Formats and outputs date/time.\n     * It will try to load format from currently selected locale's settings. If not defined, default formats will be used.\n     * @param value\n     * @param outputFormat\n     * @param inputFormat\n     */\n    datetime(value, outputFormat = null, inputFormat = 'Y-m-dTH:i:sO') {\n        if (!outputFormat) {\n            outputFormat = this.getDatetimeFormat();\n        }\n\n        if (!_.isDate(value)) {\n            try {\n                value = fecha.parse(value, this.convertPhpToJsDateTimeFormat(inputFormat));\n            } catch (e) {\n                value = fecha.parse(value, 'X');\n            }\n        }\n\n        return fecha.format(value, this.convertPhpToJsDateTimeFormat(outputFormat));\n    }\n\n    /**\n     * Outputs formatted number as amount of price.\n     * @param value\n     * @param outputFormat\n     */\n    price(value, outputFormat = null) {\n        if (!outputFormat) {\n            outputFormat = this.getPriceFormat();\n        } else {\n            outputFormat = _.assign({}, this.defaultFormats.price, outputFormat);\n        }\n\n        // Let's convert Webiny format to accounting.\n        let format = outputFormat.format;\n        format = format.replace('{symbol}', '%s');\n        format = format.replace('{amount}', '%v');\n\n        return accounting.formatMoney(value, outputFormat.symbol, outputFormat.precision, outputFormat.thousand, outputFormat.decimal, format);\n    }\n\n    /**\n     * Outputs formatted number.\n     * @param value\n     * @param outputFormat\n     */\n    number(value, outputFormat = null) {\n        if (!outputFormat) {\n            outputFormat = this.getNumberFormat();\n        } else {\n            outputFormat = _.assign({}, this.defaultFormats.number, outputFormat);\n        }\n        return accounting.formatNumber(value, outputFormat.precision, outputFormat.thousand, outputFormat.decimal);\n    }\n\n    /**\n     * Sets I18N component which will be used for rendering texts.\n     * @param component\n     */\n    setComponent(component) {\n        this.component = component;\n    }\n\n    /**\n     * Returns currently set I18N component.\n     * @param component\n     * @returns {component|*}\n     */\n    getComponent(component) {\n        return this.component;\n    }\n\n    /**\n     * Returns translation for given text key.\n     * @param key\n     * @returns {*|string}\n     */\n    getTranslation(key) {\n        return this.translations[key] || '';\n    }\n\n    /**\n     * Returns all translations for current locale.\n     * @returns {*|{}}\n     */\n    getTranslations() {\n        return this.translations;\n    }\n\n    /**\n     * Returns true if given key has a translation for currently set locale.\n     * @param key\n     */\n    hasTranslation(key) {\n        return !_.isEmpty(this.translations.key);\n    }\n\n    /**\n     * Sets translation for given text key.\n     * @param key\n     * @param translation\n     * @returns {I18n}\n     */\n    setTranslation(key, translation) {\n        this.translations[key] = translation;\n        return this;\n    }\n\n    /**\n     * Sets translations that will be used.\n     * @returns {*|{}}\n     */\n    setTranslations(translations) {\n        this.translations = translations;\n        return this;\n    }\n\n    /**\n     * Merges given translations object with already existing.\n     * @returns {*|{}}\n     */\n    mergeTranslations(translations) {\n        return _.assign(this.translations, translations);\n    }\n\n    /**\n     * Returns currently selected locale (locale's key).\n     */\n    getLocale() {\n        return this.locales.current;\n    }\n\n    /**\n     * Returns a list of all available locales.\n     */\n    async getLocales(query = {_fields: 'id,key,label,enabled'}) {\n        const response = await new Webiny.Api.Endpoint('/entities/webiny/i18n-locales').get(null, query);\n        this.locales.list = response.getData('list');\n        return this.locales.list;\n    }\n\n    /**\n     * Sets current locale.\n     */\n    setLocale(locale) {\n        this.locales.current = locale;\n        return this;\n    }\n\n    /**\n     * Returns a list of all available text groups.\n     */\n    async getTextGroups(query = {_fields: 'id,app,name,description'}) {\n        const response = await new Webiny.Api.Endpoint('/entities/webiny/i18n-text-groups').get(null, query);\n        this.locales.list = response.getData('list');\n        return this.locales.list;\n    }\n\n    /**\n     * Sets current cache key (returned from server).\n     * @param cacheKey\n     * @returns {I18n}\n     */\n    setCacheKey(cacheKey) {\n        this.cacheKey = cacheKey;\n        return this;\n    }\n\n    /**\n     * Returns current cache key (returned from server).\n     * @returns {*|null}\n     */\n    getCacheKey() {\n        return this.cacheKey;\n    }\n\n    /**\n     * Registers single modifier.\n     * @returns {I18n}\n     */\n    registerModifier(modifier) {\n        this.modifiers[modifier.getName()] = modifier;\n        return this;\n    }\n\n    /**\n     * Registers all modifiers in given array.\n     * @param modifiers\n     * @returns {I18n}\n     */\n    registerModifiers(modifiers) {\n        modifiers.forEach(modifier => this.registerModifier(modifier));\n        return this;\n    }\n\n    /**\n     * Unregisters given modifier.\n     * @param name\n     * @returns {I18n}\n     */\n    unregisterModifier(name) {\n        delete this.modifiers[name];\n        return this;\n    }\n\n    /**\n     * Returns default formats\n     * @returns {{date: string, time: string, datetime: string, number: string}}\n     */\n    getDefaultFormats() {\n        return this.defaultFormats;\n    }\n\n    /**\n     * Returns current format to be used when outputting dates.\n     */\n    getDateFormat() {\n        return _.get(this.locales.current, 'formats.date', this.defaultFormats.date);\n    }\n\n    /**\n     * Returns current format to be used when outputting time.\n     */\n    getTimeFormat() {\n        return _.get(this.locales.current, 'formats.time', this.defaultFormats.time);\n    }\n\n    /**\n     * Returns current format to be used when outputting date/time.\n     */\n    getDatetimeFormat() {\n        return _.get(this.locales.current, 'formats.datetime', this.defaultFormats.datetime);\n    }\n\n    /**\n     * Returns current format to be used when outputting prices.\n     */\n    getPriceFormat() {\n        return _.assign({}, this.defaultFormats.price, _.get(this.locales.current, 'formats.price', {}));\n    }\n\n    /**\n     * Returns current format to be used when outputting numbers.\n     */\n    getNumberFormat() {\n        return _.assign({}, this.defaultFormats.number, _.get(this.locales.current, 'formats.number', {}));\n    }\n\n    /**\n     * Returns text key generated from given namespace and base text.\n     * @param namespace\n     * @param base\n     * @returns {string}\n     */\n    getTextKey(namespace, base) {\n        return namespace + '.' + md5(base);\n    }\n\n    /**\n     * Converts PHP formatting definition into JS (suitable for date/time plugin - fecha).\n     * Check PhpJsMap.js for more information.\n     * @param format\n     * @returns {string}\n     */\n    convertPhpToJsDateTimeFormat(format) {\n        let output = '';\n        for (let i = 0; i < format.length; i++) {\n            const current = format[i];\n            output += PhpJsMap[current] && PhpJsMap[current][0] ? PhpJsMap[current][0] : current;\n        }\n\n        return output;\n    }\n\n    /**\n     * Processes text parts (used when translating texts).\n     * @param part\n     * @param values\n     * @returns {*}\n     */\n    processTextPart(part, values) {\n        // If not a variable, but an ordinary text, just return it, we don't need to do any extra processing with it.\n        if (!_.startsWith(part, '{')) {\n            return part;\n        }\n\n        part = _.trim(part, '{}');\n        part = part.split('|');\n\n        let [variable, modifier] = part;\n\n        if (!_.has(values, variable)) {\n            return `{${variable}}`;\n        }\n\n        // Check if we have received {value: ..., format: ...} object.\n        const output = {value: values[variable], format: null};\n\n        // If variable value is an object, the it must have 'value' key set.\n        // We must also be sure we are not dealing with React component.\n        if (_.isPlainObject(output.value) && !React.isValidElement(output.value)) {\n            if (!_.has(output.value, 'value')) {\n                throw Error(`Key \"value\" is missing for variable {${variable}}.`);\n            }\n\n            // Before assigning real value, let's check if we have a custom formatter set.\n            if (_.isFunction(output.value.format)) {\n                output.format = output.value.format;\n            }\n\n            output.value = output.value.value;\n        }\n\n        if (modifier) {\n            let parameters = modifier.split(':');\n            let name = parameters.shift();\n            if (this.modifiers[name]) {\n                const modifier = this.modifiers[name];\n                output.value = modifier.execute('' + output.value, parameters);\n            }\n        }\n\n        if (output.format) {\n            return output.format(output.value);\n        }\n\n        return output.value;\n    }\n\n    /**\n     * This is responsible for replacing given text with given values.\n     * It will automatically detect if it needs to return a string or JSX based on given variables\n     * (if all variables are strings, then final output will also be returned as string)\n     * @param text\n     * @param values\n     * @returns {*}\n     */\n    replaceVariables(text, values) {\n        if (_.isEmpty(values)) {\n            return text;\n        }\n\n        // Let's first check if we need to return pure string or JSX\n        let stringOutput = true;\n        _.each(values, value => {\n            if (!_.isString(value) && !_.isNumber(value)) {\n                stringOutput = false;\n                return false;\n            }\n        });\n\n        // Get text parts\n        const parts = text.split(/(\\{.*?\\})/);\n\n        if (stringOutput) {\n            return parts.reduce((carry, part) => carry + this.processTextPart(part, values), '');\n        }\n\n        // Let's create a JSX output\n        return parts.map((part, index) => <webiny-i18n-part key={index}>{this.processTextPart(part, values)}</webiny-i18n-part>);\n    }\n\n    toText(element) {\n        if (_.isString(element) || _.isNumber(element)) {\n            return element;\n        }\n\n        if (Webiny.elementHasFlag(element, 'i18n')) {\n            const props = element.props;\n            return this.translate(props.base, props.variables, props.textKey);\n        }\n\n        return '';\n    }\n\n    /**\n     * Used for rendering text in DOM\n     * @param textKey\n     * @param base\n     * @param variables\n     * @returns {XML}\n     */\n    render(textKey, base, variables) {\n        return React.createElement(this.component, {textKey, base, variables});\n    }\n\n}\n\nexport default new I18n();"]}