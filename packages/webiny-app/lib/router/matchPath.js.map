{"version":3,"sources":["../../src/router/matchPath.js"],"names":["patternCache","cacheLimit","cacheCount","compilePath","pattern","options","cacheKey","end","strict","sensitive","cache","keys","re","compiledPattern","matchPath","pathname","parent","path","exact","match","exec","url","values","isExact","params","reduce","memo","key","index","name"],"mappings":";;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,eAAe,EAArB;AACA,IAAMC,aAAa,KAAnB;AACA,IAAIC,aAAa,CAAjB;;AAEA,IAAMC,cAAc,SAAdA,WAAc,CAACC,OAAD,EAAUC,OAAV,EAAsB;AACtC,QAAMC,gBAAcD,QAAQE,GAAtB,GAA4BF,QAAQG,MAApC,GAA6CH,QAAQI,SAA3D;AACA,QAAMC,QAAQV,aAAaM,QAAb,MAA2BN,aAAaM,QAAb,IAAyB,EAApD,CAAd;;AAEA,QAAII,MAAMN,OAAN,CAAJ,EAAoB,OAAOM,MAAMN,OAAN,CAAP;;AAEpB,QAAMO,OAAO,EAAb;AACA,QAAMC,KAAK,4BAAaR,OAAb,EAAsBO,IAAtB,EAA4BN,OAA5B,CAAX;AACA,QAAMQ,kBAAkB,EAAED,MAAF,EAAMD,UAAN,EAAxB;;AAEA,QAAIT,aAAaD,UAAjB,EAA6B;AACzBS,cAAMN,OAAN,IAAiBS,eAAjB;AACAX;AACH;;AAED,WAAOW,eAAP;AACH,CAhBD;;AAkBA;;;AAGA,IAAMC,YAAY,SAAZA,SAAY,CAACC,QAAD,EAAoC;AAAA,QAAzBV,OAAyB,uEAAf,EAAe;AAAA,QAAXW,MAAW;;AAClD,QAAI,OAAOX,OAAP,KAAmB,QAAvB,EAAiCA,UAAU,EAAEY,MAAMZ,OAAR,EAAV;;AADiB,mBAGiBA,OAHjB;AAAA,QAG1CY,IAH0C,YAG1CA,IAH0C;AAAA,kCAGpCC,KAHoC;AAAA,QAGpCA,KAHoC,kCAG5B,KAH4B;AAAA,mCAGrBV,MAHqB;AAAA,QAGrBA,MAHqB,mCAGZ,KAHY;AAAA,sCAGLC,SAHK;AAAA,QAGLA,SAHK,sCAGO,KAHP;;;AAKlD,QAAIQ,QAAQ,IAAZ,EAAkB,OAAOD,MAAP;;AALgC,uBAO7Bb,YAAYc,IAAZ,EAAkB,EAAEV,KAAKW,KAAP,EAAcV,cAAd,EAAsBC,oBAAtB,EAAlB,CAP6B;AAAA,QAO1CG,EAP0C,gBAO1CA,EAP0C;AAAA,QAOtCD,IAPsC,gBAOtCA,IAPsC;;AAQlD,QAAMQ,QAAQP,GAAGQ,IAAH,CAAQL,QAAR,CAAd;;AAEA,QAAI,CAACI,KAAL,EAAY,OAAO,IAAP;;AAVsC,wCAYzBA,KAZyB;AAAA,QAY3CE,GAZ2C;AAAA,QAYnCC,MAZmC;;AAalD,QAAMC,UAAUR,aAAaM,GAA7B;;AAEA,QAAIH,SAAS,CAACK,OAAd,EAAuB,OAAO,IAAP;;AAEvB,WAAO;AACHN,kBADG,EACG;AACNI,aAAKJ,SAAS,GAAT,IAAgBI,QAAQ,EAAxB,GAA6B,GAA7B,GAAmCA,GAFrC,EAE0C;AAC7CE,wBAHG,EAGM;AACTC,gBAAQb,KAAKc,MAAL,CAAY,UAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAsB;AACtCF,iBAAKC,IAAIE,IAAT,IAAiBP,OAAOM,KAAP,CAAjB;AACA,mBAAOF,IAAP;AACH,SAHO,EAGL,EAHK;AAJL,KAAP;AASH,CA1BD;;kBA4BeZ,S","file":"matchPath.js","sourcesContent":["import pathToRegexp from \"path-to-regexp\";\n\nconst patternCache = {};\nconst cacheLimit = 10000;\nlet cacheCount = 0;\n\nconst compilePath = (pattern, options) => {\n    const cacheKey = `${options.end}${options.strict}${options.sensitive}`;\n    const cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});\n\n    if (cache[pattern]) return cache[pattern];\n\n    const keys = [];\n    const re = pathToRegexp(pattern, keys, options);\n    const compiledPattern = { re, keys };\n\n    if (cacheCount < cacheLimit) {\n        cache[pattern] = compiledPattern;\n        cacheCount++;\n    }\n\n    return compiledPattern;\n};\n\n/**\n * Public API for matching a URL pathname to a path pattern.\n */\nconst matchPath = (pathname, options = {}, parent) => {\n    if (typeof options === \"string\") options = { path: options };\n\n    const { path, exact = false, strict = false, sensitive = false } = options;\n\n    if (path == null) return parent;\n\n    const { re, keys } = compilePath(path, { end: exact, strict, sensitive });\n    const match = re.exec(pathname);\n\n    if (!match) return null;\n\n    const [url, ...values] = match;\n    const isExact = pathname === url;\n\n    if (exact && !isExact) return null;\n\n    return {\n        path, // the path pattern used to match\n        url: path === \"/\" && url === \"\" ? \"/\" : url, // the matched portion of the URL\n        isExact, // whether or not we matched exactly\n        params: keys.reduce((memo, key, index) => {\n            memo[key.name] = values[index];\n            return memo;\n        }, {})\n    };\n};\n\nexport default matchPath;\n"]}