{"version":3,"sources":["../../src/router/Router.js"],"names":["debug","Router","routes","config","history","middleware","match","route","params","path","push","name","query","pathname","i","length","exact","parse","location","search","output"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,QAAQ,qBAAa,mBAAb,CAAd;;IAEMC,M;AAWF,sBAAc;AAAA;;AACV,aAAKC,MAAL,GAAc,EAAd;AACH;;;;kCAESC,M,EAAgB;AACtB,iBAAKA,MAAL,qBAAmBA,MAAnB;AACA,iBAAKC,OAAL,GAAeD,OAAOC,OAAtB;AACA,iBAAKC,UAAL,GAAkB,6BAAQF,OAAOE,UAAf,CAAlB;AACA,iBAAKC,KAAL,GAAa,IAAb;AACH;;;iCAEQC,K,EAAc;AACnBA,kBAAMC,MAAN,GAAe,EAAf;AACA,wCAAaD,MAAME,IAAnB,EAAyBF,MAAMC,MAA/B;AACA,iBAAKN,MAAL,CAAYQ,IAAZ,CAAiBH,KAAjB;AACH;;;kCAESI,I,EAAcH,M,EAAY;AAChC,gBAAMD,QAAQI,SAAS,SAAT,GAAqB,KAAKJ,KAA1B,GAAkC,oBAAO,KAAKL,MAAZ,EAAoB,EAAES,UAAF,EAApB,CAAhD;AACA,qCAAUJ,KAAV,eAA2BI,IAA3B;AACA,gBAAMF,OAAO,4BAAaF,MAAME,IAAnB,EAAyBD,MAAzB,CAAb;;AAEA,iBAAKJ,OAAL,CAAaM,IAAb,CAAkBD,IAAlB;AACH;;;mCAEUE,I,EAAcH,M,EAAiB;AACtC,gBAAMD,QAAQ,oBAAO,KAAKL,MAAZ,EAAoB,EAAES,UAAF,EAApB,CAAd;AACA,mBAAO,4BAAaJ,MAAME,IAAnB,EAAyBD,MAAzB,CAAP;AACH;;;oCAEsB;AAAA,gBAAbG,IAAa,uEAAN,IAAM;;AACnB,mBAAOA,OAAO,KAAKL,KAAL,CAAWE,MAAX,CAAkBG,IAAlB,CAAP,GAAiC,KAAKL,KAAL,CAAWE,MAAnD;AACH;;;mCAEqB;AAAA,gBAAbG,IAAa,uEAAN,IAAM;;AAClB,mBAAOA,OAAO,KAAKL,KAAL,CAAWM,KAAX,CAAiBD,IAAjB,CAAP,GAAgC,KAAKL,KAAL,CAAWM,KAAlD;AACH;;;iCAEQD,I,EAAM;AACX,mBAAO,oBAAO,KAAKT,MAAZ,EAAoB,EAAES,UAAF,EAApB,CAAP;AACH;;;;iHAEgBE,Q;;;;;;AACbb,sCAAM,sBAAN,EAA8Ba,QAA9B;AACIN,qC,GAAQ,I;AACHO,iC,GAAI,C;;;sCAAGA,IAAI,KAAKZ,MAAL,CAAYa,M;;;;;AAC5BR,wCAAQ,yBAAY,KAAKL,MAAL,CAAYY,CAAZ,CAAZ,CAAR;AACMR,qC,GAAQ,yBAAUO,QAAV,EAAoB,EAAEJ,MAAMF,MAAME,IAAd,EAAoBO,OAAOT,MAAMS,KAAjC,EAApB,C;;oCACTV,K;;;;;;;;;AAILA,sCAAMM,KAAN,GAAc,sBAAGK,KAAH,CAAS,KAAKb,OAAL,CAAac,QAAb,CAAsBC,MAA/B,CAAd;;AAEA,qCAAKZ,KAAL,GAAaA,KAAb;AACA,qCAAKD,KAAL,GAAaA,KAAb;;AAEME,sC,GAAS,EAAED,YAAF,EAASa,QAAQ,IAAjB,EAAuBd,YAAvB,E;;uCACT,KAAKD,UAAL,CAAgBG,MAAhB,C;;;iEAECA,OAAOY,M;;;AAfsBN,mC;;;;;iEAkBjCP,K;;;;;;;;;;;;;;;;;;;;kBAIAN,M","file":"Router.js","sourcesContent":["import invariant from \"invariant\";\nimport compose from \"webiny-compose\";\nimport debugFactory from \"debug\";\nimport pathToRegExp from \"path-to-regexp\";\nimport _ from \"lodash\";\nimport qs from \"query-string\";\nimport Route from \"./Route.cmp\";\nimport matchPath from \"./matchPath\";\nimport generatePath from \"./generatePath\";\n\nconst debug = debugFactory(\"webiny-app:router\");\n\nclass Router {\n    config: {\n        history: any,\n        middleware: Array<Function>,\n        defaultRoute?: string\n    };\n    middleware: Function;\n    routes: Array<Route>;\n    match: Object;\n    route: Object;\n\n    constructor() {\n        this.routes = [];\n    }\n\n    configure(config: Object) {\n        this.config = { ...config };\n        this.history = config.history;\n        this.middleware = compose(config.middleware);\n        this.match = null;\n    }\n\n    addRoute(route: Route) {\n        route.params = [];\n        pathToRegExp(route.path, route.params);\n        this.routes.push(route);\n    }\n\n    goToRoute(name: string, params: {}) {\n        const route = name === \"current\" ? this.route : _.find(this.routes, { name });\n        invariant(route, `Route \"${name}\" does not exist!`);\n        const path = generatePath(route.path, params);\n\n        this.history.push(path);\n    }\n\n    createHref(name: string, params?: Object) {\n        const route = _.find(this.routes, { name });\n        return generatePath(route.path, params);\n    }\n\n    getParams(name = null) {\n        return name ? this.match.params[name] : this.match.params;\n    }\n\n    getQuery(name = null) {\n        return name ? this.match.query[name] : this.match.query;\n    }\n\n    getRoute(name) {\n        return _.find(this.routes, { name });\n    }\n\n    async matchRoute(pathname: string) {\n        debug(\"Matching location %o\", pathname);\n        let route = null;\n        for (let i = 0; i < this.routes.length; i++) {\n            route = _.cloneDeep(this.routes[i]);\n            const match = matchPath(pathname, { path: route.path, exact: route.exact });\n            if (!match) {\n                continue;\n            }\n\n            match.query = qs.parse(this.history.location.search);\n\n            this.route = route;\n            this.match = match;\n\n            const params = { route, output: null, match };\n            await this.middleware(params);\n\n            return params.output;\n        }\n\n        return route;\n    }\n}\n\nexport default Router;\n"]}