{"version":3,"sources":["../../src/components/LazyLoad.cmp.js"],"names":["React","LazyLoad","props","mounted","state","loaded","modules","options","onLoad","load","then","setState","render","call","children","e","console","error","Component","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;IAAYA,K;;AAEZ;;;;;;IAeMC,Q;;;AAIF,sBAAYC,KAAZ,EAA0B;AAAA;;AAAA,sIAChBA,KADgB;;AAGtB,cAAKC,OAAL,GAAe,KAAf;;AAEA,cAAKC,KAAL,GAAa;AACTC,oBAAQ,KADC;AAETC,qBAAS;AAFA,SAAb;AALsB;AASzB;;;;6CAEoB;AAAA;;AACjB,iBAAKH,OAAL,GAAe,IAAf;AADiB,yBAEoB,KAAKD,KAFzB;AAAA,gBAETI,OAFS,UAETA,OAFS;AAAA,gBAEAC,OAFA,UAEAA,OAFA;AAAA,gBAESC,MAFT,UAESA,MAFT;;AAGjB,mBAAIF,OAAJ,CAAYG,IAAZ,CAAiBH,OAAjB,EAA0BC,OAA1B,EAAmCG,IAAnC,CAAwC,mBAAW;AAC/C;AACA,oBAAI,OAAKP,OAAT,EAAkB;AACd,2BAAKQ,QAAL,CAAc,EAAEN,QAAQ,IAAV,EAAgBC,gBAAhB,EAAd;AACAE,2BAAOF,OAAP;AACH;AACJ,aAND;AAOH;;;+CAEsB;AACnB,iBAAKH,OAAL,GAAe,KAAf;AACH;;;iCAEQ;AACL,gBAAI,KAAKD,KAAL,CAAWU,MAAf,EAAuB;AACnB,uBAAO,KAAKV,KAAL,CAAWU,MAAX,CAAkBC,IAAlB,CAAuB,IAAvB,CAAP;AACH;;AAED,gBAAI,KAAKT,KAAL,CAAWC,MAAf,EAAuB;AACnB,oBAAI;AACA,2BAAO,KAAKH,KAAL,CAAWY,QAAX,CAAoB,KAAKV,KAAL,CAAWE,OAA/B,CAAP;AACH,iBAFD,CAEE,OAAOS,CAAP,EAAU;AACRC,4BAAQC,KAAR,CAAcF,CAAd;AACH;AACJ;AACD,mBAAO,IAAP;AACH;;;EA5CkBf,MAAMkB,S;;AA+C7BjB,SAASkB,YAAT,GAAwB;AACpBb,aAAS,EADW;AAEpBC,aAAS,EAFW;AAGpBC;AAHoB,CAAxB;;kBAMeP,Q","file":"LazyLoad.cmp.js","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport _ from \"lodash\";\nimport { app } from \"./../\";\n\ntype Props = {\n    modules: Array<mixed>,\n    options: Object,\n    onLoad: Function,\n    children: Function,\n    render?: Function\n};\n\ntype State = {\n    loaded: boolean,\n    modules: Array<mixed> | null\n};\n\nclass LazyLoad extends React.Component<Props, State> {\n    static defaultProps: Object;\n    mounted: boolean;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.mounted = false;\n\n        this.state = {\n            loaded: false,\n            modules: null\n        };\n    }\n\n    componentWillMount() {\n        this.mounted = true;\n        const { modules, options, onLoad } = this.props;\n        app.modules.load(modules, options).then(modules => {\n            // Finish loading and render content\n            if (this.mounted) {\n                this.setState({ loaded: true, modules });\n                onLoad(modules);\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    render() {\n        if (this.props.render) {\n            return this.props.render.call(this);\n        }\n\n        if (this.state.loaded) {\n            try {\n                return this.props.children(this.state.modules);\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        return null;\n    }\n}\n\nLazyLoad.defaultProps = {\n    modules: [],\n    options: {},\n    onLoad: _.noop\n};\n\nexport default LazyLoad;\n"]}