{"version":3,"sources":["../../src/utils/Uploader.js"],"names":["Uploader","api","pending","inProgress","request","cancelRequest","file","progress","done","error","id","push","process","cancel","splice","length","shift","image","uploadDone","jobId","response","code","data","method","url","onUploadProgress","percentage","Math","round","pe","loaded","total","event","cancelToken","CancelToken","then","catch","isCancel","err"],"mappings":"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","file":"Uploader.js","sourcesContent":["import _ from \"lodash\";\nimport axios from \"axios\";\n\nclass Uploader {\n    constructor(api) {\n        this.api = api;\n        this.pending = [];\n        this.inProgress = null;\n        this.request = null;\n        this.cancelRequest = null;\n    }\n\n    getQueue() {\n        return this.pending;\n    }\n\n    upload(file, progress = _.noop, done = _.noop, error = _.noop) {\n        if (!progress) {\n            progress = _.noop;\n        }\n        const id = _.uniqueId(\"file-upload-\");\n        this.pending.push({ id, file, progress, done, error });\n        this.process();\n        return id;\n    }\n\n    abort(id) {\n        if (this.inProgress && this.inProgress.id === id) {\n            this.request.cancel();\n        }\n        this.pending.splice(_.findIndex(this.pending, { id }), 1);\n    }\n\n    isInProgress(id) {\n        return this.inProgress && this.inProgress.id === id;\n    }\n\n    process() {\n        if (this.inProgress || !this.pending.length) {\n            return;\n        }\n\n        this.inProgress = this.pending.shift();\n\n        const image = this.inProgress.file;\n        const done = this.inProgress.done;\n        const error = this.inProgress.error || _.noop;\n\n        const uploadDone = response => {\n            const jobId = this.inProgress.id;\n            this.inProgress = null;\n            if (!response.code) {\n                done({ file: response.data.data, response });\n            } else {\n                error({ response: response.data, image, jobId });\n            }\n            this.process();\n        };\n\n        const method = image.id ? \"patch\" : \"post\";\n        const url = image.id || \"/\";\n\n        this.request = this.api[method](url, {\n            data: image,\n            onUploadProgress: pe => {\n                const percentage = Math.round(pe.loaded / pe.total * 100);\n                this.inProgress.progress({ event: pe, percentage });\n            },\n            cancelToken: new axios.CancelToken(cancel => {\n                this.cancelRequest = cancel;\n            })\n        })\n            .then(uploadDone)\n            .catch(err => {\n                return axios.isCancel(err) ? null : err.response.data;\n            });\n    }\n}\n\nexport default Uploader;\n"]}