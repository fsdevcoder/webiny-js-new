{"version":3,"sources":["../../src/app/ModuleLoader.js"],"names":["ModuleLoader","registeredModules","contextModules","configurations","requiredModules","options","toLoad","modules","map","name","key","value","keys","Object","imports","module","callable","factory","Promise","resolve","then","m","hasOwnProperty","default","catch","err","console","log","error","all","loadedModules","i","values","source","configure","obj","configured","chain","config","push","returnModules","tag","tags","includes","load","context","Array","isArray","current","configs"],"mappings":"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","file":"ModuleLoader.js","sourcesContent":["import _ from 'lodash';\n\nclass ModuleLoader {\n    constructor() {\n        this.registeredModules = {};\n        this.contextModules = {};\n        this.configurations = {};\n    }\n\n    load(requiredModules, options = {}) {\n        const toLoad = requiredModules;\n        let modules = {};\n        if (_.isArray(toLoad)) {\n            toLoad.map((name, key) => {\n                // String value is most probably a Webiny/Core component name\n                if (_.isString(name)) {\n                    modules[name] = name;\n                    return;\n                }\n\n                // Function value is most probably a vendor that does not export anything (attaches to jQuery or window directly)\n                if (_.isFunction(name)) {\n                    modules[key] = name;\n                    return;\n                }\n\n                // Object value is a custom map of modules (Webiny/Core components or import statements) to a desired prop name\n                if (_.isPlainObject(name)) {\n                    _.each(name, (value, key) => {\n                        modules[key] = value;\n                    })\n                }\n            });\n        } else if (_.isString(toLoad)) {\n            modules[toLoad] = toLoad;\n        } else {\n            modules = toLoad;\n        }\n\n        const keys = Object.keys(modules);\n\n        const imports = keys.map(key => {\n            let module = modules[key];\n            if (_.isString(module)) {\n                module = this.registeredModules[module];\n            }\n            \n            const callable = _.isPlainObject(module) ? module.factory : _.isFunction(module) ? module : _.noop;\n\n            return Promise.resolve(callable(options)).then(m => {\n                return m && m.hasOwnProperty('default') ? m.default : m;\n            }).catch((err) => {\n                console.log('[Failed to import]', key, module);\n                console.error(err);\n            });\n        });\n\n        return Promise.all(imports).then(values => {\n            // Map loaded modules to requested modules object\n            const loadedModules = {};\n            keys.map((key, i) => {\n                // Only assign modules that export something (often vendor libraries like owlCarousel, select2, etc. do not export anything)\n                if (!_.isNil(values[i])) {\n                    // Assign loaded module and the original source path which will be used for optional configuration of component\n                    // Source path is the name that was used to register a module via `Webiny.registerModule()` call\n                    loadedModules[key] = { module: values[i], source: modules[key] };\n                }\n            });\n            return loadedModules;\n        }).then(loadedModules => {\n            // Configure modules\n            const configure = [];\n            _.each(loadedModules, (obj, name) => {\n                // Only configure modules that are requested as string\n                if (this.registeredModules[obj.source] && _.has(this.configurations, obj.source) && !this.configurations[obj.source].configured) {\n                    // build promise chain to configure each component\n                    let chain = Promise.resolve();\n                    _.get(this.configurations[obj.source], 'configs', []).map(config => {\n                        // We support async configuration functions to allow 3rd party apps to lazy load their configuration code\n                        // when the component is actually used\n                        chain = chain.then(() => config(obj.module));\n                    });\n                    configure.push(chain.then(() => this.configurations[obj.source].configured = true));\n                }\n            });\n\n            return Promise.all(configure).then(() => {\n                const returnModules = {};\n                _.each(loadedModules, (obj, name) => {\n                    returnModules[name] = obj.module;\n                });\n\n                return _.isString(toLoad) ? returnModules[toLoad] : returnModules;\n            });\n        });\n    }\n\n    loadByTag(tag) {\n        const modules = [];\n        _.each(this.registeredModules, (module, name) => {\n            if (_.isArray(module.tags) && module.tags.includes(tag)) {\n                modules.push(name);\n            }\n        });\n        return this.load(modules);\n    }\n\n    getContextModule(context) {\n        return this.contextModules[context];\n    }\n\n    register(modules) {\n        modules = Array.isArray(modules) ? modules : [modules];\n        modules.map(module => {\n            this.registeredModules[module.name] = module;\n            if (module.context) {\n                this.contextModules[module.context] = module;\n            }\n        });\n    }\n\n    configure(name, config) {\n        const current = _.get(this.configurations, name, { configured: false, configs: [] });\n        current.configs.push(config);\n        this.configurations[name] = current;\n    }\n}\n\n\nexport default ModuleLoader;"]}