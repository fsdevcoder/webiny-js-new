{"version":3,"sources":["../../src/app/index.js"],"names":["debug","App","configurators","modules","services","router","initialized","configLoader","Promise","resolve","defaults","validateStatus","status","timeout","configurator","push","config","app"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,QAAQ,qBAAa,YAAb,CAAd;;IAKMC,G;AASF,mBAAc;AAAA;;AACV,aAAKC,aAAL,GAAqB,EAArB;AACA,aAAKC,OAAL,GAAe,4BAAf;AACA,aAAKC,QAAL,GAAgB,0CAAhB;AACA,aAAKC,MAAL,GAAc,sBAAd;AACA,aAAKC,WAAL,GAAmB,KAAnB;AACA,aAAKC,YAAL,GAAoB;AAAA,mBAAMC,QAAQC,OAAR,CAAgB,EAAhB,CAAN;AAAA,SAApB;;AAEA,wBAAMC,QAAN,CAAeC,cAAf,GAAgC,kBAAU;AACtC,mBAAOC,UAAU,GAAV,IAAiBA,SAAS,GAAjC;AACH,SAFD;;AAIA,wBAAMF,QAAN,CAAeG,OAAf,GAAyB,IAAzB;AACH;;;;4BAEGC,Y,EAA4B;AAC5B,iBAAKZ,aAAL,CAAmBa,IAAnB,CAAwBD,YAAxB;AACH;;;kCAESP,Y,EAA4B;AAClC,iBAAKA,YAAL,GAAoBA,YAApB;AACH;;;;;;;;;AAGGP,sCAAM,eAAN;;uCACoB,KAAKO,YAAL,E;;;AAApB,qCAAKS,M;;uCACC,6BAAQ,KAAKd,aAAb,EAA4B,EAAEe,KAAK,IAAP,EAA5B,C;;;AACN,qCAAKX,WAAL,GAAmB,IAAnB;AACAN,sCAAM,gBAAN;;;;;;;;;;;;;;;;;;;;kBAIOC,G","file":"index.js","sourcesContent":["// @flow\nimport axios from \"axios\";\nimport compose from \"webiny-compose\";\nimport debugFactory from \"debug\";\nimport { ServiceManager } from \"webiny-service-manager\";\n\nimport ModuleLoader from \"./ModuleLoader\";\nimport Router from \"./../router/Router\";\n\nconst debug = debugFactory(\"webiny-app\");\n\ndeclare type Configurator = (app: App) => Promise<void>;\ndeclare type ConfigLoader = () => Promise<Object>;\n\nclass App {\n    config: Object;\n    configurators: Array<Configurator>;\n    configLoader: ConfigLoader;\n    modules: ModuleLoader;\n    services: ServiceManager;\n    router: Router;\n    initialized: boolean;\n\n    constructor() {\n        this.configurators = [];\n        this.modules = new ModuleLoader();\n        this.services = new ServiceManager();\n        this.router = new Router();\n        this.initialized = false;\n        this.configLoader = () => Promise.resolve({});\n\n        axios.defaults.validateStatus = status => {\n            return status >= 200 && status < 500;\n        };\n\n        axios.defaults.timeout = 6000;\n    }\n\n    use(configurator: Configurator) {\n        this.configurators.push(configurator);\n    }\n\n    configure(configLoader: ConfigLoader) {\n        this.configLoader = configLoader;\n    }\n\n    async setup() {\n        debug(\"Started setup\");\n        this.config = await this.configLoader();\n        await compose(this.configurators)({ app: this });\n        this.initialized = true;\n        debug(\"Finished setup\");\n    }\n}\n\nexport default App;\n"]}