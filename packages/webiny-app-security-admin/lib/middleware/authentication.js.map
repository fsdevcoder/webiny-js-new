{"version":3,"sources":["../../src/middleware/authentication.js"],"names":["options","params","next","finish","services","get","authenticate","route","identity","onNotAuthenticated"],"mappings":";;;;;;;;;;;;;;AACA;;;;AAEA;;;;;kBAKe,UAACA,OAAD,EAA+C;AAC1D;;;;;;;;;;;AAWA;AAAA,4FAAO,iBAAOC,MAAP,EAAuBC,IAAvB,EAAuCC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAE+B,eAAIC,QAAJ,CAAaC,GAAb,CAAiB,gBAAjB,EAAmCC,YAAnC,EAF/B;;AAAA;AAECL,mCAAOM,KAAP,CAAaC,QAFd;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,kCAIK,OAAOR,QAAQS,kBAAf,KAAsC,UAJ3C;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAKkBT,QAAQS,kBAAR,CAA2BR,MAA3B,EAAmCC,IAAnC,EAAyCC,MAAzC,CALlB;;AAAA;AAAA;;AAAA;AAQHD;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA;AAUH,C","file":"authentication.js","sourcesContent":["// @flow\nimport { app } from \"webiny-app\";\n\n/**\n * Authentication middleware factory.\n * @param options\n * @returns {Function} Request middleware function.\n */\nexport default (options: { onNotAuthenticated: Function }) => {\n    /**\n     * Authentication middleware.\n     * Attempts to authenticate the user using `authentication` service.\n     * If successful, `identity` instance is set on the `route` object.\n     * If not successful, `onNotAuthenticated` callback is called to decide what to do.\n     *\n     * @param params\n     * @param next\n     * @param finish\n     * @return {Promise<void>}\n     */\n    return async (params: Object, next: Function, finish: Function) => {\n        try {\n            params.route.identity = await app.services.get(\"authentication\").authenticate();\n        } catch (e) {\n            if (typeof options.onNotAuthenticated === \"function\") {\n                return await options.onNotAuthenticated(params, next, finish);\n            }\n        }\n        next();\n    };\n};\n"]}