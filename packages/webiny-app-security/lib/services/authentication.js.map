{"version":3,"sources":["../../src/services/authentication.js"],"names":["debug","getToken","get","config","cookie","Authentication","defaultConfig","header","url","fields","me","create","method","params","_fields","onLogout","callbacks","onIdentity","identity","defaults","headers","call","strategy","payload","identityConfig","identities","strategyConfig","authenticate","post","apiMethod","response","data","message","code","Promise","reject","token","resolve","expires","Date","expiresOn","set","path","request","id","email","map","cb","remove","callback","length","push","splice"],"mappings":"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","file":"authentication.js","sourcesContent":["// @flow\nimport cookies from \"js-cookie\";\nimport _ from \"lodash\";\nimport axios from \"axios\";\nimport debugFactory from \"debug\";\nimport invariant from \"invariant\";\nimport type { AuthenticationServiceConfig } from \"../../types\";\nimport AuthenticationError from \"./AuthenticationError\";\n\nconst debug = debugFactory(\"webiny-app-security\");\n\nfunction getToken() {\n    return cookies.get(this.config.cookie);\n}\n\nclass Authentication {\n    identity: null | Object;\n    callbacks: { [event: string]: Array<Function> };\n    config: AuthenticationServiceConfig;\n\n    constructor(config: Object) {\n        const defaultConfig = {\n            header: \"Authorization\",\n            cookie: \"webiny-token\",\n            url: \"/security/auth/me\",\n            fields:\n                \"id,email,firstName,lastName,roles.slug,roleGroups[id,name,roles.slug],gravatar\",\n            me: () => {\n                return axios.create({\n                    method: \"get\",\n                    url: this.config.url,\n                    params: { _fields: this.config.fields }\n                });\n            },\n            onLogout: () => {\n                // Override to do something\n            }\n        };\n        this.config = { ...defaultConfig, ...config };\n        this.callbacks = {\n            onIdentity: [\n                identity => {\n                    if (identity) {\n                        axios.defaults.headers[this.config.header] = getToken.call(this);\n                    } else {\n                        delete axios.defaults.headers[this.config.header];\n                    }\n                }\n            ]\n        };\n    }\n\n    async login(identity: string, strategy: string, payload: Object): Promise<{}> {\n        try {\n            const identityConfig = _.find(this.config.identities, { identity });\n            invariant(\n                identityConfig,\n                `Identity \"${identity}\" not found in authentication service!`\n            );\n\n            const strategyConfig = _.find(identityConfig.authenticate, { strategy });\n            invariant(\n                strategyConfig,\n                `Strategy \"${strategy}\" not found in authentication service!`\n            );\n\n            // Attempt to login\n            const response = await axios.post(strategyConfig.apiMethod, payload);\n            const { message, code, data } = response.data;\n            if (code) {\n                return Promise.reject(new AuthenticationError(message, code, { response }));\n            }\n\n            // If token is not found in the response - resolve using the loaded data\n            // without triggering authentication (this is possible in cases like 2FactorAuth, etc.)\n            if (!data.token) {\n                return Promise.resolve(data);\n            }\n\n            // Set token cookie\n            const expires = new Date(data.expiresOn * 1000);\n            cookies.set(this.config.cookie, data.token, { path: \"/\", expires });\n\n            await this.authenticate();\n\n            return Promise.resolve({ token: data.token, identity: this.identity });\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Authenticate user (if possible).\n     * @returns {Promise<Object>} Identity data.\n     */\n    async authenticate(): Promise<?Object> {\n        if (this.identity) {\n            return Promise.resolve(this.identity);\n        }\n\n        const token = getToken.call(this);\n        if (!token) {\n            return Promise.reject(\n                new AuthenticationError(\"Identity token is not set!\", \"TOKEN_NOT_SET\")\n            );\n        }\n\n        const { data: { code, message, data } } = await this.config.me().request({\n            headers: { [this.config.header]: token }\n        });\n\n        if (code) {\n            return Promise.reject(new AuthenticationError(message, code, data));\n        }\n\n        this.identity = data;\n        const { id, email } = this.identity;\n        debug(`Loaded user %o with id %o`, email, id);\n        this.callbacks.onIdentity.map(cb => cb(this.identity));\n\n        return Promise.resolve(this.identity);\n    }\n\n    /**\n     * Refresh user data by fetching fresh data via API.\n     *\n     * @returns {Promise<Object>}\n     */\n    refresh(): Promise<?Object> {\n        this.identity = null;\n        return this.authenticate();\n    }\n\n    async logout(): Promise<void> {\n        this.identity = null;\n        cookies.remove(this.config.cookie, { path: \"/\" });\n        this.callbacks.onIdentity.map(cb => cb(null));\n        await this.config.onLogout();\n        return Promise.resolve();\n    }\n\n    /**\n     * Add callback for when `identity` data is changed.\n     * @param callback\n     * @returns {Function} A function to remove the callback.\n     */\n    onIdentity(callback: Function): Function {\n        const length = this.callbacks.onIdentity.push(callback);\n        return () => this.callbacks.onIdentity.splice(length - 1, 1);\n    }\n}\n\nexport default Authentication;\n"]}