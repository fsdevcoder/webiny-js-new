{"version":3,"sources":["../../src/etc/requestUtils.js"],"names":["req","utils","getQuery","name","fallback","query","getFilters","queryFilters","filters","map","key","startsWith","getFields","fields","getSorters","sort","dir","split","sorter","slice","getSearch","operator","getPage","page","parseInt","_page","getPerPage","perPage","_perPage","isNaN","getBody","body"],"mappings":";;;;;;;;;;AAEA;;;;;;AAEA;;;;;;;kBAOgBA,GAAD,IAAkD;AAC7D,UAAMC,QAAQ;AACV;;;;;;;AAOAC,iBAASC,IAAT,EAAwBC,WAAkB,IAA1C,EAAuD;AACnD,gBAAID,IAAJ,EAAU;AACN,uBAAOH,IAAIK,KAAJ,CAAUF,IAAV,KAAmBC,QAA1B;AACH;;AAED,wCAAaJ,IAAIK,KAAjB;;AAEA,mBAAOL,IAAIK,KAAX;AACH,SAhBS;;AAkBV;;;;;AAKAC,qBAAa;AACT,kBAAMC,eAAe,EAArB;AACA,kBAAMC,UAAmBP,MAAMC,QAAN,EAAzB;;AAEA,gCAAYM,OAAZ,EAAqBC,GAArB,CAAyBC,OAAO;AAC5B,oBAAIA,IAAIC,UAAJ,CAAe,GAAf,CAAJ,EAAyB;AACrB;AACH;;AAEDJ,6BAAaG,GAAb,IAAoBF,QAAQE,GAAR,CAApB;AACH,aAND;;AAQA,mBAAOH,YAAP;AACH,SApCS;;AAsCV;;;;;;AAMAK,kBAAUR,WAAmB,EAA7B,EAAyC;AACrC,gBAAIS,SAASZ,MAAMC,QAAN,CAAe,SAAf,CAAb;;AAEA,mBAAO,OAAOW,MAAP,KAAkB,QAAlB,GAA6BT,QAA7B,GAAwCS,MAA/C;AACH,SAhDS;;AAkDV;;;;;;;;;;AAUAC,mBAAWV,WAA8B,EAAzC,EAAgE;AAC5D,kBAAMW,OAAOd,MAAMC,QAAN,CAAe,OAAf,CAAb;AACA,gBAAI,OAAOa,IAAP,KAAgB,QAApB,EAA8B;AAC1B,uBAAOX,QAAP;AACH;;AAED,kBAAMY,MAAM,EAAE,KAAK,CAAC,CAAR,EAAW,KAAK,CAAhB,EAAZ;;AAEA,mBAAOD,KAAKE,KAAL,CAAW,GAAX,EAAgBR,GAAhB,CAAoBS,UAAU;AACjC,oBAAIA,OAAOP,UAAP,CAAkB,GAAlB,KAA0BO,OAAOP,UAAP,CAAkB,GAAlB,CAA9B,EAAsD;AAClD,2BAAO,CAACO,OAAOC,KAAP,CAAa,CAAb,CAAD,EAAkBH,IAAIE,OAAO,CAAP,CAAJ,CAAlB,CAAP;AACH;;AAED,uBAAO,CAACA,MAAD,EAAS,CAAT,CAAP;AACH,aANM,CAAP;AAOH,SA3ES;;AA6EV;;;;;;AAMAE,oBAAqB;AACjB,kBAAMf,QAAQJ,MAAMC,QAAN,CAAe,cAAf,CAAd;AACA,kBAAMW,SAAWZ,MAAMC,QAAN,CAAe,eAAf,CAAjB;AACA,gBAAI,CAACW,MAAD,IAAW,CAACR,KAAhB,EAAuB;AACnB,uBAAO,IAAP;AACH;;AAED,kBAAMgB,WAAWpB,MAAMC,QAAN,CAAe,iBAAf,CAAjB;AACA,mBAAO;AACHG,qBADG;AAEHgB,wBAFG;AAGHR,wBAAQA,OAAOI,KAAP,CAAa,GAAb;AAHL,aAAP;AAKH,SAhGS;;AAkGV;;;;;;AAMAK,gBAAQlB,WAAmB,CAA3B,EAA8B;AAC1B,kBAAMmB,OAAOC,SAASxB,IAAIK,KAAJ,CAAUoB,KAAnB,CAAb;AACA,mBAAO,CAACF,IAAD,IAASA,OAAO,CAAhB,GAAoBnB,QAApB,GAA+BmB,IAAtC;AACH,SA3GS;;AA6GV;;;;;;AAMAG,mBAAWtB,WAAmB,EAA9B,EAAkC;AAC9B,kBAAMuB,UAAUH,SAASxB,IAAIK,KAAJ,CAAUuB,QAAnB,CAAhB;AACA,mBAAOC,MAAMF,OAAN,KAAkBA,UAAU,CAA5B,GAAgCvB,QAAhC,GAA2CuB,OAAlD;AACH,SAtHS;;AAwHV;;;;AAIAG,kBAAU;AACN,mBAAO9B,IAAI+B,IAAJ,IAAY,EAAnB;AACH;AA9HS,KAAd;;AAiIA,WAAO9B,KAAP;AACH,C","file":"requestUtils.js","sourcesContent":["// @flow\nimport type { OrderTuple } from \"webiny-entity/types\";\nimport parseBoolean from \"./parseBoolean\";\n\n/**\n * Create utility getters for the specified request object.\n * These helpers are mostly used in CRUD API methods when working with Entities.\n *\n * @param {express$Request} req Request object.\n * @returns {[string]: Function}\n */\nexport default (req: express$Request): { [string]: Function } => {\n    const utils = {\n        /**\n         * Get query parameters.\n         *\n         * @param {string|null} name Parameter name to return.\n         * @param {mixed} fallback Fallback value if parameter was not found by name.\n         * @returns {mixed} Returns an object with all query parameters or a single value if name was specified.\n         */\n        getQuery(name: ?string, fallback: mixed = null): mixed {\n            if (name) {\n                return req.query[name] || fallback;\n            }\n\n            parseBoolean(req.query);\n\n            return req.query;\n        },\n\n        /**\n         * Get filters.\n         * Filters are all parameters that do not begin with \"_\" (an underscore is a prefix for platform specific parameters).\n         * @returns {{}}\n         */\n        getFilters() {\n            const queryFilters = {};\n            const filters: Object = (utils.getQuery(): any);\n\n            Object.keys(filters).map(key => {\n                if (key.startsWith(\"_\")) {\n                    return;\n                }\n\n                queryFilters[key] = filters[key];\n            });\n\n            return queryFilters;\n        },\n\n        /**\n         * Get fields.\n         * Fields are fetched from \"_fields\" query parameter.\n         * @param {string} fallback Fallback value if \"_fields\" parameter is not set.\n         * @returns {string}\n         */\n        getFields(fallback: string = \"\"): string {\n            let fields = utils.getQuery(\"_fields\");\n\n            return typeof fields !== \"string\" ? fallback : fields;\n        },\n\n        /**\n         * Get sorters.\n         * Sorters are fetched from \"_sort\" query parameter.\n         * The parameter value is structured as a comma-separated string with +/- prefixes: \"-email,+createdOn\".\n         * The string is parsed into an array of tuples: [[\"name\", -1], [\"createdOn\", 1]]\n         * \"-\" means DESCENDING.\n         * \"+\" means ASCENDING.\n         * @param fallback\n         * @returns {Array<OrderTuple>} An array of tuples.\n         */\n        getSorters(fallback: Array<OrderTuple> = []): Array<OrderTuple> {\n            const sort = utils.getQuery(\"_sort\");\n            if (typeof sort !== \"string\") {\n                return fallback;\n            }\n\n            const dir = { \"-\": -1, \"+\": 1 };\n\n            return sort.split(\",\").map(sorter => {\n                if (sorter.startsWith(\"-\") || sorter.startsWith(\"+\")) {\n                    return [sorter.slice(1), dir[sorter[0]]];\n                }\n\n                return [sorter, 1];\n            });\n        },\n\n        /**\n         * Get search.\n         * Search values are fetched from \"_searchQuery\", \"_searchOperator\" and \"_searchFields\" query parameters.\n         * Fields are defined through a string that contains a comma-separated list of fields.\n         * @returns Object Parsed search arguments.\n         */\n        getSearch(): ?Object {\n            const query = utils.getQuery(\"_searchQuery\");\n            const fields = ((utils.getQuery(\"_searchFields\"): any): string);\n            if (!fields || !query) {\n                return null;\n            }\n\n            const operator = utils.getQuery(\"_searchOperator\");\n            return {\n                query,\n                operator,\n                fields: fields.split(\",\")\n            };\n        },\n\n        /**\n         * Get page.\n         * Page is fetched from \"_page\" query parameter.\n         * @param {number} fallback Page number to return if it is not found in query parameters.\n         * @returns {number}\n         */\n        getPage(fallback: number = 1) {\n            const page = parseInt(req.query._page);\n            return !page || page < 1 ? fallback : page;\n        },\n\n        /**\n         * Get perPage.\n         * perPage is fetched from \"_perPage\" query parameter.\n         * @param {number} fallback\n         * @returns {number}\n         */\n        getPerPage(fallback: number = 10) {\n            const perPage = parseInt(req.query._perPage);\n            return isNaN(perPage) || perPage < 1 ? fallback : perPage;\n        },\n\n        /**\n         * Get request body.\n         * @returns {{}}\n         */\n        getBody() {\n            return req.body || {};\n        }\n    };\n\n    return utils;\n};\n"]}