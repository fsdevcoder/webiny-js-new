{"version":3,"sources":["../../src/attributes/fileAttribute.js"],"names":["FileAttribute","constructor","name","attributesContainer","entity","auto","delete","enabled","options","permanent","setTags","tags","setStorage","storage","setFolder","folder","storageFolder","getValue","value","prototype","call","getEntityClass","setStorageFolder","setValue","Array","isArray","get","uniqWith","concat","isEqual"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AAIA,MAAMA,aAAN,uCAA4C;;AAKxCC,gBAAYC,IAAZ,EAA0BC,mBAA1B,EAA0EC,MAA1E,EAA+F;AAC3F,cAAMF,IAAN,EAAYC,mBAAZ,EAAiCC,MAAjC;AACA,aAAKC,IAAL,CAAUC,MAAV,GAAmB;AACfC,qBAAS,IADM;AAEfC,qBAAS,EAAEC,WAAW,IAAb;AAFM,SAAnB;AAIH;;AAED;;;;;;;AAOAC,YAAQC,OAAsB,EAA9B,EAAiD;AAC7C,aAAKA,IAAL,GAAYA,IAAZ;;AAEA,eAAO,IAAP;AACH;;AAED;;;;;;;AAOAC,eAAWC,OAAX,EAA4C;AACxC,aAAKA,OAAL,GAAeA,OAAf;;AAEA,eAAO,IAAP;AACH;;AAED;;;;;;;AAOAC,cAAUC,MAAV,EAAyC;AACrC,aAAKC,aAAL,GAAqBD,MAArB;;AAEA,eAAO,IAAP;AACH;;AAEKE,YAAN,GAAiB;AAAA;;AAAA;AACb,gBAAIC,QAAQ,MAAM,8BAAgBC,SAAhB,CAA0BF,QAA1B,CAAmCG,IAAnC,OAAlB;AACA,gBAAIF,iBAAiB,MAAKG,cAAL,EAArB,EAA4C;AACxC,oBAAI,MAAKR,OAAT,EAAkB;AACdK,0BAAMN,UAAN,CAAiB,MAAKC,OAAtB,EAA+BS,gBAA/B,CAAgD,MAAKN,aAArD;AACH;AACJ;;AAED,mBAAOE,KAAP;AARa;AAShB;;AAED;AACAK,aAASL,KAAT,EAAgB;AACZ,YAAIM,MAAMC,OAAN,CAAc,iBAAEC,GAAF,CAAMR,KAAN,EAAa,MAAb,CAAd,CAAJ,EAAyC;AACrCA,kBAAMP,IAAN,GAAa,iBAAEgB,QAAF,CAAW,KAAKhB,IAAL,CAAUiB,MAAV,CAAiBV,MAAMP,IAAN,IAAc,EAA/B,CAAX,EAA+C,iBAAEkB,OAAjD,CAAb;AACH;;AAED,cAAMN,QAAN,CAAeL,KAAf;AACH;AAtEuC;;kBAyE7BlB,a","file":"fileAttribute.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport { EntityAttribute, type EntityAttributesContainer } from \"webiny-entity\";\nimport type { Storage } from \"webiny-file-storage\";\nimport type { File } from \"./../index\";\n\nclass FileAttribute extends EntityAttribute {\n    storage: Storage;\n    storageFolder: string;\n    tags: Array<string>;\n\n    constructor(name: string, attributesContainer: EntityAttributesContainer, entity: Class<File>) {\n        super(name, attributesContainer, entity);\n        this.auto.delete = {\n            enabled: true,\n            options: { permanent: true }\n        };\n    }\n\n    /**\n     * Set tags that will always be assigned to the file\n     *\n     * @param tags\n     *\n     * @return this\n     */\n    setTags(tags: Array<string> = []): FileAttribute {\n        this.tags = tags;\n\n        return this;\n    }\n\n    /**\n     * Set storage to use with this attribute\n     *\n     * @param {Storage} storage\n     *\n     * @return this\n     */\n    setStorage(storage: Storage): FileAttribute {\n        this.storage = storage;\n\n        return this;\n    }\n\n    /**\n     * Set folder in which the file will be stored (relative to the root of your storage)\n     *\n     * @param {string} folder\n     *\n     * @return this\n     */\n    setFolder(folder: string): FileAttribute {\n        this.storageFolder = folder;\n\n        return this;\n    }\n\n    async getValue() {\n        let value = await EntityAttribute.prototype.getValue.call(this);\n        if (value instanceof this.getEntityClass()) {\n            if (this.storage) {\n                value.setStorage(this.storage).setStorageFolder(this.storageFolder);\n            }\n        }\n\n        return value;\n    }\n\n    // $FlowIgnore\n    setValue(value) {\n        if (Array.isArray(_.get(value, \"tags\"))) {\n            value.tags = _.uniqWith(this.tags.concat(value.tags || []), _.isEqual);\n        }\n\n        super.setValue(value);\n    }\n}\n\nexport default FileAttribute;\n"]}