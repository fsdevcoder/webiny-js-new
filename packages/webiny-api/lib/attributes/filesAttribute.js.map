{"version":3,"sources":["../../src/attributes/filesAttribute.js"],"names":["FilesAttribute","constructor","name","attributesContainer","entity","classId","getParentModel","getParentEntity","id","getAttribute","getStorageValue","setTags","tags","setStorage","storage","setFolder","folder","storageFolder","getValue","values","prototype","call","map","value","getEntitiesClass","setStorageFolder","setValue","uniqWith","concat","isEqual"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AAQA,MAAMA,cAAN,yCAA+C;;AAK3CC,gBAAYC,IAAZ,EAA0BC,mBAA1B,EAA0EC,MAA1E,EAA+F;AAC3F,cAAMF,IAAN,EAAYC,mBAAZ,EAAiCC,MAAjC,EAAyC,KAAzC,EAAgD,MAAM;AAClD;AACA,kBAAMC,UAAU,KAAKC,cAAL,GAAsBC,eAAtB,GAAwCF,OAAxD;AACA;AACA,kBAAMG,KAAK,KAAKF,cAAL,GACNG,YADM,CACO,IADP,EAENC,eAFM,EAAX;AAGA,mBAAOL,UAAU,GAAV,GAAgBG,EAAvB;AACH,SARD;AASH;;AAED;;;;;;;AAOAG,YAAQC,OAAsB,EAA9B,EAAkD;AAC9C,aAAKA,IAAL,GAAYA,IAAZ;;AAEA,eAAO,IAAP;AACH;;AAED;;;;;;;AAOAC,eAAWC,OAAX,EAA6C;AACzC,aAAKA,OAAL,GAAeA,OAAf;;AAEA,eAAO,IAAP;AACH;;AAED;;;;;;;AAOAC,cAAUC,MAAV,EAA0C;AACtC,aAAKC,aAAL,GAAqBD,MAArB;;AAEA,eAAO,IAAP;AACH;;AAEKE,YAAN,GAAiB;AAAA;;AAAA;AACb,gBAAIC,SAAS,MAAM,gCAAkBC,SAAlB,CAA4BF,QAA5B,CAAqCG,IAArC,OAAnB;AACAF,mBAAOG,GAAP,CAAW,iBAAS;AAChB,oBAAIC,iBAAiB,MAAKC,gBAAL,EAArB,EAA8C;AAC1C,wBAAI,MAAKV,OAAT,EAAkB;AACdS,8BAAMV,UAAN,CAAiB,MAAKC,OAAtB,EAA+BW,gBAA/B,CAAgD,MAAKR,aAArD;AACH;AACJ;AACJ,aAND;;AAQA,mBAAOE,MAAP;AAVa;AAWhB;;AAED;AACMO,YAAN,CAAeH,KAAf,EAAmE;AAAA;;AAAA;AAC/D,kBAAM,gCAAkBH,SAAlB,CAA4BM,QAA5B,CAAqCL,IAArC,SAAgDE,KAAhD,CAAN;AACA,kBAAMJ,SAAS,MAAM,OAAKD,QAAL,EAArB;;AAEAC,mBAAOG,GAAP,CAAW,iBAAS;AAChB,oBAAIC,iBAAiB,OAAKC,gBAAL,EAArB,EAA8C;AAC1CD,0BAAMX,IAAN,GAAa,iBAAEe,QAAF,CAAW,OAAKf,IAAL,CAAUgB,MAAV,CAAiBL,MAAMX,IAAN,IAAc,EAA/B,CAAX,EAA+C,iBAAEiB,OAAjD,CAAb;AACA,wBAAI,OAAKf,OAAT,EAAkB;AACdS,8BAAMV,UAAN,CAAiB,OAAKC,OAAtB,EAA+BW,gBAA/B,CAAgD,OAAKR,aAArD;AACH;AACJ;AACJ,aAPD;;AASA;AAb+D;AAclE;AApF0C;;kBAuFhCjB,c","file":"filesAttribute.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport {\n    EntitiesAttribute,\n    type EntityAttributesContainer,\n    type EntityCollection\n} from \"webiny-entity\";\nimport type { Storage } from \"webiny-file-storage\";\nimport type { File } from \"./../index\";\n\nclass FilesAttribute extends EntitiesAttribute {\n    storage: Storage;\n    storageFolder: string;\n    tags: Array<string>;\n\n    constructor(name: string, attributesContainer: EntityAttributesContainer, entity: Class<File>) {\n        super(name, attributesContainer, entity, \"ref\", () => {\n            // $FlowIgnore\n            const classId = this.getParentModel().getParentEntity().classId;\n            // $FlowIgnore\n            const id = this.getParentModel()\n                .getAttribute(\"id\")\n                .getStorageValue();\n            return classId + \":\" + id;\n        });\n    }\n\n    /**\n     * Set tags that will always be assigned to the file\n     *\n     * @param tags\n     *\n     * @return this\n     */\n    setTags(tags: Array<string> = []): FilesAttribute {\n        this.tags = tags;\n\n        return this;\n    }\n\n    /**\n     * Set storage to use with this attribute\n     *\n     * @param {Storage} storage\n     *\n     * @return this\n     */\n    setStorage(storage: Storage): FilesAttribute {\n        this.storage = storage;\n\n        return this;\n    }\n\n    /**\n     * Set folder in which the file will be stored (relative to the root of your storage)\n     *\n     * @param {string} folder\n     *\n     * @return this\n     */\n    setFolder(folder: string): FilesAttribute {\n        this.storageFolder = folder;\n\n        return this;\n    }\n\n    async getValue() {\n        let values = await EntitiesAttribute.prototype.getValue.call(this);\n        values.map(value => {\n            if (value instanceof this.getEntitiesClass()) {\n                if (this.storage) {\n                    value.setStorage(this.storage).setStorageFolder(this.storageFolder);\n                }\n            }\n        });\n\n        return values;\n    }\n\n    // $FlowIgnore\n    async setValue(value: Array<{}> | EntityCollection): Promise<void> {\n        await EntitiesAttribute.prototype.setValue.call(this, value);\n        const values = await this.getValue();\n\n        values.map(value => {\n            if (value instanceof this.getEntitiesClass()) {\n                value.tags = _.uniqWith(this.tags.concat(value.tags || []), _.isEqual);\n                if (this.storage) {\n                    value.setStorage(this.storage).setStorageFolder(this.storageFolder);\n                }\n            }\n        });\n\n        return this;\n    }\n}\n\nexport default FilesAttribute;\n"]}