{"version":3,"sources":["../../src/middleware/endpoint.js"],"names":["options","beforeApiMethodMiddleware","get","afterApiMethodMiddleware","params","next","req","res","versioning","log","method","path","reqVersion","versionPrefix","reqUrl","replace","split","shift","urls","endpoints","i","length","baseUrl","definition","startsWith","url","classId","maxVersion","latest","maxSatisfying","versions","satisfies","instance","matchedMethod","getApi","matchMethod","getApiMethod","getName","getPattern","matchedApiMethod","e","response","message","type","methodParams","getParams","exec"],"mappings":";;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;kBAOe,CAACA,UAAqC,EAAtC,KAA6C;AACxD;AACA,UAAMC,4BAA4B,6BAAQ,iBAAEC,GAAF,CAAMF,OAAN,EAAe,iBAAf,EAAkC,EAAlC,CAAR,CAAlC;AACA,UAAMG,2BAA2B,6BAAQ,iBAAED,GAAF,CAAMF,OAAN,EAAe,gBAAf,EAAiC,EAAjC,CAAR,CAAjC;;AAEA;AAAA,mDAAO,WACHI,MADG,EAOHC,IAPG,EAQF;AACD,kBAAM,EAAEC,GAAF,EAAOC,GAAP,EAAYC,UAAZ,KAA2BJ,MAAjC;AACA,kBAAMK,MAAM,qBAAM,cAAN,CAAZ;AACAA,gBAAK,iCAAL,EAAuCH,IAAII,MAAJ,GAAa,GAAb,GAAmBJ,IAAIK,IAA9D;AACA,kBAAMC,aAAaJ,WAAWF,GAAX,CAAnB;;AAEA,kBAAMO,gBAAgBD,eAAe,QAAf,GAA0B,OAAOA,UAAjC,GAA8C,EAApE;AACA,kBAAME,SAASR,IAAIK,IAAJ,CACVI,OADU,CACFF,aADE,EACa,EADb,EAEVG,KAFU,CAEJ,GAFI,EAGVC,KAHU,EAAf;;AAKA,kBAAMC,OAAO,oBAAY,WAAIC,SAAhB,CAAb;;AAEA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,KAAKG,MAAzB,EAAiCD,GAAjC,EAAsC;AAClC,sBAAME,UAAUJ,KAAKE,CAAL,CAAhB;AACA,sBAAMG,aAAa,WAAIJ,SAAJ,CAAcG,OAAd,CAAnB;;AAEA,oBAAI,CAACR,OAAOU,UAAP,CAAkBF,OAAlB,CAAL,EAAiC;AAC7B;AACH;;AAED,sBAAMG,MAAMX,OAAOC,OAAP,CAAeO,OAAf,EAAwB,EAAxB,KAA+B,GAA3C;AACAb,oBAAK,mCAAL,EAAyCc,WAAWG,OAApD,EAA6DD,GAA7D;;AAEA,oBAAIE,aAAaJ,WAAWK,MAA5B;AACA,oBAAIhB,eAAe,QAAnB,EAA6B;AACzBe,iCAAa,iBAAOE,aAAP,CAAqB,oBAAYN,WAAWO,QAAvB,CAArB,EAAuDlB,UAAvD,CAAb;AACH;;AAED,oBAAIA,eAAe,QAAf,IAA2B,CAAC,iBAAOmB,SAAP,CAAiBJ,UAAjB,EAA6Bf,UAA7B,CAAhC,EAA0E;AACtEH,wBAAK,+CAAL;AACA;AACH;;AAED,sBAAMuB,WAAW,IAAIT,WAAWO,QAAX,CAAoBH,UAApB,CAAJ,EAAjB;AACA,sBAAMM,gBAAgBD,SAASE,MAAT,GAAkBC,WAAlB,CAA8B7B,IAAII,MAAlC,EAA0Ce,GAA1C,CAAtB;AACA,oBAAI,CAACQ,aAAL,EAAoB;AAChB;AACH;;AAEDxB,oBACI,4BADJ,EAEIwB,cAAcG,YAAd,GAA6BC,OAA7B,EAFJ,EAGIJ,cAAcG,YAAd,GAA6BE,UAA7B,EAHJ;;AAMA,oBAAI;AACA,0BAAMrC,0BAA0B,EAAEK,GAAF,EAAOC,GAAP,EAAYgC,kBAAkBN,aAA9B,EAA1B,CAAN;AACH,iBAFD,CAEE,OAAOO,CAAP,EAAU;AACRpC,2BAAOqC,QAAP,GAAkB,4BACd,EADc,EAEdD,EAAEE,OAFY,EAGdF,EAAEG,IAAF,IAAU,oBAHI,EAId,GAJc,CAAlB;AAMA;AACH;;AAED,sBAAMC,eAAeX,cAAcY,SAAd,EAArB;AACA,sBAAMJ,WAAW,MAAMR,cAClBG,YADkB,GAElBU,IAFkB,CAEbxC,GAFa,EAERC,GAFQ,EAEHqC,YAFG,EAEWZ,QAFX,CAAvB;;AAIA,oBAAI;AACA,0BAAM7B,yBAAyB,EAAEoC,kBAAkBN,aAApB,EAAmCQ,QAAnC,EAAzB,CAAN;AACH,iBAFD,CAEE,OAAOD,CAAP,EAAU;AACRpC,2BAAOqC,QAAP,GAAkB,4BACd,EADc,EAEdD,EAAEE,OAFY,EAGdF,EAAEG,IAAF,IAAU,oBAHI,EAId,GAJc,CAAlB;AAMA;AACH;;AAED;AACAvC,uBAAOqC,QAAP,GAAkBA,QAAlB;AACAhC,oBAAK,gCAAL;AACH;AACDJ;AACH,SAzFD;;AAAA;AAAA;AAAA;AAAA;AA0FH,C","file":"endpoint.js","sourcesContent":["// @flow\nimport debug from \"debug\";\nimport _ from \"lodash\";\nimport compose from \"webiny-compose\";\nimport semver from \"semver\";\nimport { app, ApiErrorResponse } from \"./../index\";\n\ndeclare type EndpointMiddlewareOptions = {\n    beforeApiMethod?: Array<Function>,\n    afterApiMethod?: Array<Function>\n};\n\nexport default (options: EndpointMiddlewareOptions = {}) => {\n    // Endpoint hooks in form of a middleware\n    const beforeApiMethodMiddleware = compose(_.get(options, \"beforeApiMethod\", []));\n    const afterApiMethodMiddleware = compose(_.get(options, \"afterApiMethod\", []));\n\n    return async (\n        params: {\n            req: express$Request,\n            res: express$Response,\n            versioning: Function,\n            response: Object\n        },\n        next: Function\n    ) => {\n        const { req, res, versioning } = params;\n        const log = debug(\"api:endpoint\");\n        log(`Trying to match an endpoint: %o`, req.method + \" \" + req.path);\n        const reqVersion = versioning(req);\n\n        const versionPrefix = reqVersion !== \"latest\" ? \"/v\" + reqVersion : \"\";\n        const reqUrl = req.path\n            .replace(versionPrefix, \"\")\n            .split(\"?\")\n            .shift();\n\n        const urls = Object.keys(app.endpoints);\n\n        for (let i = 0; i < urls.length; i++) {\n            const baseUrl = urls[i];\n            const definition = app.endpoints[baseUrl];\n\n            if (!reqUrl.startsWith(baseUrl)) {\n                continue;\n            }\n\n            const url = reqUrl.replace(baseUrl, \"\") || \"/\";\n            log(`Routing endpoint %o, with URL: %o`, definition.classId, url);\n\n            let maxVersion = definition.latest;\n            if (reqVersion !== \"latest\") {\n                maxVersion = semver.maxSatisfying(Object.keys(definition.versions), reqVersion);\n            }\n\n            if (reqVersion !== \"latest\" && !semver.satisfies(maxVersion, reqVersion)) {\n                log(`Requested API version could not be satisfied!`);\n                break;\n            }\n\n            const instance = new definition.versions[maxVersion]();\n            const matchedMethod = instance.getApi().matchMethod(req.method, url);\n            if (!matchedMethod) {\n                break;\n            }\n\n            log(\n                \"Matched %o with pattern %o\",\n                matchedMethod.getApiMethod().getName(),\n                matchedMethod.getApiMethod().getPattern()\n            );\n\n            try {\n                await beforeApiMethodMiddleware({ req, res, matchedApiMethod: matchedMethod });\n            } catch (e) {\n                params.response = new ApiErrorResponse(\n                    {},\n                    e.message,\n                    e.type || \"WBY_MATCHED_METHOD\",\n                    401\n                );\n                break;\n            }\n\n            const methodParams = matchedMethod.getParams();\n            const response = await matchedMethod\n                .getApiMethod()\n                .exec(req, res, methodParams, instance);\n\n            try {\n                await afterApiMethodMiddleware({ matchedApiMethod: matchedMethod, response });\n            } catch (e) {\n                params.response = new ApiErrorResponse(\n                    {},\n                    e.message,\n                    e.type || \"WBY_MATCHED_METHOD\",\n                    401\n                );\n                break;\n            }\n\n            // Assign response to the params object so other middleware functions can access and modify it.\n            params.response = response;\n            log(`Successfully fetched response!`);\n        }\n        next();\n    };\n};\n"]}