{"version":3,"sources":["../src/api.js"],"names":["Api","constructor","config","apps","endpoints","requestMiddleware","resolve","services","getApps","getRequest","namespace","get","setConfig","init","prepareEndpoints","call","versioning","use","entity","driver","attributes","bufferAttribute","fileAttributes","imageAttributes","handleRequest","req","res","params","response","undefined","then","result","apiResponse","getLatestVersion","versions","sort","compare","pop","log","urlPattern","map","app","endpoint","name","prototype","url","replace","kebabCase","definition","classId","latest","version"],"mappings":"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","file":"api.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport debug from \"debug\";\nimport compose from \"webiny-compose\";\nimport semver from \"semver\";\nimport { App, ApiResponse, Endpoint, Entity } from \"./index\";\nimport { ServiceManager } from \"webiny-service-manager\";\nimport ApiErrorResponse from \"./response/apiErrorResponse\";\n\n// Attributes registration functions\nimport registerBufferAttribute from \"./attributes/registerBufferAttribute\";\nimport registerFileAttributes from \"./attributes/registerFileAttributes\";\nimport registerImageAttributes from \"./attributes/registerImageAttributes\";\n\ntype EndpointsMap = {\n    [url: string]: {\n        classId: string,\n        versions: { [version: string]: Class<Endpoint> },\n        latest: string\n    }\n};\n\nclass Api {\n    config: Object;\n    apps: Array<App>;\n    endpoints: EndpointsMap;\n    requestMiddleware: Function;\n    serviceManager: ServiceManager;\n    namespace: cls$Namespace;\n\n    constructor() {\n        this.config = {};\n        this.apps = [];\n        this.endpoints = {};\n        this.requestMiddleware = () => Promise.resolve();\n        this.services = new ServiceManager();\n    }\n\n    getApps(): Array<App> {\n        return this.apps;\n    }\n\n    getRequest(): express$Request {\n        return this.namespace.get(\"req\");\n    }\n\n    setConfig(config: Object) {\n        this.config = config;\n    }\n\n    init(namespace: cls$Namespace): void {\n        this.namespace = namespace;\n        // Prepare apps\n        this.apps = this.config.apps;\n        this.endpoints = prepareEndpoints.call(this);\n\n        if (typeof this.config.versioning !== \"function\") {\n            this.config.versioning = () => \"latest\";\n        }\n\n        this.requestMiddleware = compose(this.config.use);\n\n        // Configure Entity layer\n        if (this.config.entity) {\n            // Register Entity driver\n            Entity.driver = this.config.entity.driver;\n            // Register attributes\n            this.config.entity.attributes &&\n                this.config.entity.attributes({\n                    bufferAttribute: registerBufferAttribute,\n                    fileAttributes: registerFileAttributes,\n                    imageAttributes: registerImageAttributes\n                });\n        }\n    }\n\n    /**\n     * Handle request using middleware functions.\n     * Response can be returned in 2 ways:\n     * 1. set a `response` property of middleware `params` -> this will allow all functions to process the req/res.\n     * 2. call `finish` from your middleware function -> this will return the result immediately and abort the middleware chain.\n     * @param {express$Request} req\n     * @param {express$Response} res\n     * @returns {Promise<ApiResponse | typeof undefined>}\n     */\n    handleRequest(\n        req: express$Request,\n        res: express$Response\n    ): Promise<ApiResponse | typeof undefined> {\n        const params = { req, res, versioning: this.config.versioning, response: undefined };\n        return this.requestMiddleware(params).then(result => {\n            // If result was returned using `finish` callback return the returned result.\n            // If not - return the result stored in the params.\n            const apiResponse = typeof result !== \"undefined\" ? result : params.response;\n\n            if (typeof apiResponse !== \"undefined\" && !(apiResponse instanceof ApiResponse)) {\n                return new ApiErrorResponse(\n                    {},\n                    \"Response must be an instance of ApiResponse\",\n                    \"WBY_INVALID_RESPONSE\",\n                    500\n                );\n            }\n\n            return apiResponse;\n        });\n    }\n}\n\n/**\n * Get latest version.\n * @param {Array<string>} versions\n * @returns {string | undefined}\n */\nfunction getLatestVersion(versions: Array<string>) {\n    return versions.sort(semver.compare).pop();\n}\n\n/**\n * Traverse registered apps and construct endpoints map.\n * @returns {EndpointsMap}\n */\nfunction prepareEndpoints(): EndpointsMap {\n    const log = debug(\"api:endpoints\");\n    const endpoints = {};\n    const urlPattern = this.config.urlPattern || \"/{app}/{endpoint}\";\n\n    this.apps.map((app: App) => {\n        app.endpoints.map((endpoint: Class<Endpoint>) => {\n            const name = endpoint.prototype.constructor.name;\n            const url = urlPattern\n                .replace(\"{app}\", _.kebabCase(app.name))\n                .replace(\"{endpoint}\", _.kebabCase(name));\n\n            const definition = endpoints[url] || {\n                classId: endpoint.classId,\n                versions: {},\n                latest: \"\"\n            };\n\n            definition.versions[endpoint.version] = endpoint;\n            definition.latest = getLatestVersion(Object.keys(definition.versions));\n\n            endpoints[url] = definition;\n            log(\"Registered endpoint %o (%o)\", url, \"v\" + endpoint.version);\n        });\n    });\n\n    return endpoints;\n}\n\nexport default Api;\n"]}