{"version":3,"sources":["../../src/endpoint/apiContainer.js"],"names":["ApiContainer","constructor","context","apiMethods","api","name","httpMethod","pattern","callable","startsWith","apiInstance","has","addCallback","extend","fn","apiMethod","Error","get","post","patch","delete","removeMethod","getMethods","getMethod","matchMethod","url","toLowerCase","matched","methods","map","m","method","push","length","arr","filter","v","isEmpty","sort","methodA","methodB","a","getPattern","b","al","split","bl","position","av","match","bv","each","getRegex","test","paramValues","paramNames","matchedParams","shift","forEach","value","index"],"mappings":"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","file":"apiContainer.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport ApiMethod from \"./apiMethod\";\nimport { Endpoint } from \"./../endpoint\";\nimport MatchedApiMethod from \"./matchedApiMethod\";\n\ntype ApiMethods = {\n    [name: string]: ApiMethod\n};\n\nclass ApiContainer {\n    context: Endpoint;\n    apiMethods: ApiMethods;\n\n    constructor(context: Endpoint) {\n        this.apiMethods = {};\n        this.context = context;\n    }\n\n    api(name: string, httpMethod: string, pattern: string, callable?: Function): ?ApiMethod {\n        if (!pattern.startsWith(\"/\")) {\n            pattern = \"/\" + pattern;\n        }\n\n        let apiInstance: ApiMethod;\n        if (callable) {\n            if (_.has(this.apiMethods, name)) {\n                apiInstance = this.apiMethods[name];\n            } else {\n                apiInstance = new ApiMethod(name, httpMethod, pattern, this.context);\n            }\n\n            apiInstance.addCallback(callable);\n            this.apiMethods[name] = apiInstance;\n        } else {\n            apiInstance = this.apiMethods[name] || null;\n        }\n\n        return apiInstance;\n    }\n\n    extend(name: string, fn: Function): ApiMethod {\n        const apiMethod = this.apiMethods[name];\n        if (!apiMethod) {\n            throw new Error(`Method ${name} doesn't exist!`);\n        }\n        apiMethod.addCallback(fn);\n        return apiMethod;\n    }\n\n    get(name: string, pattern: string, fn?: Function): ?ApiMethod {\n        return this.api(name, \"get\", pattern, fn);\n    }\n\n    post(name: string, pattern: string, fn?: Function): ?ApiMethod {\n        return this.api(name, \"post\", pattern, fn);\n    }\n\n    patch(name: string, pattern: string, fn?: Function): ?ApiMethod {\n        return this.api(name, \"patch\", pattern, fn);\n    }\n\n    delete(name: string, pattern: string, fn?: Function): ?ApiMethod {\n        return this.api(name, \"delete\", pattern, fn);\n    }\n\n    removeMethod(name: string): void {\n        delete this.apiMethods[name];\n    }\n\n    getMethods(): ApiMethods {\n        return this.apiMethods;\n    }\n\n    getMethod(name: string): ?ApiMethod {\n        return this.apiMethods[name];\n    }\n\n    matchMethod(httpMethod: string, url: string): ?MatchedApiMethod {\n        httpMethod = httpMethod.toLowerCase();\n        let matched = null;\n\n        const methods: Array<ApiMethod> = [];\n        Object.values(this.apiMethods).map(m => {\n            const method = ((m: any): ApiMethod);\n            if (method.httpMethod === httpMethod) {\n                methods.push(method);\n            }\n        });\n\n        const length = arr => arr.filter(v => !_.isEmpty(v)).length;\n\n        methods.sort((methodA: any, methodB: any) => {\n            // 1 means 'a' goes after 'b'\n            // -1 means 'a' goes before 'b'\n\n            const a: string = methodA.getPattern();\n            const b: string = methodB.getPattern();\n\n            if (a.startsWith(\"/:\") && !b.startsWith(\"/:\")) {\n                return 1;\n            }\n\n            const al = length(a.split(\"/\"));\n            const bl = length(b.split(\"/\"));\n            let position = al !== bl ? (al > bl ? -1 : 1) : 0;\n\n            if (position !== 0) {\n                return position;\n            }\n\n            // Compare number of variables\n            const av = length(a.match(/:|\\*/g) || []);\n            const bv = length(b.match(/:|\\*/g) || []);\n            return av !== bv ? (av > bv ? 1 : -1) : 0;\n        });\n\n        _.each(methods, (apiMethod: ApiMethod) => {\n            if (!apiMethod.getRegex().test(url)) {\n                return;\n            }\n\n            const paramValues = {};\n            if (apiMethod.paramNames) {\n                const matchedParams = url.match(apiMethod.getRegex());\n                if (matchedParams) {\n                    matchedParams.shift();\n                    matchedParams.forEach((value, index) => {\n                        paramValues[apiMethod.paramNames[index]] = value;\n                    });\n                }\n            }\n\n            matched = new MatchedApiMethod(apiMethod, paramValues);\n            return false;\n        });\n\n        return matched;\n    }\n}\n\nexport default ApiContainer;\n"]}