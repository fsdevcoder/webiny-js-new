{"version":3,"sources":["../../src/endpoint/entityEndpoint.js"],"names":["EntityEndpoint","getEntityClass","Error","constructor","classId","init","api","EntityClass","entityClassId","createNotFoundResponse","id","createValidationErrorResponse","e","data","code","get","req","utils","params","page","getPage","perPage","getPerPage","order","getSorters","query","getFilters","search","getSearch","find","response","formatList","getFields","entity","findById","formatEntity","post","populate","body","save","patch","delete","fields","toJSON","meta","entityCollection","list","getParams","count","length","totalCount","getMeta","totalPages","Math","ceil"],"mappings":"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","file":"entityEndpoint.js","sourcesContent":["// @flow\nimport { ModelError } from \"webiny-model\";\nimport { Entity, EntityCollection } from \"webiny-entity\";\nimport Endpoint from \"./endpoint\";\nimport requestUtils from \"./../etc/requestUtils\";\nimport ApiContainer from \"./apiContainer\";\nimport ApiResponse from \"./../response/apiResponse\";\nimport ApiErrorResponse from \"../response/apiErrorResponse\";\n\nclass EntityEndpoint extends Endpoint {\n    getEntityClass(): Class<Entity> {\n        throw new Error(`\"getEntityClass\" method not implemented in ${this.constructor.classId}`);\n    }\n\n    /**\n     * Create default CRUD methods for given entity\n     * @param {ApiContainer} api\n     */\n    init(api: ApiContainer) {\n        super.init(api);\n        const classId = this.constructor.classId;\n        const EntityClass = this.getEntityClass();\n        const entityClassId = EntityClass.classId;\n\n        const createNotFoundResponse = id => {\n            return new ApiErrorResponse(\n                { id },\n                `${entityClassId} with id ${id} was not found!`,\n                \"WBY_ENTITY_NOT_FOUND\"\n            );\n        };\n\n        const createValidationErrorResponse = (e: ModelError) => {\n            return new ApiErrorResponse(e.data, `${entityClassId} validation failed!`, e.code);\n        };\n\n        // CRUD List\n        api.get(`List.${classId}`, \"/\", async ({ req }) => {\n            const utils = requestUtils(req);\n            const params = {\n                page: utils.getPage(),\n                perPage: utils.getPerPage(10),\n                order: utils.getSorters(),\n                query: utils.getFilters(),\n                search: utils.getSearch()\n            };\n            const data: EntityCollection = await this.getEntityClass().find(params);\n            const response = await this.formatList(data, requestUtils(req).getFields());\n            return new ApiResponse(response);\n        });\n\n        // CRUD Get\n        api.get(`Get.${classId}`, \"/:id\", async ({ req, id }) => {\n            const entity = await EntityClass.findById(id);\n            if (!entity) {\n                return createNotFoundResponse(id);\n            }\n            const response = await this.formatEntity(entity, requestUtils(req).getFields());\n            return new ApiResponse(response);\n        });\n\n        // CRUD Create\n        api.post(`Create.${classId}`, \"/\", async ({ req }) => {\n            const entity = new EntityClass();\n            try {\n                await entity.populate(req.body).save();\n            } catch (e) {\n                return createValidationErrorResponse(e);\n            }\n            const response = await this.formatEntity(entity, requestUtils(req).getFields());\n            return new ApiResponse(response);\n        });\n\n        // CRUD Update\n        api.patch(`Update.${classId}`, \"/:id\", async ({ req, id }) => {\n            const entity = await EntityClass.findById(id);\n            if (!entity) {\n                return createNotFoundResponse(id);\n            }\n            try {\n                await entity.populate(req.body).save();\n            } catch (e) {\n                return createValidationErrorResponse(e);\n            }\n            const response = await this.formatEntity(entity, requestUtils(req).getFields());\n            return new ApiResponse(response);\n        });\n\n        // CRUD Delete\n        api.delete(`Delete.${classId}`, \"/:id\", async ({ id }) => {\n            const entity = await EntityClass.findById(id);\n            if (!entity) {\n                return createNotFoundResponse(id);\n            }\n            await entity.delete();\n            return new ApiResponse(true);\n        });\n    }\n\n    async formatEntity(entity: Entity, fields: string): Promise<{ entity: Object, meta: Object }> {\n        const data = await entity.toJSON(fields);\n        const meta = { fields };\n        return { entity: data, meta };\n    }\n\n    async formatList(\n        entityCollection: EntityCollection,\n        fields: string\n    ): Promise<{ list: Array<Object>, meta: Object }> {\n        const list = await entityCollection.toJSON(fields);\n        const meta = entityCollection.getParams();\n        meta.count = entityCollection.length;\n        meta.totalCount = entityCollection.getMeta().totalCount;\n        meta.totalPages = Math.ceil(meta.totalCount / meta.perPage);\n        return { list, meta };\n    }\n}\n\nexport default EntityEndpoint;\n"]}