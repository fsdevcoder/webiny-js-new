{"version":3,"sources":["../../src/endpoint/apiExposition.js"],"names":[],"mappings":"AAAA;AACA","file":"apiExposition.js","sourcesContent":["// TODO: REMOVE THIS FILE\n/*\n\nimport ApiContainer from './apiContainer';\n\nexport default (Base) => {\n    const apiContainers = {};\n\n    return class extends Base {\n        constructor(...params) {\n            super(...params);\n\n            this.apiMethods = [];\n            this.discoverable = true;\n            this.classId = null;\n        }\n\n        static getClassId() {\n            return this.classId;\n        }\n\n        initializeApi(api) {\n            throw Error(\"Override to implement\");\n        }\n\n        isDiscoverable() {\n            return this.discoverable;\n        }\n\n        apiFormatList(collection, fields = '*') {\n            return collection;\n\n            // TODO\n            const perPage = collection.getLimit();\n            const offset = collection.getOffset();\n            const page = offset > 0 ? (offset / perPage) + 1 : 1;\n\n            return {\n                'meta': {\n                    'totalCount': collection.totalCount(),\n                    'totalPages': perPage > 0 ? Math.ceil(collection.totalCount() / perPage) : 1,\n                    'perPage': perPage,\n                    'currentPage': page,\n                    'fields': fields\n                },\n                'list': collection.toArray(fields)\n            }\n        }\n\n        getApi() {\n            const className = this.constructor.name;\n            let apiContainer = apiContainers[className] || null;\n            if (!apiContainer) {\n                apiContainer = new ApiContainer(this);\n                apiContainers[className] = apiContainer;\n                this.initializeApi(apiContainer);\n            }\n\n            return apiContainer;\n        }\n    }\n};*/\n"]}