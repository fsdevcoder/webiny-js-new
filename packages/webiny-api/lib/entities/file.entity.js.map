{"version":3,"sources":["../../src/entities/file.entity.js"],"names":["File","constructor","storageFolder","tags","attr","char","setValidators","integer","buffer","setToStorage","setSkipOnPopulate","dynamic","test","key","getURL","array","entity","classIdAttribute","setDefaultValue","ensureStorage","storage","getAbsolutePath","populate","data","isExisting","deleteFileFromStorage","save","params","createKey","name","startsWith","join","setFile","body","size","length","ext","mime","type","getAttribute","reset","prototype","call","delete","permanent","setStorage","setStorageFolder","folder","getFile","base","parse","slug","toString","toLowerCase","replace","Error","classId","tableName"],"mappings":"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","file":"file.entity.js","sourcesContent":["// @flow\nimport path from \"path\";\nimport fileType from \"file-type\";\nimport { Storage } from \"webiny-file-storage\";\nimport type { EntitySaveParams, EntityDeleteParams } from \"webiny-entity/types\";\nimport mdbid from \"mdbid\";\nimport type { IFileData } from \"webiny-file-storage/types\";\nimport Entity from \"./entity\";\n\nclass File extends Entity {\n    storage: Storage;\n    storageFolder: string;\n    tags: Array<string>;\n\n    constructor() {\n        super();\n\n        this.storageFolder = \"/\";\n        this.tags = [];\n\n        this.attr(\"name\")\n            .char()\n            .setValidators(\"required\");\n        this.attr(\"title\").char();\n        this.attr(\"size\").integer();\n        this.attr(\"type\").char();\n        this.attr(\"ext\").char();\n        this.attr(\"data\")\n            .buffer(\"base64\")\n            .setToStorage(false);\n        this.attr(\"key\")\n            .char()\n            .setSkipOnPopulate();\n        this.attr(\"src\").dynamic(() => {\n            return /^(https?:)?\\/\\//.test(this.key) ? this.key : this.getURL();\n        });\n        this.attr(\"tags\").array();\n\n        // `ref` can be linked with any Entity class so we have to provide a `classIdAttribute` to store related Entity classId\n        this.attr(\"ref\").entity([], { classIdAttribute: \"refClassId\" });\n        this.attr(\"refClassId\").char();\n\n        this.attr(\"order\")\n            .integer()\n            .setDefaultValue(0);\n    }\n\n    getURL() {\n        this.ensureStorage();\n        return this.storage.getURL(this.key);\n    }\n\n    getAbsolutePath() {\n        this.ensureStorage();\n        return this.storage.getAbsolutePath(this.key);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    populate(data: Object) {\n        if (this.isExisting()) {\n            data[\"data\"] ? this.deleteFileFromStorage() : delete data[\"name\"];\n        }\n\n        return super.populate(data);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line\n    async save(params: EntitySaveParams & Object = {}) {\n        // If new file contents is being saved...\n        if (this.data) {\n            this.ensureStorage();\n\n            let key = this.key || File.createKey(this.name);\n            if (this.storageFolder !== \"\" && !key.startsWith(this.storageFolder + \"/\")) {\n                key = path.join(this.storageFolder, key);\n            }\n\n            this.key = await this.storage.setFile(key, { body: this.data });\n            this.size = this.data.length;\n            const { ext, mime } = fileType(this.data);\n            this.ext = ext;\n            this.type = mime;\n        }\n\n        this.getAttribute(\"data\").reset();\n        return Entity.prototype.save.call(this, params);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    async delete(params: EntityDeleteParams & Object = { permanent: true }): Promise<void> {\n        await Entity.prototype.delete.call(this, params);\n        await this.deleteFileFromStorage();\n    }\n\n    /**\n     * Set File storage\n     *\n     * @param {Storage} storage\n     *\n     * @return this\n     */\n    setStorage(storage: Storage) {\n        this.storage = storage;\n\n        return this;\n    }\n\n    /**\n     * Set storage folder\n     *\n     * @param {string} folder\n     *\n     * @return this\n     */\n    setStorageFolder(folder: string) {\n        if (folder) {\n            this.storageFolder = folder;\n        }\n\n        return this;\n    }\n\n    /**\n     * Get file from storage\n     *\n     * @returns {Promise<IFileData>}\n     */\n    getFile(): Promise<IFileData> {\n        this.ensureStorage();\n        return this.storage.getFile(this.key);\n    }\n\n    /**\n     * Create file storage key\n     *\n     * @param {string} name\n     *\n     * @return string\n     */\n    static createKey(name: string) {\n        const { name: base, ext } = path.parse(name);\n\n        const slug = base\n            .toString()\n            .toLowerCase()\n            .replace(/\\s+/g, \"-\") // Replace spaces with -\n            .replace(/[^\\w-]+/g, \"\") // Remove all non-word chars\n            .replace(/--+/g, \"-\") // Replace multiple - with single -\n            .replace(/^-+/, \"\") // Trim - from start of text\n            .replace(/-+$/, \"\"); // Trim - from end of text\n\n        return mdbid() + \"-\" + slug + ext;\n    }\n\n    /**\n     * Delete current file from storage\n     */\n    deleteFileFromStorage() {\n        this.ensureStorage();\n        return this.storage.delete(this.key);\n    }\n\n    ensureStorage() {\n        if (!(this.storage instanceof Storage)) {\n            throw new Error(\"No storage configured for File entity!\");\n        }\n    }\n}\n\nFile.classId = \"File\";\nFile.tableName = \"Files\";\n\nexport default File;\n"]}