{"version":3,"sources":["../src/column.js"],"names":["Column","constructor","name","columnsContainer","columnArguments","arguments","getName","getType","getArguments","getParentColumnsContainer","getParentTable","getObjectValue","type"],"mappings":";;;;;;AAEA;;;;;;AAEA,MAAMA,MAAN,CAAa;AAKTC,gBACIC,IADJ,EAEIC,gBAFJ,EAGIC,kBAA0C,EAH9C,EAIE;AACE;;;AAGA,aAAKF,IAAL,GAAYA,IAAZ;;AAEA;;;AAGA,aAAKC,gBAAL,GAAwBA,gBAAxB;;AAEA;;;;AAIA,aAAKE,SAAL,GAAiBD,eAAjB;AACH;;AAED;;;AAGAE,cAAkB;AACd,eAAO,KAAKJ,IAAZ;AACH;;AAED;;;;AAIAK,cAAkB;AACd,eAAO,EAAP;AACH;;AAEDC,mBAAuC;AACnC,eAAO,KAAKH,SAAZ;AACH;;AAED;;;AAGAI,gCAA8C;AAC1C,eAAO,KAAKN,gBAAZ;AACH;;AAED;;;AAGAO,qBAAwB;AACpB,eAAO,KAAKD,yBAAL,GAAiCC,cAAjC,EAAP;AACH;;AAEDC,qBAAqB;AACjB,eAAO;AACHT,kBAAM,KAAKI,OAAL,EADH;AAEHM,kBAAM,KAAKL,OAAL,EAFH;AAGHF,uBAAW,KAAKG,YAAL;AAHR,SAAP;AAKH;AAlEQ;;kBAqEER,M","file":"column.js","sourcesContent":["// @flow\nimport type Table from \"./table\";\nimport ColumnsContainer from \"./columnsContainer\";\n\nclass Column {\n    name: string;\n    type: string;\n    columnsContainer: ColumnsContainer;\n    arguments: Array<string | number>;\n    constructor(\n        name: string,\n        columnsContainer: ColumnsContainer,\n        columnArguments: Array<string | number> = []\n    ) {\n        /**\n         * Column name.\n         */\n        this.name = name;\n\n        /**\n         * Column's parent table instance.\n         */\n        this.columnsContainer = columnsContainer;\n\n        /**\n         * Arguments that will set when generating SQL in parentheses, eg. \"bigint(20)\".\n         * @type {Array}\n         */\n        this.arguments = columnArguments;\n    }\n\n    /**\n     * Returns name of column\n     */\n    getName(): string {\n        return this.name;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    getType(): string {\n        return \"\";\n    }\n\n    getArguments(): Array<string | number> {\n        return this.arguments;\n    }\n\n    /**\n     * Returns parent table columns container\n     */\n    getParentColumnsContainer(): ColumnsContainer {\n        return this.columnsContainer;\n    }\n\n    /**\n     * Returns table\n     */\n    getParentTable(): Table {\n        return this.getParentColumnsContainer().getParentTable();\n    }\n\n    getObjectValue(): {} {\n        return {\n            name: this.getName(),\n            type: this.getType(),\n            arguments: this.getArguments()\n        };\n    }\n}\n\nexport default Column;\n"]}