{"version":3,"sources":["../src/index.js"],"names":["Index","constructor","name","indexesContainer","columns","join","length","Error","getName","getType","getParentIndexesContainer","getParentTable","getColumns","getObjectValue","type"],"mappings":";;;;;;AAEA;;;;;;AAEA,MAAMA,KAAN,CAAY;;AAMRC,gBAAYC,IAAZ,EAA2BC,gBAA3B,EAA+DC,UAAyB,EAAxF,EAA4F;AACxF;;;;AAIA,aAAKF,IAAL,GAAYA,QAAQE,QAAQC,IAAR,CAAa,GAAb,CAApB;;AAEA;;;AAGA,aAAKF,gBAAL,GAAwBA,gBAAxB;;AAEA;;;;AAIA,aAAKC,OAAL,GAAeA,OAAf;AACA,YAAI,CAAC,KAAKA,OAAL,CAAaE,MAAlB,EAA0B;AACtB,kBAAMC,MAAO,kCAAiC,KAAKL,IAAK,IAAlD,CAAN;AACH;AACJ;;AAED;;;AAGAM,cAAmB;AACf,eAAO,KAAKN,IAAZ;AACH;;AAEDO,cAAkB;AACd,eAAO,EAAP;AACH;;AAED;;;AAGAC,gCAA8C;AAC1C,eAAO,KAAKP,gBAAZ;AACH;;AAED;;;AAGAQ,qBAAwB;AACpB,eAAO,KAAKD,yBAAL,GAAiCC,cAAjC,EAAP;AACH;;AAEDC,iBAA4B;AACxB,eAAO,KAAKR,OAAZ;AACH;;AAEDS,qBAAqB;AACjB,eAAO;AACHX,kBAAM,KAAKM,OAAL,EADH;AAEHM,kBAAM,KAAKL,OAAL,EAFH;AAGHL,qBAAS,KAAKQ,UAAL;AAHN,SAAP;AAKH;AA/DO;;kBAkEGZ,K","file":"index.js","sourcesContent":["// @flow\nimport type Table from \"./table\";\nimport IndexesContainer from \"./indexesContainer\";\n\nclass Index {\n    name: ?string;\n    type: string;\n    columns: Array<string>;\n    indexesContainer: IndexesContainer;\n\n    constructor(name: ?string, indexesContainer: IndexesContainer, columns: Array<string> = []) {\n        /**\n         * If name is missing, let's automatically generate one - based on passed columns.\n         * @type {string}\n         */\n        this.name = name || columns.join(\"_\");\n\n        /**\n         * Index's parent table instance.\n         */\n        this.indexesContainer = indexesContainer;\n\n        /**\n         * The maximum number of digits.\n         * @type {number}\n         */\n        this.columns = columns;\n        if (!this.columns.length) {\n            throw Error(`Columns not defined for index \"${this.name}\".`);\n        }\n    }\n\n    /**\n     * Returns name of index\n     */\n    getName(): ?string {\n        return this.name;\n    }\n\n    getType(): string {\n        return \"\";\n    }\n\n    /**\n     * Returns parent table indexes container\n     */\n    getParentIndexesContainer(): IndexesContainer {\n        return this.indexesContainer;\n    }\n\n    /**\n     * Returns table\n     */\n    getParentTable(): Table {\n        return this.getParentIndexesContainer().getParentTable();\n    }\n\n    getColumns(): Array<string> {\n        return this.columns;\n    }\n\n    getObjectValue(): {} {\n        return {\n            name: this.getName(),\n            type: this.getType(),\n            columns: this.getColumns()\n        };\n    }\n}\n\nexport default Index;\n"]}