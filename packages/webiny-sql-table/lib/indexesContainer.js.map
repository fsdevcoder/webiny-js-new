{"version":3,"sources":["../src/indexesContainer.js"],"names":["IndexesContainer","constructor","table","indexes","parentTable","newIndexName","index","getIndexes","getIndex","name","find","getParentTable"],"mappings":";;;;;;AAGA;;;;;;AAEA,MAAMA,gBAAN,CAAuB;;AAKnBC,gBAAYC,KAAZ,EAA0B;AACtB;;;;AAIA,aAAKC,OAAL,GAAe,EAAf;;AAEA;;;AAGA,aAAKC,WAAL,GAAmBF,KAAnB;;AAEA;;;AAGA,aAAKG,YAAL,GAAoB,EAApB;AACH;;AAEDC,UAAMD,YAAN,EAA+C;AAC3C,aAAKA,YAAL,GAAoBA,YAApB;AACA,eAAO,IAAP;AACH;;AAEDE,iBAA2B;AACvB,eAAO,KAAKJ,OAAZ;AACH;;AAEDK,aAASC,IAAT,EAA+B;AAC3B,eAAO,iBAAEC,IAAF,CAAO,KAAKP,OAAZ,EAAqB,EAAEM,IAAF,EAArB,CAAP;AACH;;AAEDE,qBAAwB;AACpB,eAAO,KAAKP,WAAZ;AACH;AAtCkB;kBAyCRJ,gB","file":"indexesContainer.js","sourcesContent":["// @flow\nimport type Table from \"./table\";\nimport type Index from \"./index\";\nimport _ from \"lodash\";\n\nclass IndexesContainer {\n    parentTable: Table;\n    newIndexName: ?string;\n    indexes: Array<Index>;\n\n    constructor(table: Table) {\n        /**\n         * Contains all registered indexes.\n         * @type {Array}\n         */\n        this.indexes = [];\n\n        /**\n         * Parent parentTable - instance of Table class.\n         */\n        this.parentTable = table;\n\n        /**\n         * Temporary stored name that will be assigned to newly created index.\n         */\n        this.newIndexName = \"\";\n    }\n\n    index(newIndexName: ?string): IndexesContainer {\n        this.newIndexName = newIndexName;\n        return this;\n    }\n\n    getIndexes(): Array<Index> {\n        return this.indexes;\n    }\n\n    getIndex(name: string): ?Index {\n        return _.find(this.indexes, { name });\n    }\n\n    getParentTable(): Table {\n        return this.parentTable;\n    }\n}\n\nexport default IndexesContainer;\n"]}