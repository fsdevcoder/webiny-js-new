{"version":3,"sources":["../src/columnsContainer.js"],"names":["ColumnsContainer","constructor","table","columns","parentTable","newColumnName","column","getColumns","getColumn","name","find","getParentTable"],"mappings":";;;;;;AAGA;;;;;;AAEA,MAAMA,gBAAN,CAAuB;;AAKnBC,gBAAYC,KAAZ,EAA0B;AACtB;;;;AAIA,aAAKC,OAAL,GAAe,EAAf;;AAEA;;;AAGA,aAAKC,WAAL,GAAmBF,KAAnB;;AAEA;;;AAGA,aAAKG,aAAL,GAAqB,EAArB;AACH;;AAEDC,WAAOD,aAAP,EAAiD;AAC7C,aAAKA,aAAL,GAAqBA,aAArB;AACA,eAAO,IAAP;AACH;;AAEDE,iBAA4B;AACxB,eAAO,KAAKJ,OAAZ;AACH;;AAEDK,cAAUC,IAAV,EAAiC;AAC7B,eAAO,iBAAEC,IAAF,CAAO,KAAKP,OAAZ,EAAqB,EAAEM,IAAF,EAArB,CAAP;AACH;;AAEDE,qBAAwB;AACpB,eAAO,KAAKP,WAAZ;AACH;AAtCkB;kBAyCRJ,gB","file":"columnsContainer.js","sourcesContent":["// @flow\nimport type Table from \"./table\";\nimport type Column from \"./column\";\nimport _ from \"lodash\";\n\nclass ColumnsContainer {\n    parentTable: Table;\n    newColumnName: ?string;\n    columns: Array<Column>;\n\n    constructor(table: Table) {\n        /**\n         * Contains all registered columns.\n         * @type {Array}\n         */\n        this.columns = [];\n\n        /**\n         * Parent parentTable - instance of Table class.\n         */\n        this.parentTable = table;\n\n        /**\n         * Temporary stored name that will be assigned to newly created column.\n         */\n        this.newColumnName = \"\";\n    }\n\n    column(newColumnName: ?string): ColumnsContainer {\n        this.newColumnName = newColumnName;\n        return this;\n    }\n\n    getColumns(): Array<Column> {\n        return this.columns;\n    }\n\n    getColumn(name: string): ?Column {\n        return _.find(this.columns, { name });\n    }\n\n    getParentTable(): Table {\n        return this.parentTable;\n    }\n}\n\nexport default ColumnsContainer;\n"]}