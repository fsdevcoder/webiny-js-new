{"version":3,"sources":["../src/table.js"],"names":["Table","constructor","columnsContainer","createColumnsContainer","indexesContainer","createIndexesContainer","column","name","getColumnsContainer","index","getIndexesContainer","setClass","getDriver","getColumnsClass","getIndexesClass","getColumn","getColumns","getIndex","getIndexes","toObject","json","autoIncrement","getAutoIncrement","getName","comment","getComment","engine","getEngine","collate","getCollate","defaultCharset","getDefaultCharset","columns","indexes","forEach","push","getObjectValue","setDriver","driver","setEngine","value","setDefaultCharset","setCollate","setName","tableName","setComment","setAutoIncrement","create","options","sql","returnSQL","execute","alter","drop","truncate","sync"],"mappings":"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","file":"table.js","sourcesContent":["// @flow\nimport ColumnsContainer from \"./columnsContainer\";\nimport IndexesContainer from \"./indexesContainer\";\nimport Column from \"./column\";\nimport Index from \"./index\";\nimport Driver from \"./driver\";\nimport type { CommandOptions } from \"../types\";\n\nclass Table {\n    static engine: ?string;\n    static tableName: ?string;\n    static defaultCharset: ?string;\n    static collate: ?string;\n    static comment: ?string;\n    static autoIncrement: ?number;\n    static driver: Driver;\n    columnsContainer: ColumnsContainer;\n    indexesContainer: IndexesContainer;\n\n    constructor() {\n        this.columnsContainer = this.createColumnsContainer();\n        this.indexesContainer = this.createIndexesContainer();\n    }\n\n    column(name: string): ColumnsContainer {\n        return this.getColumnsContainer().column(name);\n    }\n\n    index(name: string): IndexesContainer {\n        return this.getIndexesContainer().index(name);\n    }\n\n    createColumnsContainer(): ColumnsContainer {\n        const setClass = this.getDriver().getColumnsClass();\n        return new setClass(this);\n    }\n\n    createIndexesContainer(): IndexesContainer {\n        const setClass = this.getDriver().getIndexesClass();\n        return new setClass(this);\n    }\n\n    getColumnsContainer(): ColumnsContainer {\n        return this.columnsContainer;\n    }\n\n    getIndexesContainer(): IndexesContainer {\n        return this.indexesContainer;\n    }\n\n    getColumn(name: string): ?Column {\n        return this.getColumnsContainer().getColumn(name);\n    }\n\n    getColumns(): Array<Column> {\n        return this.getColumnsContainer().getColumns();\n    }\n\n    getIndex(name: string): ?Index {\n        return this.getIndexesContainer().getIndex(name);\n    }\n\n    getIndexes(): Array<Index> {\n        return this.getIndexesContainer().getIndexes();\n    }\n\n    toObject(): {} {\n        const json = {\n            autoIncrement: this.constructor.getAutoIncrement(),\n            name: this.constructor.getName(),\n            comment: this.constructor.getComment(),\n            engine: this.constructor.getEngine(),\n            collate: this.constructor.getCollate(),\n            defaultCharset: this.constructor.getDefaultCharset(),\n            columns: [],\n            indexes: []\n        };\n\n        this.getColumns().forEach(column => {\n            json.columns.push(column.getObjectValue());\n        });\n\n        this.getIndexes().forEach(index => {\n            json.indexes.push(index.getObjectValue());\n        });\n\n        return json;\n    }\n\n    /**\n     * Sets table driver.\n     * @param driver\n     * @returns {Table}\n     */\n    static setDriver(driver: Driver): Class<Table> {\n        this.driver = driver;\n        return this;\n    }\n\n    /**\n     * Returns set driver.\n     * @returns {Driver}\n     */\n    static getDriver(): Driver {\n        return this.driver;\n    }\n\n    /**\n     * Returns set driver.\n     * @returns {Driver}\n     */\n    getDriver(): Driver {\n        return this.constructor.driver;\n    }\n\n    static setEngine(value: string): Class<Table> {\n        this.engine = value;\n        return this;\n    }\n\n    static getEngine(): ?string {\n        return this.engine;\n    }\n\n    getEngine(): ?string {\n        return this.constructor.engine;\n    }\n\n    static setDefaultCharset(defaultCharset: string): Class<Table> {\n        this.defaultCharset = defaultCharset;\n        return this;\n    }\n\n    static getDefaultCharset(): ?string {\n        return this.defaultCharset;\n    }\n\n    getDefaultCharset(): ?string {\n        return this.constructor.defaultCharset;\n    }\n\n    static setCollate(collate: string): Class<Table> {\n        this.collate = collate;\n        return this;\n    }\n\n    static getCollate(): ?string {\n        return this.collate;\n    }\n\n    getCollate(): ?string {\n        return this.constructor.collate;\n    }\n\n    static setName(name: string): Class<Table> {\n        this.tableName = name;\n        return this;\n    }\n\n    static getName(): ?string {\n        return this.tableName;\n    }\n\n    getName(): ?string {\n        return this.constructor.getName();\n    }\n\n    static setComment(comment: string): Class<Table> {\n        this.comment = comment;\n        return this;\n    }\n\n    static getComment(): ?string {\n        return this.comment;\n    }\n\n    getComment(): ?string {\n        return this.constructor.getComment();\n    }\n\n    static setAutoIncrement(autoIncrement: number) {\n        this.autoIncrement = autoIncrement;\n        return this;\n    }\n\n    static getAutoIncrement(): ?number {\n        return this.autoIncrement;\n    }\n\n    getAutoIncrement(): ?number {\n        return this.constructor.getAutoIncrement();\n    }\n\n    async create(options: CommandOptions = {}): Promise<mixed> {\n        const sql = await this.getDriver().create(this, options);\n        if (options.returnSQL) {\n            return sql;\n        }\n\n        return this.getDriver().execute(sql);\n    }\n\n    async alter(options: CommandOptions = {}): Promise<mixed> {\n        const sql = await this.getDriver().alter(this, options);\n        if (options.returnSQL) {\n            return sql;\n        }\n\n        return this.getDriver().execute(sql);\n    }\n\n    async drop(options: CommandOptions = {}): Promise<mixed> {\n        const sql = await this.getDriver().drop(this, options);\n        if (options.returnSQL) {\n            return sql;\n        }\n\n        return this.getDriver().execute(sql);\n    }\n\n    async truncate(options: CommandOptions = {}): Promise<mixed> {\n        const sql = await this.getDriver().truncate(this, options);\n        if (options.returnSQL) {\n            return sql;\n        }\n\n        return this.getDriver().execute(sql);\n    }\n\n    async sync(options: CommandOptions = {}): Promise<mixed> {\n        const sql = await this.getDriver().sync(this, options);\n        if (options.returnSQL) {\n            return sql;\n        }\n\n        return this.getDriver().execute(sql);\n    }\n}\n\nTable.engine = null;\nTable.tableName = null;\nTable.defaultCharset = null;\nTable.collate = null;\nTable.comment = null;\nTable.autoIncrement = null;\nTable.driver = new Driver();\n\nexport default Table;\n"]}