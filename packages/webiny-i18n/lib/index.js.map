{"version":3,"sources":["../src/index.js"],"names":["I18N","constructor","locale","defaultFormats","getDefaultFormats","translations","modifiers","registerModifiers","translate","base","namespace","Error","get","translation","getTranslation","hasVariables","includes","values","__replaceVariables","date","value","outputFormat","inputFormat","getDateFormat","Date","parse","format","time","getTimeFormat","dateTime","getDateTimeFormat","price","getPriceFormat","assign","replace","formatMoney","symbol","precision","thousand","decimal","number","getNumberFormat","formatNumber","key","getTranslations","hasTranslation","setTranslation","setTranslations","clearTranslations","mergeTranslations","getLocale","setLocale","registerModifier","modifier","name","forEach","unregisterModifier","datetime","text","parts","split","reduce","carry","part","__processTextPart","startsWith","trim","variable","has","output","isPlainObject","isFunction","parameters","shift","execute"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport hash from \"short-hash\";\nimport fecha from \"fecha\";\nimport accounting from \"accounting\";\n\nimport type { Modifier } from \"./../types\";\n\nimport modifiers from \"./modifiers\";\n\n/**\n * Main class used for all I18n needs.\n */\nclass I18N {\n    locale: ?string;\n    defaultFormats: Object;\n    translations: Object;\n    modifiers: Object;\n\n    constructor() {\n        this.locale = null;\n\n        /**\n         * If we fail to fetch formats for currently selected locale, these default formats will be used.\n         * @type {{date: string, time: string, datetime: string, number: string}}\n         */\n        this.defaultFormats = this.getDefaultFormats();\n\n        /**\n         * All currently-loaded translations, for easier (synchronous) access.\n         * @type {{}}\n         */\n        this.translations = {};\n\n        /**\n         * All registered modifiers.\n         * Default built-in modifiers are registered immediately below.\n         * @type {{}}\n         */\n        this.modifiers = {};\n        this.registerModifiers(modifiers);\n    }\n\n    translate(base: string, namespace: ?string): string | Function {\n        // Returns full translation for given base text in given namespace (optional).\n        // If translation isn't found, base text will be returned.\n        // We create a key out of given namespace and base text.\n\n        if (!namespace) {\n            throw Error(\"I18N text namespace not defined.\");\n        }\n\n        base = _.get(base, \"raw.0\", base);\n\n        let translation = this.getTranslation(namespace + \".\" + hash(base));\n\n        if (!translation) {\n            translation = base;\n        }\n\n        const hasVariables = base.includes(\"{\") && base.includes(\"}\");\n        if (!hasVariables) {\n            return translation;\n        }\n\n        return (values: Object) => {\n            return this.__replaceVariables(translation, values);\n        };\n    }\n\n    namespace(namespace: string): Function {\n        return (base: string) => {\n            return this.translate(base, namespace);\n        };\n    }\n\n    /**\n     * Formats and outputs date.\n     * It will try to load format from currently selected locale's settings. If not defined, default formats will be used.\n     * @param value\n     * @param outputFormat\n     * @param inputFormat\n     */\n    date(\n        value: Date | string | number,\n        outputFormat: ?string = null,\n        inputFormat: string = \"Y-m-dTH:i:sO\"\n    ): string {\n        if (!outputFormat) {\n            outputFormat = this.getDateFormat();\n        }\n\n        if (!(value instanceof Date)) {\n            value = fecha.parse(value, inputFormat);\n        }\n\n        return fecha.format(value, outputFormat);\n    }\n\n    /**\n     * Formats and outputs time.\n     * It will try to load format from currently selected locale's settings. If not defined, default formats will be used.\n     * @param value\n     * @param outputFormat\n     * @param inputFormat\n     */\n    time(\n        value: Date | string | number,\n        outputFormat: ?string = null,\n        inputFormat: string = \"Y-m-dTH:i:sO\"\n    ): string {\n        if (!outputFormat) {\n            outputFormat = this.getTimeFormat();\n        }\n\n        if (!(value instanceof Date)) {\n            value = fecha.parse(value, inputFormat);\n        }\n\n        return fecha.format(value, outputFormat);\n    }\n\n    /**\n     * Formats and outputs date/time.\n     * It will try to load format from currently selected locale's settings. If not defined, default formats will be used.\n     * @param value\n     * @param outputFormat\n     * @param inputFormat\n     */\n    dateTime(\n        value: Date | string | number,\n        outputFormat: ?string = null,\n        inputFormat: string = \"Y-m-dTH:i:sO\"\n    ): string {\n        if (!outputFormat) {\n            outputFormat = this.getDateTimeFormat();\n        }\n\n        if (!(value instanceof Date)) {\n            value = fecha.parse(value, inputFormat);\n        }\n\n        return fecha.format(value, outputFormat);\n    }\n\n    /**\n     * Outputs formatted number as amount of price.\n     * @param value\n     * @param outputFormat\n     */\n    price(value: string | number, outputFormat: ?Object): string {\n        if (!outputFormat) {\n            outputFormat = this.getPriceFormat();\n        } else {\n            outputFormat = _.assign({}, this.defaultFormats.price, outputFormat);\n        }\n\n        // Convert placeholders to accounting's placeholders.\n        let format = outputFormat.format;\n        format = format.replace(\"{symbol}\", \"%s\");\n        format = format.replace(\"{amount}\", \"%v\");\n\n        return accounting.formatMoney(\n            value,\n            outputFormat.symbol,\n            outputFormat.precision,\n            outputFormat.thousand,\n            outputFormat.decimal,\n            format\n        );\n    }\n\n    /**\n     * Outputs formatted number.\n     * @param value\n     * @param outputFormat\n     */\n    number(value: string | number, outputFormat: ?Object): string {\n        if (!outputFormat) {\n            outputFormat = this.getNumberFormat();\n        } else {\n            outputFormat = _.assign({}, this.defaultFormats.number, outputFormat);\n        }\n        return accounting.formatNumber(\n            value,\n            outputFormat.precision,\n            outputFormat.thousand,\n            outputFormat.decimal\n        );\n    }\n\n    /**\n     * Returns translation for given text key.\n     * @param key\n     * @returns {*|string}\n     */\n    getTranslation(key: ?string) {\n        return this.translations[key];\n    }\n\n    /**\n     * Returns all translations for current locale.\n     * @returns {*|{}}\n     */\n    getTranslations(): Object {\n        return this.translations;\n    }\n\n    /**\n     * Returns true if given key has a translation for currently set locale.\n     * @param key\n     */\n    hasTranslation(key: string): boolean {\n        return key in this.translations;\n    }\n\n    /**\n     * Sets translation for given text key.\n     * @param key\n     * @param translation\n     * @returns {I18N}\n     */\n    setTranslation(key: string, translation: string): I18N {\n        this.translations[key] = translation;\n        return this;\n    }\n\n    /**\n     * Sets translations that will be used.\n     * @returns {*|{}}\n     */\n    setTranslations(translations: Object): I18N {\n        this.translations = translations;\n        return this;\n    }\n\n    /**\n     * Clears all translations.\n     * @returns {*|{}}\n     */\n    clearTranslations(): I18N {\n        this.setTranslations({});\n        return this;\n    }\n\n    /**\n     * Merges given translations object with already existing.\n     * @returns {*|{}}\n     */\n\n    mergeTranslations(translations: Object) {\n        return _.assign(this.translations, translations);\n    }\n\n    /**\n     * Returns currently selected locale (locale's key).\n     */\n    getLocale(): ?string {\n        return this.locale;\n    }\n\n    /**\n     * Sets current locale.\n     */\n    setLocale(locale: string): I18N {\n        this.locale = locale;\n        return this;\n    }\n\n    /**\n     * Registers single modifier.\n     * @returns {I18N}\n     */\n    registerModifier(modifier: Modifier): I18N {\n        this.modifiers[modifier.name] = modifier;\n        return this;\n    }\n\n    /**\n     * Registers all modifiers in given array.\n     * @param modifiers\n     * @returns {I18N}\n     */\n    registerModifiers(modifiers: Array<Modifier>): I18N {\n        modifiers.forEach(modifier => this.registerModifier(modifier));\n        return this;\n    }\n\n    /**\n     * Unregisters given modifier.\n     * @param name\n     * @returns {I18N}\n     */\n    unregisterModifier(name: string): I18N {\n        delete this.modifiers[name];\n        return this;\n    }\n\n    /**\n     * Returns default formats\n     * @returns {{date: string, time: string, datetime: string, number: string}}\n     */\n    getDefaultFormats(): Object {\n        return {\n            date: \"DD/MM/YYYY\",\n            time: \"HH:mm\",\n            datetime: \"DD/MM/YYYY HH:mm\",\n            price: {\n                symbol: \"\",\n                format: \"{symbol}{amount}\",\n                decimal: \".\",\n                thousand: \",\",\n                precision: 2\n            },\n            number: {\n                decimal: \".\",\n                thousand: \",\",\n                precision: 2\n            }\n        };\n    }\n\n    /**\n     * Returns current format to be used when outputting dates.\n     */\n    getDateFormat(): string {\n        return _.get(this.locale, \"formats.date\", this.defaultFormats.date);\n    }\n\n    /**\n     * Returns current format to be used when outputting time.\n     */\n    getTimeFormat(): string {\n        return _.get(this.locale, \"formats.time\", this.defaultFormats.time);\n    }\n\n    /**\n     * Returns current format to be used when outputting date/time.\n     */\n    getDateTimeFormat(): string {\n        return _.get(this.locale, \"formats.datetime\", this.defaultFormats.datetime);\n    }\n\n    /**\n     * Returns current format to be used when outputting prices.\n     */\n    getPriceFormat(): Object {\n        return _.assign({}, this.defaultFormats.price, _.get(this.locale, \"formats.price\", {}));\n    }\n\n    /**\n     * Returns current format to be used when outputting numbers.\n     */\n    getNumberFormat(): Object {\n        return _.assign({}, this.defaultFormats.number, _.get(this.locale, \"formats.number\", {}));\n    }\n\n    __replaceVariables(text: string, values: Object): string {\n        const parts = text.split(/({.*?})/);\n        return parts.reduce((carry, part) => carry + this.__processTextPart(part, values), \"\");\n    }\n\n    __processTextPart(part: string, values: Object): string {\n        // If not a variable, but an ordinary text, just return it, we don't need to do any extra processing with it.\n        if (!_.startsWith(part, \"{\")) {\n            return part;\n        }\n\n        part = _.trim(part, \"{}\");\n        part = part.split(\"|\");\n\n        let [variable, modifier] = part;\n\n        if (!_.has(values, variable)) {\n            return `{${variable}}`;\n        }\n\n        // Check if we have received {value: ..., format: ...} object.\n        const output = { value: values[variable], format: null };\n\n        // If variable value is an object, the it must have 'value' key set.\n        // We must also be sure we are not dealing with React component.\n        if (_.isPlainObject(output.value) /* && !React.isValidElement(output.value)*/) {\n            if (!_.has(output.value, \"value\")) {\n                throw Error(`Key \"value\" is missing for variable {${variable}}.`);\n            }\n\n            // Before assigning real value, let's check if we have a custom formatter set.\n            if (_.isFunction(output.value.format)) {\n                output.format = output.value.format;\n            }\n\n            output.value = output.value.value;\n        }\n\n        if (modifier) {\n            let parameters = modifier.split(\":\");\n            let name = parameters.shift();\n            if (this.modifiers[name]) {\n                const modifier = this.modifiers[name];\n                output.value = modifier.execute(output.value, parameters);\n            }\n        }\n\n        if (output.format) {\n            return output.format(output.value);\n        }\n\n        return output.value;\n    }\n}\n\nexport default new I18N();\n"]}