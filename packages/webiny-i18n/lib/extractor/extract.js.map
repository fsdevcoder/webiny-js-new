{"version":3,"sources":["../../src/extractor/extract.js"],"names":["getNamespaces","source","regex","m","results","exec","index","lastIndex","allDeclaredNamespaces","variable","RegExp","matchedText","key"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;;AAMA,MAAMA,gBAAgBC,UAAU;AAC5B,UAAMC,QAAQ,qEAAd;AACA,QAAIC,CAAJ;;AAEA,UAAMC,UAAU,EAAhB;;AAEA,WAAO,CAACD,IAAID,MAAMG,IAAN,CAAWJ,MAAX,CAAL,MAA6B,IAApC,EAA0C;AACtC,YAAIE,EAAEG,KAAF,KAAYJ,MAAMK,SAAtB,EAAiC;AAC7BL,kBAAMK,SAAN;AACH;;AAEDH,gBAAQD,EAAE,CAAF,CAAR,IAAgBA,EAAE,CAAF,CAAhB;AACH;;AAED,WAAOC,OAAP;AACH,CAfD;;kBAiBeH,UAAU;AACrB,UAAMG,UAAU,EAAhB;AACA,UAAMI,wBAAwBR,cAAcC,MAAd,CAA9B;;AAEA,SAAK,IAAIQ,QAAT,IAAqBD,qBAArB,EAA4C;AACxC,cAAMN,QAAQ,IAAIQ,MAAJ,CAAWD,WAAW,QAAtB,EAAgC,GAAhC,CAAd;;AAEA,YAAIN,CAAJ;AACA,eAAO,CAACA,IAAID,MAAMG,IAAN,CAAWJ,MAAX,CAAL,MAA6B,IAApC,EAA0C;AACtC,gBAAIE,EAAEG,KAAF,KAAYJ,MAAMK,SAAtB,EAAiC;AAC7BL,sBAAMK,SAAN;AACH;;AAED;AACA,kBAAMI,cAAcR,EAAE,CAAF,CAApB;AACA,kBAAMS,MAAMJ,sBAAsBC,QAAtB,IAAkC,GAAlC,GAAwC,yBAAKE,WAAL,CAApD;AACAP,oBAAQQ,GAAR,IAAeD,WAAf;AACH;AACJ;;AAED,WAAOP,OAAP;AACH,C","file":"extract.js","sourcesContent":["import hash from \"short-hash\";\n\n/**\n * Searches for all declared namespaces.\n * Result contains an object with identifiers as keys, and namespaces they represent as values, for example:\n * {ns1: 'Webiny.Ns1', ns2: 'Webiny.Ns2', i18n: 'NewNamespace', t: 'Some.Other.Namespace'}\n * @param source\n */\nconst getNamespaces = source => {\n    const regex = /([a-zA-Z0-9]+)[ ]+=[ ]+i18n.namespace\\(['\"`]([a-zA-Z0-9.]+)['\"`]\\)/g;\n    let m;\n\n    const results = {};\n\n    while ((m = regex.exec(source)) !== null) {\n        if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n        }\n\n        results[m[1]] = m[2];\n    }\n\n    return results;\n};\n\nexport default source => {\n    const results = {};\n    const allDeclaredNamespaces = getNamespaces(source);\n\n    for (let variable in allDeclaredNamespaces) {\n        const regex = new RegExp(variable + \"`(.*)`\", \"g\");\n\n        let m;\n        while ((m = regex.exec(source)) !== null) {\n            if (m.index === regex.lastIndex) {\n                regex.lastIndex++;\n            }\n\n            // This is the key - namespace + hash of matched label.\n            const matchedText = m[1];\n            const key = allDeclaredNamespaces[variable] + \".\" + hash(matchedText);\n            results[key] = matchedText;\n        }\n    }\n\n    return results;\n};\n"]}