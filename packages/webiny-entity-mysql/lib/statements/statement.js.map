{"version":3,"sources":["../../src/statements/statement.js"],"names":["Statement","constructor","options","entity","generate","getColumns","columns","isEmpty","join","getWhere","where","process","$and","getOrder","order","length","query","forEach","push","getLimit","limit","isNumber","getOffset","offset","escape","value","payload","output","outerLoop","key","operators","i","operator","canProcess","statement","Error"],"mappings":";;;;;;;;;;;;;;AACA;;;;AACA;;;;;;AAKA,MAAMA,SAAN,CAAgB;;AAMZC,gBAAYC,UAAkB,EAA9B,EAAkCC,MAAlC,EAAkD;AAC9C,aAAKD,OAAL,GAAeA,OAAf;AACA,aAAKC,MAAL,GAAcA,MAAd;AACH;;AAEDC,eAAmB;AACf,eAAO,EAAP;AACH;;AAEDC,eAAWH,OAAX,EAAyD;AACrD,cAAMI,UAAUJ,QAAQI,OAAR,IAAmB,EAAnC;;AAEA,YAAI,iBAAEC,OAAF,CAAUD,OAAV,CAAJ,EAAwB;AACpB,mBAAO,IAAP;AACH;;AAED,eAAO,MAAMA,QAAQE,IAAR,CAAa,IAAb,CAAb;AACH;;AAEDC,aAASP,OAAT,EAA8C;AAC1C,YAAI,iBAAEK,OAAF,CAAUL,QAAQQ,KAAlB,CAAJ,EAA8B;AAC1B,mBAAO,EAAP;AACH;;AAED,eAAO,YAAY,KAAKC,OAAL,CAAa,EAAEC,MAAMV,QAAQQ,KAAhB,EAAb,CAAnB;AACH;;AAEDG,aAASX,OAAT,EAAyD;AACrD,YAAI,CAACA,QAAQY,KAAT,IAAkB,CAACZ,QAAQY,KAAR,CAAcC,MAArC,EAA6C;AACzC,mBAAO,EAAP;AACH;;AAED,YAAIC,QAAQ,EAAZ;;AAEAd,gBAAQY,KAAR,CAAcG,OAAd,CAAsBH,SAAS;AAC3BE,kBAAME,IAAN,CAAY,GAAEJ,MAAM,CAAN,CAAS,IAAGA,MAAM,CAAN,MAAa,CAAb,GAAiB,KAAjB,GAAyB,MAAO,EAA1D;AACH,SAFD;;AAIA,eAAO,eAAeE,MAAMR,IAAN,CAAW,IAAX,CAAtB;AACH;;AAEDW,aAASjB,OAAT,EAA8C;AAC1C,cAAMkB,QAAQlB,QAAQkB,KAAR,IAAiB,CAA/B;;AAEA,YAAI,iBAAEC,QAAF,CAAWD,KAAX,KAAqBA,QAAQ,CAAjC,EAAoC;AAChC,mBAAQ,UAASA,KAAM,EAAvB;AACH;AACD,eAAO,EAAP;AACH;;AAEDE,cAAUpB,OAAV,EAAgD;AAC5C,cAAMqB,SAASrB,QAAQqB,MAAR,IAAkB,CAAjC;;AAEA,YAAI,iBAAEF,QAAF,CAAWE,MAAX,KAAsBA,SAAS,CAAnC,EAAsC;AAClC,mBAAQ,WAAUA,MAAO,EAAzB;AACH;AACD,eAAO,EAAP;AACH;;AAEDC,WAAOC,KAAP,EAAqB;AACjB,eAAO,oBAAUD,MAAV,CAAiBC,KAAjB,CAAP;AACH;;AAED;;;;;;AAMAd,YAAQe,OAAR,EAAkC;AAC9B,YAAIC,SAAS,EAAb;;AAEAC,mBAAW,KAAK,MAAM,CAACC,GAAD,EAAMJ,KAAN,CAAX,IAA2B,uBAAeC,OAAf,CAA3B,EAAoD;AAC3D,kBAAMI,YAA6B,sBAAc,KAAK5B,OAAL,CAAa4B,SAA3B,CAAnC;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,UAAUf,MAA9B,EAAsCgB,GAAtC,EAA2C;AACvC,sBAAMC,WAAWF,UAAUC,CAAV,CAAjB;AACA,oBAAIC,SAASC,UAAT,CAAoB,EAAEJ,GAAF,EAAOJ,KAAP,EAAcS,WAAW,IAAzB,EAApB,CAAJ,EAA0D;AACtDP,8BAAUK,SAASrB,OAAT,CAAiB,EAAEkB,GAAF,EAAOJ,KAAP,EAAcS,WAAW,IAAzB,EAAjB,CAAV;AACA,6BAASN,SAAT;AACH;AACJ;AACD,kBAAM,IAAIO,KAAJ,CAAW,qBAAoBN,GAAI,MAAMJ,KAAY,IAArD,CAAN;AACH;;AAED,eAAOE,MAAP;AACH;AA3FW;;kBA8FD3B,S","file":"statement.js","sourcesContent":["// @flow\nimport SqlString from \"sqlstring\";\nimport _ from \"lodash\";\nimport type { OrderTuple } from \"webiny-entity/types\";\nimport type { Entity } from \"webiny-entity\";\nimport type { Operator, Payload } from \"../../types\";\n\nclass Statement {\n    entity: Entity;\n    options: {\n        operators: { [string]: Operator }\n    };\n\n    constructor(options: Object = {}, entity: Entity) {\n        this.options = options;\n        this.entity = entity;\n    }\n\n    generate(): string {\n        return \"\";\n    }\n\n    getColumns(options: { columns?: Array<string> }): string {\n        const columns = options.columns || [];\n\n        if (_.isEmpty(columns)) {\n            return \" *\";\n        }\n\n        return \" \" + columns.join(\", \");\n    }\n\n    getWhere(options: { where?: Object }): string {\n        if (_.isEmpty(options.where)) {\n            return \"\";\n        }\n\n        return \" WHERE \" + this.process({ $and: options.where });\n    }\n\n    getOrder(options: { order?: Array<OrderTuple> }): string {\n        if (!options.order || !options.order.length) {\n            return \"\";\n        }\n\n        let query = [];\n\n        options.order.forEach(order => {\n            query.push(`${order[0]} ${order[1] === 1 ? \"ASC\" : \"DESC\"}`);\n        });\n\n        return \" ORDER BY \" + query.join(\", \");\n    }\n\n    getLimit(options: { limit?: number }): string {\n        const limit = options.limit || 0;\n\n        if (_.isNumber(limit) && limit > 0) {\n            return ` LIMIT ${limit}`;\n        }\n        return \"\";\n    }\n\n    getOffset(options: { offset?: number }): string {\n        const offset = options.offset || 0;\n\n        if (_.isNumber(offset) && offset > 0) {\n            return ` OFFSET ${offset}`;\n        }\n        return \"\";\n    }\n\n    escape(value: mixed) {\n        return SqlString.escape(value);\n    }\n\n    /**\n     * Traverse the payload and apply operators to construct a valid MySQL statement\n     * @private\n     * @param {Object} payload\n     * @returns {string} SQL query\n     */\n    process(payload: Payload): string {\n        let output = \"\";\n\n        outerLoop: for (const [key, value] of Object.entries(payload)) {\n            const operators: Array<Operator> = Object.values(this.options.operators);\n            for (let i = 0; i < operators.length; i++) {\n                const operator = operators[i];\n                if (operator.canProcess({ key, value, statement: this })) {\n                    output += operator.process({ key, value, statement: this });\n                    continue outerLoop;\n                }\n            }\n            throw new Error(`Invalid operator {${key} : ${(value: any)}}.`);\n        }\n\n        return output;\n    }\n}\n\nexport default Statement;\n"]}