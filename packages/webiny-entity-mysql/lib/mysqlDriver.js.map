{"version":3,"sources":["../src/mysqlDriver.js"],"names":["MySQLDriver","constructor","options","operators","connection","model","tables","merge","prefix","naming","setOperator","name","operator","onEntityConstruct","entity","attr","char","setValidators","value","attribute","isId","getParentModel","getParentEntity","getModelClass","save","isExisting","id","__generateID","data","toStorage","sql","table","getTableName","where","limit","generate","getConnection","query","e","getAttribute","reset","delete","getStorageValue","find","clonedOptions","operation","offset","__preparePerPageOption","__preparePageOption","__prepareQueryOption","__prepareSearchOption","calculateFoundRows","results","totalCount","count","findOne","search","columns","match","RegExp","setTablePrefix","tablePrefix","getTablePrefix","setTableNaming","tableNameValue","getTableNaming","isClass","params","classId","tableName","driver","Object","fields","$search","$and","perPage","page"],"mappings":"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","file":"mysqlDriver.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport mdbid from \"mdbid\";\n\nimport type { Connection, Pool } from \"mysql\";\nimport { Entity, Driver, QueryResult } from \"webiny-entity\";\nimport { MySQLConnection } from \"webiny-mysql-connection\";\nimport type {\n    EntitySaveParams,\n    EntityFindParams,\n    EntityDeleteParams,\n    EntityFindOneParams\n} from \"webiny-entity/types\";\nimport type { Operator } from \"./../types\";\n\nimport { Insert, Update, Delete, Select } from \"./statements\";\nimport { MySQLModel } from \"./model\";\nimport operators from \"./operators\";\n\ndeclare type MySQLDriverOptions = {\n    connection: Connection | Pool,\n    model: Class<MySQLModel>,\n    operators: ?{ [string]: Operator },\n    tables: {\n        prefix: string,\n        naming: ?Function\n    }\n};\n\nclass MySQLDriver extends Driver {\n    connection: MySQLConnection;\n    model: Class<MySQLModel>;\n    operators: { [string]: Operator };\n    tables: {\n        prefix: string,\n        naming: ?Function\n    };\n\n    constructor(options: MySQLDriverOptions) {\n        super();\n        this.operators = { ...operators, ...options.operators };\n        this.connection = new MySQLConnection(options.connection);\n        this.model = options.model || MySQLModel;\n\n        this.tables = _.merge(\n            {\n                prefix: \"\",\n                naming: null\n            },\n            options.tables\n        );\n    }\n\n    setOperator(name: string, operator: Operator) {\n        this.operators[name] = operator;\n        return this;\n    }\n\n    onEntityConstruct(entity: Entity) {\n        entity\n            .attr(\"id\")\n            .char()\n            .setValidators((value, attribute) =>\n                this.isId(attribute.getParentModel().getParentEntity(), value)\n            );\n    }\n\n    getModelClass(): Class<MySQLModel> {\n        return this.model;\n    }\n\n    // eslint-disable-next-line\n    async save(entity: Entity, options: EntitySaveParams & {}): Promise<QueryResult> {\n        if (!entity.isExisting()) {\n            entity.id = MySQLDriver.__generateID();\n        }\n\n        if (entity.isExisting()) {\n            const data = await entity.toStorage();\n            const sql = new Update(\n                {\n                    operators: this.operators,\n                    table: this.getTableName(entity),\n                    data,\n                    where: { id: data.id },\n                    limit: 1\n                },\n                entity\n            ).generate();\n\n            await this.getConnection().query(sql);\n            return new QueryResult(true);\n        }\n\n        const data = await entity.toStorage();\n        const sql = new Insert(\n            {\n                operators: this.operators,\n                data,\n                table: this.getTableName(entity)\n            },\n            entity\n        ).generate();\n\n        try {\n            await this.getConnection().query(sql);\n        } catch (e) {\n            entity.id && entity.getAttribute(\"id\").reset();\n            throw e;\n        }\n\n        return new QueryResult(true);\n    }\n\n    // eslint-disable-next-line\n    async delete(entity: Entity, options: EntityDeleteParams & {}): Promise<QueryResult> {\n        const id = await entity.getAttribute(\"id\").getStorageValue();\n        const sql = new Delete(\n            {\n                operators: this.operators,\n                table: this.getTableName(entity),\n                where: { id },\n                limit: 1\n            },\n            entity\n        ).generate();\n\n        await this.getConnection().query(sql);\n        return new QueryResult(true);\n    }\n\n    async find(\n        entity: Entity | Class<Entity>,\n        options: EntityFindParams & {}\n    ): Promise<QueryResult> {\n        const clonedOptions = _.merge({}, options, {\n            operators: this.operators,\n            table: this.getTableName(entity),\n            operation: \"select\",\n            limit: 10,\n            offset: 0\n        });\n\n        MySQLDriver.__preparePerPageOption(clonedOptions);\n        MySQLDriver.__preparePageOption(clonedOptions);\n        MySQLDriver.__prepareQueryOption(clonedOptions);\n        MySQLDriver.__prepareSearchOption(clonedOptions);\n\n        clonedOptions.calculateFoundRows = true;\n\n        const sql = new Select(clonedOptions, entity).generate();\n        const results = await this.getConnection().query([sql, \"SELECT FOUND_ROWS() as count\"]);\n\n        return new QueryResult(results[0], { totalCount: results[1][0].count });\n    }\n\n    async findOne(\n        entity: Entity | Class<Entity>,\n        options: EntityFindOneParams & {}\n    ): Promise<QueryResult> {\n        const clonedOptions = {\n            operators: this.operators,\n            table: this.getTableName(entity),\n            where: options.query,\n            search: options.search,\n            limit: 1\n        };\n\n        MySQLDriver.__prepareQueryOption(clonedOptions);\n        MySQLDriver.__prepareSearchOption(clonedOptions);\n\n        const sql = new Select(clonedOptions, entity).generate();\n\n        const results = await this.getConnection().query(sql);\n        return new QueryResult(results[0]);\n    }\n\n    async count(\n        entity: Entity | Class<Entity>,\n        options: EntityFindParams & {}\n    ): Promise<QueryResult> {\n        const clonedOptions = _.merge(\n            {},\n            options,\n            {\n                operators: this.operators,\n                table: this.getTableName(entity),\n                columns: [\"COUNT(*) AS count\"]\n            },\n            entity\n        );\n\n        MySQLDriver.__prepareQueryOption(clonedOptions);\n        MySQLDriver.__prepareSearchOption(clonedOptions);\n\n        const sql = new Select(clonedOptions, entity).generate();\n\n        const results = await this.getConnection().query(sql);\n        return new QueryResult(results[0].count);\n    }\n\n    // eslint-disable-next-line\n    isId(entity: Entity | Class<Entity>, value: mixed, options: ?Object): boolean {\n        if (typeof value === \"string\") {\n            return value.match(new RegExp(\"^[0-9a-fA-F]{24}$\")) !== null;\n        }\n\n        return false;\n    }\n\n    getConnection(): MySQLConnection {\n        return this.connection;\n    }\n\n    setTablePrefix(tablePrefix: string): this {\n        this.tables.prefix = tablePrefix;\n        return this;\n    }\n\n    getTablePrefix(): string {\n        return this.tables.prefix;\n    }\n\n    setTableNaming(tableNameValue: Function): this {\n        this.tables.naming = tableNameValue;\n        return this;\n    }\n\n    getTableNaming(): ?Function {\n        return this.tables.naming;\n    }\n\n    getTableName(entity: Entity): string {\n        const isClass = typeof entity === \"function\";\n        const params = {\n            classId: isClass ? entity.classId : entity.constructor.classId,\n            tableName: isClass ? entity.tableName : entity.constructor.tableName\n        };\n\n        const getTableName = this.getTableNaming();\n        if (typeof getTableName === \"function\") {\n            return getTableName({ entity, ...params, driver: this });\n        }\n\n        if (params.tableName) {\n            return this.tables.prefix + params.tableName;\n        }\n\n        return this.tables.prefix + params.classId;\n    }\n\n    static MySQLDriver(clonedOptions: Object): void {\n        // Here we handle search (if passed) - we transform received arguments into linked LIKE statements.\n        if (clonedOptions.search instanceof Object) {\n            const { query, operator, fields: columns } = clonedOptions.search;\n            const search = { $search: { operator, columns, query } };\n\n            if (clonedOptions.where instanceof Object) {\n                clonedOptions.where = {\n                    $and: [search, clonedOptions.where]\n                };\n            } else {\n                clonedOptions.where = search;\n            }\n\n            delete clonedOptions.search;\n        }\n    }\n\n    static __preparePerPageOption(clonedOptions: Object): void {\n        if (\"perPage\" in clonedOptions) {\n            clonedOptions.limit = clonedOptions.perPage;\n            delete clonedOptions.perPage;\n        }\n    }\n\n    static __preparePageOption(clonedOptions: Object): void {\n        if (\"page\" in clonedOptions) {\n            clonedOptions.offset = clonedOptions.limit * (clonedOptions.page - 1);\n            delete clonedOptions.page;\n        }\n    }\n\n    static __prepareQueryOption(clonedOptions: Object): void {\n        if (clonedOptions.query instanceof Object) {\n            clonedOptions.where = clonedOptions.query;\n            delete clonedOptions.query;\n        }\n    }\n\n    static __prepareSearchOption(clonedOptions: Object): void {\n        // Here we handle search (if passed) - we transform received arguments into linked LIKE statements.\n        if (clonedOptions.search instanceof Object) {\n            const { query, operator, fields: columns } = clonedOptions.search;\n            const search = { $search: { operator, columns, query } };\n\n            if (clonedOptions.where instanceof Object) {\n                clonedOptions.where = {\n                    $and: [search, clonedOptions.where]\n                };\n            } else {\n                clonedOptions.where = search;\n            }\n\n            delete clonedOptions.search;\n        }\n    }\n\n    static __generateID() {\n        return mdbid();\n    }\n}\n\nexport default MySQLDriver;\n"]}