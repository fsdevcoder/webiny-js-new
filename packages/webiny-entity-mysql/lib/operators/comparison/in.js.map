{"version":3,"sources":["../../../src/operators/comparison/in.js"],"names":["inOperator","canProcess","key","value","statement","charAt","has","instance","entity","attribute","getAttribute","Array","isArray","process","get","andValue","map","v","$jsonArrayFindValue","item","escape","join"],"mappings":";;;;;;AACA;;;;AAEA;;AACA;;;;;;AAEA,MAAMA,aAAuB;AACzBC,gBAAY,CAAC,EAAEC,GAAF,EAAOC,KAAP,EAAcC,SAAd,EAAD,KAA+B;AACvC,YAAIF,IAAIG,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvB,mBAAO,KAAP;AACH;;AAED,YAAI,iBAAEC,GAAF,CAAMH,KAAN,EAAa,KAAb,CAAJ,EAAyB;AACrB,mBAAO,IAAP;AACH;;AAED,cAAMI,WACF,OAAOH,UAAUI,MAAjB,KAA4B,UAA5B,GAAyC,IAAIJ,UAAUI,MAAd,EAAzC,GAAkEJ,UAAUI,MADhF;AAEA,cAAMC,YAAYF,SAASG,YAAT,CAAsBR,GAAtB,CAAlB;;AAEA,eAAOS,MAAMC,OAAN,CAAcT,KAAd,KAAwB,EAAEM,gDAAF,CAA/B;AACH,KAfwB;AAgBzBI,aAAS,CAAC,EAAEX,GAAF,EAAOC,KAAP,EAAcC,SAAd,EAAD,KAA+B;AACpCD,gBAAQ,iBAAEW,GAAF,CAAMX,KAAN,EAAa,KAAb,EAAoBA,KAApB,CAAR;;AAEA,cAAMI,WACF,OAAOH,UAAUI,MAAjB,KAA4B,UAA5B,GAAyC,IAAIJ,UAAUI,MAAd,EAAzC,GAAkEJ,UAAUI,MADhF;AAEA,cAAMC,YAAYF,SAASG,YAAT,CAAsBR,GAAtB,CAAlB;AACA,YAAIO,gDAAJ,EAAyC;AACrC,kBAAMM,WAAWZ,MAAMa,GAAN,CAAUC,KAAK;AAC5B,uBAAO,EAAE,CAACf,GAAD,GAAO,EAAEgB,qBAAqBD,CAAvB,EAAT,EAAP;AACH,aAFgB,CAAjB;AAGA,mBAAO,aAAGJ,OAAH,CAAW,EAAEX,GAAF,EAAOC,OAAOY,QAAd,EAAwBX,SAAxB,EAAX,CAAP;AACH;;AAED,eAAOF,MAAM,MAAN,GAAeC,MAAMa,GAAN,CAAUG,QAAQf,UAAUgB,MAAV,CAAiBD,IAAjB,CAAlB,EAA0CE,IAA1C,CAA+C,IAA/C,CAAf,GAAsE,GAA7E;AACH;AA9BwB,CAA7B;kBAgCerB,U","file":"in.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport type { Operator } from \"../../../types\";\nimport { ArrayAttribute } from \"webiny-model\";\nimport or from \"../logical/or\";\n\nconst inOperator: Operator = {\n    canProcess: ({ key, value, statement }) => {\n        if (key.charAt(0) === \"$\") {\n            return false;\n        }\n\n        if (_.has(value, \"$in\")) {\n            return true;\n        }\n\n        const instance =\n            typeof statement.entity === \"function\" ? new statement.entity() : statement.entity;\n        const attribute = instance.getAttribute(key);\n\n        return Array.isArray(value) && !(attribute instanceof ArrayAttribute);\n    },\n    process: ({ key, value, statement }) => {\n        value = _.get(value, \"$in\", value);\n\n        const instance =\n            typeof statement.entity === \"function\" ? new statement.entity() : statement.entity;\n        const attribute = instance.getAttribute(key);\n        if (attribute instanceof ArrayAttribute) {\n            const andValue = value.map(v => {\n                return { [key]: { $jsonArrayFindValue: v } };\n            });\n            return or.process({ key, value: andValue, statement });\n        }\n\n        return key + \" IN(\" + value.map(item => statement.escape(item)).join(\", \") + \")\";\n    }\n};\nexport default inOperator;\n"]}