{"version":3,"sources":["../../../src/operators/comparison/eq.js"],"names":["eq","canProcess","key","value","statement","charAt","has","isString","isNumber","includes","instance","entity","attribute","getAttribute","Array","isArray","process","get","$jsonArrayStrictEquality","$jsonArrayFindValue","escape"],"mappings":";;;;;;AACA;;;;AAEA;;AACA;;;;AACA;;;;;;AAEA,MAAMA,KAAe;AACjBC,gBAAY,CAAC,EAAEC,GAAF,EAAOC,KAAP,EAAcC,SAAd,EAAD,KAA+B;AACvC,YAAIF,IAAIG,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvB,mBAAO,KAAP;AACH;;AAED,YAAI,iBAAEC,GAAF,CAAMH,KAAN,EAAa,KAAb,CAAJ,EAAyB;AACrB,mBAAO,IAAP;AACH;;AAED;AACA,YAAI,iBAAEI,QAAF,CAAWJ,KAAX,KAAqB,iBAAEK,QAAF,CAAWL,KAAX,CAArB,IAA0C,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,EAAoBM,QAApB,CAA6BN,KAA7B,CAA9C,EAAmF;AAC/E,mBAAO,IAAP;AACH;;AAED,cAAMO,WACF,OAAON,UAAUO,MAAjB,KAA4B,UAA5B,GAAyC,IAAIP,UAAUO,MAAd,EAAzC,GAAkEP,UAAUO,MADhF;AAEA,cAAMC,YAAYF,SAASG,YAAT,CAAsBX,GAAtB,CAAlB;AACA,eAAOU,oDAAuCE,MAAMC,OAAN,CAAcZ,KAAd,CAA9C;AACH,KAnBgB;AAoBjBa,aAAS,CAAC,EAAEd,GAAF,EAAOC,KAAP,EAAcC,SAAd,EAAD,KAA+B;AACpCD,gBAAQ,iBAAEc,GAAF,CAAMd,KAAN,EAAa,KAAb,EAAoBA,KAApB,CAAR;AACA,YAAIA,UAAU,IAAd,EAAoB;AAChB,mBAAOD,MAAM,UAAb;AACH;;AAED,cAAMQ,WACF,OAAON,UAAUO,MAAjB,KAA4B,UAA5B,GAAyC,IAAIP,UAAUO,MAAd,EAAzC,GAAkEP,UAAUO,MADhF;AAEA,cAAMC,YAAYF,SAASG,YAAT,CAAsBX,GAAtB,CAAlB;AACA,YAAIU,gDAAJ,EAAyC;AACrC;AACA,gBAAIE,MAAMC,OAAN,CAAcZ,KAAd,CAAJ,EAA0B;AACtB,uBAAO,kCAAwBa,OAAxB,CAAgC;AACnCd,uBADmC;AAEnCC,2BAAO,EAAEe,0BAA0Bf,KAA5B,EAF4B;AAGnCC;AAHmC,iBAAhC,CAAP;AAKH,aAND,MAMO;AACH,uBAAO,6BAAmBY,OAAnB,CAA2B;AAC9Bd,uBAD8B;AAE9BC,2BAAO,EAAEgB,qBAAqBhB,KAAvB,EAFuB;AAG9BC;AAH8B,iBAA3B,CAAP;AAKH;AACJ;;AAED,eAAOF,MAAM,KAAN,GAAcE,UAAUgB,MAAV,CAAiBjB,KAAjB,CAArB;AACH;AA/CgB,CAArB;;kBAkDeH,E","file":"eq.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport type { Operator } from \"../../../types\";\nimport { ArrayAttribute } from \"webiny-model\";\nimport jsonArrayStrictEquality from \"./../comparison/jsonArrayStrictEquality\";\nimport jsonArrayFindValue from \"./../comparison/jsonArrayFindValue\";\n\nconst eq: Operator = {\n    canProcess: ({ key, value, statement }) => {\n        if (key.charAt(0) === \"$\") {\n            return false;\n        }\n\n        if (_.has(value, \"$eq\")) {\n            return true;\n        }\n\n        // Valid values are 1, '1', null, true, false.\n        if (_.isString(value) || _.isNumber(value) || [null, true, false].includes(value)) {\n            return true;\n        }\n\n        const instance =\n            typeof statement.entity === \"function\" ? new statement.entity() : statement.entity;\n        const attribute = instance.getAttribute(key);\n        return attribute instanceof ArrayAttribute && Array.isArray(value);\n    },\n    process: ({ key, value, statement }) => {\n        value = _.get(value, \"$eq\", value);\n        if (value === null) {\n            return key + \" IS NULL\";\n        }\n\n        const instance =\n            typeof statement.entity === \"function\" ? new statement.entity() : statement.entity;\n        const attribute = instance.getAttribute(key);\n        if (attribute instanceof ArrayAttribute) {\n            // Match all values (strict array equality check)\n            if (Array.isArray(value)) {\n                return jsonArrayStrictEquality.process({\n                    key,\n                    value: { $jsonArrayStrictEquality: value },\n                    statement\n                });\n            } else {\n                return jsonArrayFindValue.process({\n                    key,\n                    value: { $jsonArrayFindValue: value },\n                    statement\n                });\n            }\n        }\n\n        return key + \" = \" + statement.escape(value);\n    }\n};\n\nexport default eq;\n"]}