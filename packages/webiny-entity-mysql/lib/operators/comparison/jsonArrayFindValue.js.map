{"version":3,"sources":["../../../src/operators/comparison/jsonArrayFindValue.js"],"names":["jsonArrayFindValue","canProcess","value","has","process","key","statement","escape"],"mappings":";;;;;;AACA;;;;;;AAGA,MAAMA,qBAA+B;AACjCC,gBAAY,CAAC,EAAEC,KAAF,EAAD,KAAe;AACvB,eAAO,iBAAEC,GAAF,CAAMD,KAAN,EAAa,qBAAb,CAAP;AACH,KAHgC;AAIjCE,aAAS,CAAC,EAAEC,GAAF,EAAOH,KAAP,EAAcI,SAAd,EAAD,KAA+B;AACpCJ,gBAAQA,MAAM,qBAAN,CAAR;AACA,eAAO,iBAAiBG,GAAjB,GAAuB,WAAvB,GAAqCC,UAAUC,MAAV,CAAiBL,KAAjB,CAArC,GAA+D,eAAtE;AACH;AAPgC,CAArC;kBASeF,kB","file":"jsonArrayFindValue.js","sourcesContent":["// @flow\nimport _ from \"lodash\";\nimport type { Operator } from \"../../../types\";\n\nconst jsonArrayFindValue: Operator = {\n    canProcess: ({ value }) => {\n        return _.has(value, \"$jsonArrayFindValue\");\n    },\n    process: ({ key, value, statement }) => {\n        value = value[\"$jsonArrayFindValue\"];\n        return \"JSON_SEARCH(\" + key + \", 'one', \" + statement.escape(value) + \") IS NOT NULL\";\n    }\n};\nexport default jsonArrayFindValue;\n"]}